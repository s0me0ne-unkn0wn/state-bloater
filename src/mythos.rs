#[allow(dead_code, unused_imports, non_camel_case_types, unreachable_patterns)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 31usize] = [
        "System",
        "ParachainSystem",
        "Timestamp",
        "ParachainInfo",
        "Utility",
        "Multisig",
        "Preimage",
        "Scheduler",
        "Balances",
        "TransactionPayment",
        "Nfts",
        "Marketplace",
        "Multibatching",
        "Sudo",
        "Council",
        "Democracy",
        "Treasury",
        "Authorship",
        "CollatorStaking",
        "Session",
        "Aura",
        "AuraExt",
        "XcmpQueue",
        "PolkadotXcm",
        "CumulusXcm",
        "MessageQueue",
        "Proxy",
        "Vesting",
        "Escrow",
        "MythProxy",
        "Dmarket",
    ];
    pub static RUNTIME_APIS: [&str; 16usize] = [
        "AuraApi",
        "Core",
        "GenesisBuilder",
        "Metadata",
        "BlockBuilder",
        "TaggedTransactionQueue",
        "OffchainWorkerApi",
        "SessionKeys",
        "AccountNonceApi",
        "TransactionPaymentApi",
        "TransactionPaymentCallApi",
        "DmarketApi",
        "AuraUnincludedSegmentApi",
        "CollectCollationInfo",
        "CollatorStakingApi",
        "DryRunApi",
    ];
    #[doc = r" The error type that is returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::mainnet_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
    #[doc = r" The outer error enum represents the DispatchError's Module variant."]
    pub type Error = runtime_types::mainnet_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use subxt::ext::subxt_core::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {
            pub fn aura_api(&self) -> aura_api::AuraApi {
                aura_api::AuraApi
            }
            pub fn core(&self) -> core::Core {
                core::Core
            }
            pub fn genesis_builder(&self) -> genesis_builder::GenesisBuilder {
                genesis_builder::GenesisBuilder
            }
            pub fn metadata(&self) -> metadata::Metadata {
                metadata::Metadata
            }
            pub fn block_builder(&self) -> block_builder::BlockBuilder {
                block_builder::BlockBuilder
            }
            pub fn tagged_transaction_queue(
                &self,
            ) -> tagged_transaction_queue::TaggedTransactionQueue {
                tagged_transaction_queue::TaggedTransactionQueue
            }
            pub fn offchain_worker_api(&self) -> offchain_worker_api::OffchainWorkerApi {
                offchain_worker_api::OffchainWorkerApi
            }
            pub fn session_keys(&self) -> session_keys::SessionKeys {
                session_keys::SessionKeys
            }
            pub fn account_nonce_api(&self) -> account_nonce_api::AccountNonceApi {
                account_nonce_api::AccountNonceApi
            }
            pub fn transaction_payment_api(
                &self,
            ) -> transaction_payment_api::TransactionPaymentApi {
                transaction_payment_api::TransactionPaymentApi
            }
            pub fn transaction_payment_call_api(
                &self,
            ) -> transaction_payment_call_api::TransactionPaymentCallApi {
                transaction_payment_call_api::TransactionPaymentCallApi
            }
            pub fn dmarket_api(&self) -> dmarket_api::DmarketApi {
                dmarket_api::DmarketApi
            }
            pub fn aura_unincluded_segment_api(
                &self,
            ) -> aura_unincluded_segment_api::AuraUnincludedSegmentApi {
                aura_unincluded_segment_api::AuraUnincludedSegmentApi
            }
            pub fn collect_collation_info(&self) -> collect_collation_info::CollectCollationInfo {
                collect_collation_info::CollectCollationInfo
            }
            pub fn collator_staking_api(&self) -> collator_staking_api::CollatorStakingApi {
                collator_staking_api::CollatorStakingApi
            }
            pub fn dry_run_api(&self) -> dry_run_api::DryRunApi {
                dry_run_api::DryRunApi
            }
        }
        pub mod aura_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API necessary for block authorship with aura."]
            pub struct AuraApi;
            impl AuraApi {
                #[doc = " Returns the slot duration for Aura."]
                #[doc = ""]
                #[doc = " Currently, only the value provided by this type at genesis will be used."]
                pub fn slot_duration(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::SlotDuration,
                    types::slot_duration::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AuraApi",
                        "slot_duration",
                        types::SlotDuration {},
                        [
                            233u8, 210u8, 132u8, 172u8, 100u8, 125u8, 239u8, 92u8, 114u8, 82u8,
                            7u8, 110u8, 179u8, 196u8, 10u8, 19u8, 211u8, 15u8, 174u8, 2u8, 91u8,
                            73u8, 133u8, 100u8, 205u8, 201u8, 191u8, 60u8, 163u8, 122u8, 215u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " Return the current set of authorities."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Authorities,
                    types::authorities::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AuraApi",
                        "authorities",
                        types::Authorities {},
                        [
                            35u8, 244u8, 24u8, 155u8, 95u8, 1u8, 221u8, 159u8, 33u8, 144u8, 213u8,
                            26u8, 13u8, 21u8, 136u8, 72u8, 45u8, 47u8, 15u8, 51u8, 235u8, 10u8,
                            6u8, 219u8, 9u8, 246u8, 50u8, 252u8, 49u8, 77u8, 64u8, 182u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod slot_duration {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_consensus_slots::SlotDuration;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SlotDuration {}
                pub mod authorities {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Authorities {}
            }
        }
        pub mod core {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Core` runtime api that every Substrate runtime needs to implement."]
            pub struct Core;
            impl Core {
                #[doc = " Returns the version of the runtime."]
                pub fn version(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Version,
                    types::version::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "version",
                        types::Version {},
                        [
                            79u8, 22u8, 137u8, 4u8, 40u8, 64u8, 30u8, 180u8, 49u8, 222u8, 114u8,
                            125u8, 44u8, 25u8, 33u8, 152u8, 98u8, 42u8, 72u8, 178u8, 240u8, 103u8,
                            34u8, 187u8, 81u8, 161u8, 183u8, 6u8, 120u8, 2u8, 146u8, 0u8,
                        ],
                    )
                }
                #[doc = " Execute the given block."]
                pub fn execute_block(
                    &self,
                    block: types::execute_block::Block,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ExecuteBlock,
                    types::execute_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "execute_block",
                        types::ExecuteBlock { block },
                        [
                            133u8, 135u8, 228u8, 65u8, 106u8, 27u8, 85u8, 158u8, 112u8, 254u8,
                            93u8, 26u8, 102u8, 201u8, 118u8, 216u8, 249u8, 247u8, 91u8, 74u8, 56u8,
                            208u8, 231u8, 115u8, 131u8, 29u8, 209u8, 6u8, 65u8, 57u8, 214u8, 125u8,
                        ],
                    )
                }
                #[doc = " Initialize a block with the given header and return the runtime executive mode."]
                pub fn initialize_block(
                    &self,
                    header: types::initialize_block::Header,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::InitializeBlock,
                    types::initialize_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "initialize_block",
                        types::InitializeBlock { header },
                        [
                            132u8, 169u8, 113u8, 112u8, 80u8, 139u8, 113u8, 35u8, 41u8, 81u8, 36u8,
                            35u8, 37u8, 202u8, 29u8, 207u8, 205u8, 229u8, 145u8, 7u8, 133u8, 94u8,
                            25u8, 108u8, 233u8, 86u8, 234u8, 29u8, 236u8, 57u8, 56u8, 186u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod version {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_version::RuntimeVersion;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Version {}
                pub mod execute_block {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ExecuteBlock {
                    pub block: execute_block::Block,
                }
                pub mod initialize_block {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_runtime::ExtrinsicInclusionMode;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InitializeBlock {
                    pub header: initialize_block::Header,
                }
            }
        }
        pub mod genesis_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API to interact with `RuntimeGenesisConfig` for the runtime"]
            pub struct GenesisBuilder;
            impl GenesisBuilder {
                #[doc = " Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the"]
                #[doc = " storage."]
                #[doc = ""]
                #[doc = " In the case of a FRAME-based runtime, this function deserializes the full"]
                #[doc = " `RuntimeGenesisConfig` from the given JSON blob and puts it into the storage. If the"]
                #[doc = " provided JSON blob is incorrect or incomplete or the deserialization fails, an error"]
                #[doc = " is returned."]
                #[doc = ""]
                #[doc = " Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no"]
                #[doc = " defaults will be used."]
                pub fn build_state(
                    &self,
                    json: types::build_state::Json,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::BuildState,
                    types::build_state::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GenesisBuilder",
                        "build_state",
                        types::BuildState { json },
                        [
                            203u8, 233u8, 104u8, 116u8, 111u8, 131u8, 201u8, 235u8, 117u8, 116u8,
                            140u8, 185u8, 93u8, 25u8, 155u8, 210u8, 56u8, 49u8, 23u8, 32u8, 253u8,
                            92u8, 149u8, 241u8, 85u8, 245u8, 137u8, 45u8, 209u8, 189u8, 81u8, 2u8,
                        ],
                    )
                }
                #[doc = " Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by"]
                #[doc = " `id`."]
                #[doc = ""]
                #[doc = " If `id` is `None` the function should return JSON blob representation of the default"]
                #[doc = " `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default"]
                #[doc = " `RuntimeGenesisConfig`."]
                #[doc = ""]
                #[doc = " Otherwise function returns a JSON representation of the built-in, named"]
                #[doc = " `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not"]
                #[doc = " exist. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of"]
                #[doc = " (potentially nested) key-value pairs that are intended for customizing the default"]
                #[doc = " runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation"]
                #[doc = " of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can"]
                #[doc = " be used in `build_state` method."]
                pub fn get_preset(
                    &self,
                    id: types::get_preset::Id,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetPreset,
                    types::get_preset::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GenesisBuilder",
                        "get_preset",
                        types::GetPreset { id },
                        [
                            43u8, 153u8, 23u8, 52u8, 113u8, 161u8, 227u8, 122u8, 169u8, 135u8,
                            119u8, 8u8, 128u8, 33u8, 143u8, 235u8, 13u8, 173u8, 58u8, 121u8, 178u8,
                            223u8, 66u8, 217u8, 22u8, 244u8, 168u8, 113u8, 202u8, 186u8, 241u8,
                            124u8,
                        ],
                    )
                }
                #[doc = " Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets."]
                #[doc = ""]
                #[doc = " The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If"]
                #[doc = " no named presets are provided by the runtime the list is empty."]
                pub fn preset_names(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::PresetNames,
                    types::preset_names::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GenesisBuilder",
                        "preset_names",
                        types::PresetNames {},
                        [
                            150u8, 117u8, 54u8, 129u8, 221u8, 130u8, 186u8, 71u8, 13u8, 140u8,
                            77u8, 180u8, 141u8, 37u8, 22u8, 219u8, 149u8, 218u8, 186u8, 206u8,
                            80u8, 42u8, 165u8, 41u8, 99u8, 184u8, 73u8, 37u8, 125u8, 188u8, 167u8,
                            122u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod build_state {
                    use super::runtime_types;
                    pub type Json =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::result::Result<
                            (),
                            ::subxt::ext::subxt_core::alloc::string::String,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BuildState {
                    pub json: build_state::Json,
                }
                pub mod get_preset {
                    use super::runtime_types;
                    pub type Id =
                        ::core::option::Option<::subxt::ext::subxt_core::alloc::string::String>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetPreset {
                    pub id: get_preset::Id,
                }
                pub mod preset_names {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::alloc::string::String,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PresetNames {}
            }
        }
        pub mod metadata {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Metadata` api trait that returns metadata for the runtime."]
            pub struct Metadata;
            impl Metadata {
                #[doc = " Returns the metadata of a runtime."]
                pub fn metadata(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Metadata,
                    types::metadata::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata",
                        types::Metadata {},
                        [
                            231u8, 24u8, 67u8, 152u8, 23u8, 26u8, 188u8, 82u8, 229u8, 6u8, 185u8,
                            27u8, 175u8, 68u8, 83u8, 122u8, 69u8, 89u8, 185u8, 74u8, 248u8, 87u8,
                            217u8, 124u8, 193u8, 252u8, 199u8, 186u8, 196u8, 179u8, 179u8, 96u8,
                        ],
                    )
                }
                #[doc = " Returns the metadata at a given version."]
                #[doc = ""]
                #[doc = " If the given `version` isn't supported, this will return `None`."]
                #[doc = " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."]
                pub fn metadata_at_version(
                    &self,
                    version: types::metadata_at_version::Version,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::MetadataAtVersion,
                    types::metadata_at_version::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata_at_version",
                        types::MetadataAtVersion { version },
                        [
                            131u8, 53u8, 212u8, 234u8, 16u8, 25u8, 120u8, 252u8, 153u8, 153u8,
                            216u8, 28u8, 54u8, 113u8, 52u8, 236u8, 146u8, 68u8, 142u8, 8u8, 10u8,
                            169u8, 131u8, 142u8, 204u8, 38u8, 48u8, 108u8, 134u8, 86u8, 226u8,
                            61u8,
                        ],
                    )
                }
                #[doc = " Returns the supported metadata versions."]
                #[doc = ""]
                #[doc = " This can be used to call `metadata_at_version`."]
                pub fn metadata_versions(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::MetadataVersions,
                    types::metadata_versions::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata_versions",
                        types::MetadataVersions {},
                        [
                            23u8, 144u8, 137u8, 91u8, 188u8, 39u8, 231u8, 208u8, 252u8, 218u8,
                            224u8, 176u8, 77u8, 32u8, 130u8, 212u8, 223u8, 76u8, 100u8, 190u8,
                            82u8, 94u8, 190u8, 8u8, 82u8, 244u8, 225u8, 179u8, 85u8, 176u8, 56u8,
                            16u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod metadata {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_core::OpaqueMetadata;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Metadata {}
                pub mod metadata_at_version {
                    use super::runtime_types;
                    pub type Version = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::core::option::Option<runtime_types::sp_core::OpaqueMetadata>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MetadataAtVersion {
                    pub version: metadata_at_version::Version,
                }
                pub mod metadata_versions {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MetadataVersions {}
            }
        }
        pub mod block_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `BlockBuilder` api trait that provides the required functionality for building a block."]
            pub struct BlockBuilder;
            impl BlockBuilder {
                #[doc = " Apply the given extrinsic."]
                #[doc = ""]
                #[doc = " Returns an inclusion outcome which specifies if this extrinsic is included in"]
                #[doc = " this block or not."]
                pub fn apply_extrinsic(
                    &self,
                    extrinsic: types::apply_extrinsic::Extrinsic,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ApplyExtrinsic,
                    types::apply_extrinsic::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "apply_extrinsic",
                        types::ApplyExtrinsic { extrinsic },
                        [
                            192u8, 184u8, 199u8, 4u8, 85u8, 136u8, 214u8, 205u8, 29u8, 29u8, 98u8,
                            145u8, 172u8, 92u8, 168u8, 161u8, 150u8, 133u8, 100u8, 243u8, 100u8,
                            100u8, 118u8, 28u8, 104u8, 82u8, 93u8, 63u8, 79u8, 36u8, 149u8, 144u8,
                        ],
                    )
                }
                #[doc = " Finish the current block."]
                pub fn finalize_block(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::FinalizeBlock,
                    types::finalize_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "finalize_block",
                        types::FinalizeBlock {},
                        [
                            244u8, 207u8, 24u8, 33u8, 13u8, 69u8, 9u8, 249u8, 145u8, 143u8, 122u8,
                            96u8, 197u8, 55u8, 64u8, 111u8, 238u8, 224u8, 34u8, 201u8, 27u8, 146u8,
                            232u8, 99u8, 191u8, 30u8, 114u8, 16u8, 32u8, 220u8, 58u8, 62u8,
                        ],
                    )
                }
                #[doc = " Generate inherent extrinsics. The inherent data will vary from chain to chain."]
                pub fn inherent_extrinsics(
                    &self,
                    inherent: types::inherent_extrinsics::Inherent,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::InherentExtrinsics,
                    types::inherent_extrinsics::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "inherent_extrinsics",
                        types::InherentExtrinsics { inherent },
                        [
                            254u8, 110u8, 245u8, 201u8, 250u8, 192u8, 27u8, 228u8, 151u8, 213u8,
                            166u8, 89u8, 94u8, 81u8, 189u8, 234u8, 64u8, 18u8, 245u8, 80u8, 29u8,
                            18u8, 140u8, 129u8, 113u8, 236u8, 135u8, 55u8, 79u8, 159u8, 175u8,
                            183u8,
                        ],
                    )
                }
                #[doc = " Check that the inherents are valid. The inherent data will vary from chain to chain."]
                pub fn check_inherents(
                    &self,
                    block: types::check_inherents::Block,
                    data: types::check_inherents::Data,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CheckInherents,
                    types::check_inherents::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "check_inherents",
                        types::CheckInherents { block, data },
                        [
                            153u8, 134u8, 1u8, 215u8, 139u8, 11u8, 53u8, 51u8, 210u8, 175u8, 197u8,
                            28u8, 38u8, 209u8, 175u8, 247u8, 142u8, 157u8, 50u8, 151u8, 164u8,
                            191u8, 181u8, 118u8, 80u8, 97u8, 160u8, 248u8, 110u8, 217u8, 181u8,
                            234u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod apply_extrinsic {
                    use super::runtime_types;
                    pub type Extrinsic = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ApplyExtrinsic {
                    pub extrinsic: apply_extrinsic::Extrinsic,
                }
                pub mod finalize_block {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FinalizeBlock {}
                pub mod inherent_extrinsics {
                    use super::runtime_types;
                    pub type Inherent = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InherentExtrinsics {
                    pub inherent: inherent_extrinsics::Inherent,
                }
                pub mod check_inherents {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 > , :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > > ;
                    pub type Data = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_inherents::CheckInherentsResult;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CheckInherents {
                    pub block: check_inherents::Block,
                    pub data: check_inherents::Data,
                }
            }
        }
        pub mod tagged_transaction_queue {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
            pub struct TaggedTransactionQueue;
            impl TaggedTransactionQueue {
                #[doc = " Validate the transaction."]
                #[doc = ""]
                #[doc = " This method is invoked by the transaction pool to learn details about given transaction."]
                #[doc = " The implementation should make sure to verify the correctness of the transaction"]
                #[doc = " against current state. The given `block_hash` corresponds to the hash of the block"]
                #[doc = " that is used as current state."]
                #[doc = ""]
                #[doc = " Note that this call may be performed by the pool multiple times and transactions"]
                #[doc = " might be verified in any possible order."]
                pub fn validate_transaction(
                    &self,
                    source: types::validate_transaction::Source,
                    tx: types::validate_transaction::Tx,
                    block_hash: types::validate_transaction::BlockHash,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ValidateTransaction,
                    types::validate_transaction::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TaggedTransactionQueue",
                        "validate_transaction",
                        types::ValidateTransaction {
                            source,
                            tx,
                            block_hash,
                        },
                        [
                            19u8, 53u8, 170u8, 115u8, 75u8, 121u8, 231u8, 50u8, 199u8, 181u8,
                            243u8, 170u8, 163u8, 224u8, 213u8, 134u8, 206u8, 207u8, 88u8, 242u8,
                            80u8, 139u8, 233u8, 87u8, 175u8, 249u8, 178u8, 169u8, 255u8, 171u8,
                            4u8, 125u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod validate_transaction {
                    use super::runtime_types;
                    pub type Source =
                        runtime_types::sp_runtime::transaction_validity::TransactionSource;
                    pub type Tx = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > ;
                    pub type BlockHash = ::subxt::ext::subxt_core::utils::H256;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < runtime_types :: sp_runtime :: transaction_validity :: ValidTransaction , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ValidateTransaction {
                    pub source: validate_transaction::Source,
                    pub tx: validate_transaction::Tx,
                    pub block_hash: validate_transaction::BlockHash,
                }
            }
        }
        pub mod offchain_worker_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The offchain worker api."]
            pub struct OffchainWorkerApi;
            impl OffchainWorkerApi {
                #[doc = " Starts the off-chain task for given block header."]
                pub fn offchain_worker(
                    &self,
                    header: types::offchain_worker::Header,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::OffchainWorker,
                    types::offchain_worker::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "OffchainWorkerApi",
                        "offchain_worker",
                        types::OffchainWorker { header },
                        [
                            10u8, 135u8, 19u8, 153u8, 33u8, 216u8, 18u8, 242u8, 33u8, 140u8, 4u8,
                            223u8, 200u8, 130u8, 103u8, 118u8, 137u8, 24u8, 19u8, 127u8, 161u8,
                            29u8, 184u8, 111u8, 222u8, 111u8, 253u8, 73u8, 45u8, 31u8, 79u8, 60u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod offchain_worker {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct OffchainWorker {
                    pub header: offchain_worker::Header,
                }
            }
        }
        pub mod session_keys {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Session keys runtime api."]
            pub struct SessionKeys;
            impl SessionKeys {
                #[doc = " Generate a set of session keys with optionally using the given seed."]
                #[doc = " The keys should be stored within the keystore exposed via runtime"]
                #[doc = " externalities."]
                #[doc = ""]
                #[doc = " The seed needs to be a valid `utf8` string."]
                #[doc = ""]
                #[doc = " Returns the concatenated SCALE encoded public keys."]
                pub fn generate_session_keys(
                    &self,
                    seed: types::generate_session_keys::Seed,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GenerateSessionKeys,
                    types::generate_session_keys::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "SessionKeys",
                        "generate_session_keys",
                        types::GenerateSessionKeys { seed },
                        [
                            96u8, 171u8, 164u8, 166u8, 175u8, 102u8, 101u8, 47u8, 133u8, 95u8,
                            102u8, 202u8, 83u8, 26u8, 238u8, 47u8, 126u8, 132u8, 22u8, 11u8, 33u8,
                            190u8, 175u8, 94u8, 58u8, 245u8, 46u8, 80u8, 195u8, 184u8, 107u8, 65u8,
                        ],
                    )
                }
                #[doc = " Decode the given public session keys."]
                #[doc = ""]
                #[doc = " Returns the list of public raw public keys + key type."]
                pub fn decode_session_keys(
                    &self,
                    encoded: types::decode_session_keys::Encoded,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::DecodeSessionKeys,
                    types::decode_session_keys::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "SessionKeys",
                        "decode_session_keys",
                        types::DecodeSessionKeys { encoded },
                        [
                            57u8, 242u8, 18u8, 51u8, 132u8, 110u8, 238u8, 255u8, 39u8, 194u8, 8u8,
                            54u8, 198u8, 178u8, 75u8, 151u8, 148u8, 176u8, 144u8, 197u8, 87u8,
                            29u8, 179u8, 235u8, 176u8, 78u8, 252u8, 103u8, 72u8, 203u8, 151u8,
                            248u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod generate_session_keys {
                    use super::runtime_types;
                    pub type Seed = ::core::option::Option<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GenerateSessionKeys {
                    pub seed: generate_session_keys::Seed,
                }
                pub mod decode_session_keys {
                    use super::runtime_types;
                    pub type Encoded =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<(
                                ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                                runtime_types::sp_core::crypto::KeyTypeId,
                            )>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DecodeSessionKeys {
                    pub encoded: decode_session_keys::Encoded,
                }
            }
        }
        pub mod account_nonce_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The API to query account nonce."]
            pub struct AccountNonceApi;
            impl AccountNonceApi {
                #[doc = " Get current account nonce of given `AccountId`."]
                pub fn account_nonce(
                    &self,
                    account: types::account_nonce::Account,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::AccountNonce,
                    types::account_nonce::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AccountNonceApi",
                        "account_nonce",
                        types::AccountNonce { account },
                        [
                            111u8, 252u8, 218u8, 121u8, 124u8, 180u8, 33u8, 195u8, 162u8, 67u8,
                            106u8, 103u8, 133u8, 42u8, 226u8, 23u8, 203u8, 245u8, 174u8, 232u8,
                            216u8, 10u8, 156u8, 113u8, 91u8, 218u8, 20u8, 145u8, 31u8, 207u8,
                            199u8, 49u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod account_nonce {
                    use super::runtime_types;
                    pub type Account = runtime_types::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u32;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountNonce {
                    pub account: account_nonce::Account,
                }
            }
        }
        pub mod transaction_payment_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentApi;
            impl TransactionPaymentApi {
                pub fn query_info(
                    &self,
                    uxt: types::query_info::Uxt,
                    len: types::query_info::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryInfo,
                    types::query_info::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_info",
                        types::QueryInfo { uxt, len },
                        [
                            56u8, 30u8, 174u8, 34u8, 202u8, 24u8, 177u8, 189u8, 145u8, 36u8, 1u8,
                            156u8, 98u8, 209u8, 178u8, 49u8, 198u8, 23u8, 150u8, 173u8, 35u8,
                            205u8, 147u8, 129u8, 42u8, 22u8, 69u8, 3u8, 129u8, 8u8, 196u8, 139u8,
                        ],
                    )
                }
                pub fn query_fee_details(
                    &self,
                    uxt: types::query_fee_details::Uxt,
                    len: types::query_fee_details::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryFeeDetails,
                    types::query_fee_details::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_fee_details",
                        types::QueryFeeDetails { uxt, len },
                        [
                            117u8, 60u8, 137u8, 159u8, 237u8, 252u8, 216u8, 238u8, 232u8, 1u8,
                            100u8, 152u8, 26u8, 185u8, 145u8, 125u8, 68u8, 189u8, 4u8, 30u8, 125u8,
                            7u8, 196u8, 153u8, 235u8, 51u8, 219u8, 108u8, 185u8, 254u8, 100u8,
                            201u8,
                        ],
                    )
                }
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            206u8, 243u8, 189u8, 83u8, 231u8, 244u8, 247u8, 52u8, 126u8, 208u8,
                            224u8, 5u8, 163u8, 108u8, 254u8, 114u8, 214u8, 156u8, 227u8, 217u8,
                            211u8, 198u8, 121u8, 164u8, 110u8, 54u8, 181u8, 146u8, 50u8, 146u8,
                            146u8, 23u8,
                        ],
                    )
                }
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            92u8, 132u8, 29u8, 119u8, 66u8, 11u8, 196u8, 224u8, 129u8, 23u8, 249u8,
                            12u8, 32u8, 28u8, 92u8, 50u8, 188u8, 101u8, 203u8, 229u8, 248u8, 216u8,
                            130u8, 150u8, 212u8, 161u8, 81u8, 254u8, 116u8, 89u8, 162u8, 48u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_info {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryInfo {
                    pub uxt: query_info::Uxt,
                    pub len: query_info::Len,
                }
                pub mod query_fee_details {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: account :: AccountId20 , runtime_types :: mainnet_runtime :: RuntimeCall , runtime_types :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: cumulus_primitives_storage_weight_reclaim :: StorageWeightReclaim , runtime_types :: frame_metadata_hash_extension :: CheckMetadataHash ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryFeeDetails {
                    pub uxt: query_fee_details::Uxt,
                    pub len: query_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
        pub mod transaction_payment_call_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentCallApi;
            impl TransactionPaymentCallApi {
                #[doc = " Query information of a dispatch class, weight, and fee of a given encoded `Call`."]
                pub fn query_call_info(
                    &self,
                    call: types::query_call_info::Call,
                    len: types::query_call_info::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryCallInfo,
                    types::query_call_info::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_info",
                        types::QueryCallInfo { call, len },
                        [
                            143u8, 245u8, 106u8, 130u8, 56u8, 179u8, 195u8, 77u8, 136u8, 131u8,
                            62u8, 85u8, 196u8, 151u8, 255u8, 253u8, 77u8, 118u8, 147u8, 138u8,
                            82u8, 136u8, 50u8, 197u8, 41u8, 32u8, 246u8, 118u8, 195u8, 202u8, 58u8,
                            36u8,
                        ],
                    )
                }
                #[doc = " Query fee details of a given encoded `Call`."]
                pub fn query_call_fee_details(
                    &self,
                    call: types::query_call_fee_details::Call,
                    len: types::query_call_fee_details::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryCallFeeDetails,
                    types::query_call_fee_details::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_fee_details",
                        types::QueryCallFeeDetails { call, len },
                        [
                            96u8, 14u8, 163u8, 94u8, 126u8, 8u8, 27u8, 146u8, 131u8, 110u8, 60u8,
                            95u8, 71u8, 229u8, 66u8, 161u8, 68u8, 133u8, 27u8, 54u8, 45u8, 222u8,
                            181u8, 74u8, 137u8, 92u8, 215u8, 96u8, 82u8, 224u8, 168u8, 31u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `WeightToFee` given some input."]
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            117u8, 91u8, 94u8, 22u8, 248u8, 212u8, 15u8, 23u8, 97u8, 116u8, 64u8,
                            228u8, 83u8, 123u8, 87u8, 77u8, 97u8, 7u8, 98u8, 181u8, 6u8, 165u8,
                            114u8, 141u8, 164u8, 113u8, 126u8, 88u8, 174u8, 171u8, 224u8, 35u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `LengthToFee` given some input."]
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            246u8, 40u8, 4u8, 160u8, 152u8, 94u8, 170u8, 53u8, 205u8, 122u8, 5u8,
                            69u8, 70u8, 25u8, 128u8, 156u8, 119u8, 134u8, 116u8, 147u8, 14u8,
                            164u8, 65u8, 140u8, 86u8, 13u8, 250u8, 218u8, 89u8, 95u8, 234u8, 228u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_call_info {
                    use super::runtime_types;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryCallInfo {
                    pub call: query_call_info::Call,
                    pub len: query_call_info::Len,
                }
                pub mod query_call_fee_details {
                    use super::runtime_types;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryCallFeeDetails {
                    pub call: query_call_fee_details::Call,
                    pub len: query_call_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
        pub mod dmarket_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct DmarketApi;
            impl DmarketApi {
                pub fn hash_ask_bid_data(
                    &self,
                    trade: types::hash_ask_bid_data::Trade,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::HashAskBidData,
                    types::hash_ask_bid_data::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "DmarketApi",
                        "hash_ask_bid_data",
                        types::HashAskBidData { trade },
                        [
                            86u8, 219u8, 252u8, 171u8, 197u8, 167u8, 8u8, 215u8, 100u8, 207u8,
                            234u8, 27u8, 78u8, 74u8, 197u8, 20u8, 156u8, 22u8, 179u8, 184u8, 25u8,
                            72u8, 94u8, 20u8, 225u8, 104u8, 108u8, 207u8, 55u8, 11u8, 57u8, 128u8,
                        ],
                    )
                }
                pub fn get_ask_message(
                    &self,
                    caller: types::get_ask_message::Caller,
                    fee_address: types::get_ask_message::FeeAddress,
                    trade: types::get_ask_message::Trade,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetAskMessage,
                    types::get_ask_message::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "DmarketApi",
                        "get_ask_message",
                        types::GetAskMessage {
                            caller,
                            fee_address,
                            trade,
                        },
                        [
                            223u8, 18u8, 181u8, 201u8, 241u8, 91u8, 209u8, 190u8, 255u8, 218u8,
                            95u8, 183u8, 183u8, 211u8, 0u8, 55u8, 63u8, 149u8, 245u8, 143u8, 214u8,
                            168u8, 38u8, 77u8, 194u8, 117u8, 152u8, 1u8, 113u8, 20u8, 46u8, 56u8,
                        ],
                    )
                }
                pub fn get_bid_message(
                    &self,
                    caller: types::get_bid_message::Caller,
                    fee_address: types::get_bid_message::FeeAddress,
                    trade: types::get_bid_message::Trade,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetBidMessage,
                    types::get_bid_message::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "DmarketApi",
                        "get_bid_message",
                        types::GetBidMessage {
                            caller,
                            fee_address,
                            trade,
                        },
                        [
                            226u8, 106u8, 184u8, 206u8, 223u8, 24u8, 90u8, 221u8, 118u8, 143u8,
                            250u8, 231u8, 5u8, 59u8, 23u8, 29u8, 124u8, 214u8, 177u8, 127u8, 189u8,
                            75u8, 243u8, 211u8, 6u8, 96u8, 230u8, 93u8, 232u8, 124u8, 100u8, 240u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod hash_ask_bid_data {
                    use super::runtime_types;
                    pub type Trade = runtime_types::pallet_dmarket::types::TradeParams<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = (
                            ::subxt::ext::subxt_core::utils::H256,
                            ::subxt::ext::subxt_core::utils::H256,
                        );
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct HashAskBidData {
                    pub trade: hash_ask_bid_data::Trade,
                }
                pub mod get_ask_message {
                    use super::runtime_types;
                    pub type Caller = runtime_types::account::AccountId20;
                    pub type FeeAddress = runtime_types::account::AccountId20;
                    pub type Trade = runtime_types::pallet_dmarket::types::TradeParams<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetAskMessage {
                    pub caller: get_ask_message::Caller,
                    pub fee_address: get_ask_message::FeeAddress,
                    pub trade: get_ask_message::Trade,
                }
                pub mod get_bid_message {
                    use super::runtime_types;
                    pub type Caller = runtime_types::account::AccountId20;
                    pub type FeeAddress = runtime_types::account::AccountId20;
                    pub type Trade = runtime_types::pallet_dmarket::types::TradeParams<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetBidMessage {
                    pub caller: get_bid_message::Caller,
                    pub fee_address: get_bid_message::FeeAddress,
                    pub trade: get_bid_message::Trade,
                }
            }
        }
        pub mod aura_unincluded_segment_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " This runtime API is used to inform potential block authors whether they will"]
            #[doc = " have the right to author at a slot, assuming they have claimed the slot."]
            #[doc = ""]
            #[doc = " In particular, this API allows Aura-based parachains to regulate their \"unincluded segment\","]
            #[doc = " which is the section of the head of the chain which has not yet been made available in the"]
            #[doc = " relay chain."]
            #[doc = ""]
            #[doc = " When the unincluded segment is short, Aura chains will allow authors to create multiple"]
            #[doc = " blocks per slot in order to build a backlog. When it is saturated, this API will limit"]
            #[doc = " the amount of blocks that can be created."]
            pub struct AuraUnincludedSegmentApi;
            impl AuraUnincludedSegmentApi {
                #[doc = " Whether it is legal to extend the chain, assuming the given block is the most"]
                #[doc = " recently included one as-of the relay parent that will be built against, and"]
                #[doc = " the given slot."]
                #[doc = ""]
                #[doc = " This should be consistent with the logic the runtime uses when validating blocks to"]
                #[doc = " avoid issues."]
                #[doc = ""]
                #[doc = " When the unincluded segment is empty, i.e. `included_hash == at`, where at is the block"]
                #[doc = " whose state we are querying against, this must always return `true` as long as the slot"]
                #[doc = " is more recent than the included block itself."]
                pub fn can_build_upon(
                    &self,
                    included_hash: types::can_build_upon::IncludedHash,
                    slot: types::can_build_upon::Slot,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CanBuildUpon,
                    types::can_build_upon::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AuraUnincludedSegmentApi",
                        "can_build_upon",
                        types::CanBuildUpon {
                            included_hash,
                            slot,
                        },
                        [
                            255u8, 59u8, 225u8, 229u8, 189u8, 250u8, 48u8, 150u8, 92u8, 226u8,
                            221u8, 202u8, 143u8, 145u8, 107u8, 112u8, 151u8, 146u8, 136u8, 155u8,
                            118u8, 174u8, 52u8, 178u8, 14u8, 89u8, 194u8, 157u8, 110u8, 103u8,
                            92u8, 72u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod can_build_upon {
                    use super::runtime_types;
                    pub type IncludedHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type Slot = runtime_types::sp_consensus_slots::Slot;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::bool;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CanBuildUpon {
                    pub included_hash: can_build_upon::IncludedHash,
                    pub slot: can_build_upon::Slot,
                }
            }
        }
        pub mod collect_collation_info {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Runtime api to collect information about a collation."]
            pub struct CollectCollationInfo;
            impl CollectCollationInfo {
                #[doc = " Collect information about a collation."]
                #[doc = ""]
                #[doc = " The given `header` is the header of the built block for that"]
                #[doc = " we are collecting the collation info for."]
                pub fn collect_collation_info(
                    &self,
                    header: types::collect_collation_info::Header,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CollectCollationInfo,
                    types::collect_collation_info::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollectCollationInfo",
                        "collect_collation_info",
                        types::CollectCollationInfo { header },
                        [
                            56u8, 138u8, 105u8, 91u8, 216u8, 40u8, 255u8, 98u8, 86u8, 138u8, 185u8,
                            155u8, 80u8, 141u8, 85u8, 48u8, 252u8, 235u8, 178u8, 231u8, 111u8,
                            216u8, 71u8, 20u8, 33u8, 202u8, 24u8, 215u8, 214u8, 132u8, 51u8, 166u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod collect_collation_info {
                    use super::runtime_types;
                    pub type Header =
                        runtime_types::sp_runtime::generic::header::Header<::core::primitive::u32>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::cumulus_primitives_core::CollationInfo;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollectCollationInfo {
                    pub header: collect_collation_info::Header,
                }
            }
        }
        pub mod collator_staking_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " This runtime api allows to query:"]
            #[doc = " - The main pallet's pot account."]
            #[doc = " - The extra rewards pot account."]
            #[doc = " - Accumulated rewards for an account."]
            #[doc = " - Whether a given account has rewards pending to be claimed or not."]
            #[doc = ""]
            #[doc = " Sample implementation:"]
            #[doc = " ```ignore"]
            #[doc = " impl pallet_collator_staking::CollatorStakingApi<Block, AccountId, Balance> for Runtime {"]
            #[doc = "    fn main_pot_account() -> AccountId {"]
            #[doc = "        CollatorStaking::account_id()"]
            #[doc = "    }"]
            #[doc = "    fn extra_reward_pot_account() -> AccountId {"]
            #[doc = "        CollatorStaking::extra_reward_account_id()"]
            #[doc = "    }"]
            #[doc = "    fn total_rewards(account: AccountId) -> Balance {"]
            #[doc = "        CollatorStaking::calculate_unclaimed_rewards(&account)"]
            #[doc = "    }"]
            #[doc = "    fn should_claim(account: AccountId) -> bool {"]
            #[doc = "        !CollatorStaking::staker_has_claimed(&account)"]
            #[doc = "    }"]
            #[doc = "\t   fn candidates() -> Vec<(AccountId, Balance)> {"]
            #[doc = "        CollatorStaking::candidates()"]
            #[doc = "    }"]
            #[doc = " }"]
            #[doc = " ```"]
            pub struct CollatorStakingApi;
            impl CollatorStakingApi {
                #[doc = " Queries the main pot account."]
                pub fn main_pot_account(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::MainPotAccount,
                    types::main_pot_account::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollatorStakingApi",
                        "main_pot_account",
                        types::MainPotAccount {},
                        [
                            52u8, 94u8, 177u8, 40u8, 98u8, 222u8, 249u8, 198u8, 138u8, 245u8, 92u8,
                            178u8, 110u8, 63u8, 198u8, 168u8, 212u8, 76u8, 224u8, 133u8, 165u8,
                            135u8, 227u8, 188u8, 71u8, 240u8, 171u8, 189u8, 4u8, 215u8, 247u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " Queries the extra reward pot account."]
                pub fn extra_reward_pot_account(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ExtraRewardPotAccount,
                    types::extra_reward_pot_account::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollatorStakingApi",
                        "extra_reward_pot_account",
                        types::ExtraRewardPotAccount {},
                        [
                            26u8, 100u8, 132u8, 36u8, 196u8, 227u8, 235u8, 183u8, 209u8, 14u8,
                            191u8, 146u8, 123u8, 217u8, 249u8, 149u8, 175u8, 192u8, 101u8, 142u8,
                            205u8, 59u8, 31u8, 70u8, 202u8, 114u8, 39u8, 16u8, 233u8, 13u8, 2u8,
                            73u8,
                        ],
                    )
                }
                #[doc = " Gets the total accumulated rewards."]
                pub fn total_rewards(
                    &self,
                    account: types::total_rewards::Account,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::TotalRewards,
                    types::total_rewards::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollatorStakingApi",
                        "total_rewards",
                        types::TotalRewards { account },
                        [
                            33u8, 175u8, 42u8, 154u8, 37u8, 146u8, 159u8, 209u8, 134u8, 249u8,
                            153u8, 30u8, 113u8, 15u8, 232u8, 70u8, 28u8, 24u8, 75u8, 213u8, 24u8,
                            97u8, 107u8, 28u8, 57u8, 46u8, 214u8, 37u8, 199u8, 113u8, 243u8, 15u8,
                        ],
                    )
                }
                #[doc = " Returns true if user should claim rewards."]
                pub fn should_claim(
                    &self,
                    account: types::should_claim::Account,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ShouldClaim,
                    types::should_claim::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollatorStakingApi",
                        "should_claim",
                        types::ShouldClaim { account },
                        [
                            6u8, 76u8, 77u8, 32u8, 192u8, 190u8, 80u8, 178u8, 116u8, 206u8, 151u8,
                            138u8, 118u8, 44u8, 101u8, 174u8, 156u8, 185u8, 7u8, 129u8, 225u8,
                            101u8, 119u8, 237u8, 104u8, 240u8, 110u8, 6u8, 121u8, 35u8, 25u8,
                            121u8,
                        ],
                    )
                }
                #[doc = " Returns a list with all candidates and their stake."]
                pub fn candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Candidates,
                    types::candidates::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "CollatorStakingApi",
                        "candidates",
                        types::Candidates {},
                        [
                            226u8, 166u8, 36u8, 149u8, 201u8, 236u8, 173u8, 183u8, 91u8, 50u8,
                            202u8, 251u8, 229u8, 146u8, 220u8, 131u8, 195u8, 57u8, 113u8, 64u8,
                            41u8, 20u8, 250u8, 41u8, 249u8, 75u8, 238u8, 194u8, 227u8, 190u8,
                            215u8, 43u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod main_pot_account {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::account::AccountId20;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MainPotAccount {}
                pub mod extra_reward_pot_account {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::account::AccountId20;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ExtraRewardPotAccount {}
                pub mod total_rewards {
                    use super::runtime_types;
                    pub type Account = runtime_types::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct TotalRewards {
                    pub account: total_rewards::Account,
                }
                pub mod should_claim {
                    use super::runtime_types;
                    pub type Account = runtime_types::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::bool;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ShouldClaim {
                    pub account: should_claim::Account,
                }
                pub mod candidates {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::account::AccountId20,
                            ::core::primitive::u128,
                        )>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Candidates {}
            }
        }
        pub mod dry_run_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API for dry-running extrinsics and XCM programs to get the programs that need to be passed to the fees API."]
            #[doc = ""]
            #[doc = " All calls return a vector of tuples (location, xcm) where each \"xcm\" is executed in \"location\"."]
            #[doc = " If there's local execution, the location will be \"Here\"."]
            #[doc = " This vector can be used to calculate both execution and delivery fees."]
            #[doc = ""]
            #[doc = " Calls or XCMs might fail when executed, this doesn't mean the result of these calls will be an `Err`."]
            #[doc = " In those cases, there might still be a valid result, with the execution error inside it."]
            #[doc = " The only reasons why these calls might return an error are listed in the [`Error`] enum."]
            pub struct DryRunApi;
            impl DryRunApi {
                #[doc = " Dry run call."]
                pub fn dry_run_call(
                    &self,
                    origin: types::dry_run_call::Origin,
                    call: types::dry_run_call::Call,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::DryRunCall,
                    types::dry_run_call::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "DryRunApi",
                        "dry_run_call",
                        types::DryRunCall { origin, call },
                        [
                            14u8, 163u8, 233u8, 232u8, 250u8, 151u8, 109u8, 211u8, 191u8, 81u8,
                            158u8, 155u8, 231u8, 81u8, 117u8, 65u8, 91u8, 180u8, 183u8, 14u8,
                            203u8, 80u8, 21u8, 4u8, 165u8, 7u8, 55u8, 198u8, 156u8, 30u8, 111u8,
                            69u8,
                        ],
                    )
                }
                #[doc = " Dry run XCM program"]
                pub fn dry_run_xcm(
                    &self,
                    origin_location: types::dry_run_xcm::OriginLocation,
                    xcm: types::dry_run_xcm::Xcm,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::DryRunXcm,
                    types::dry_run_xcm::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "DryRunApi",
                        "dry_run_xcm",
                        types::DryRunXcm {
                            origin_location,
                            xcm,
                        },
                        [
                            229u8, 172u8, 122u8, 147u8, 225u8, 212u8, 41u8, 211u8, 55u8, 93u8,
                            17u8, 153u8, 24u8, 157u8, 92u8, 57u8, 152u8, 178u8, 155u8, 143u8,
                            167u8, 102u8, 160u8, 185u8, 160u8, 131u8, 129u8, 217u8, 155u8, 165u8,
                            223u8, 175u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod dry_run_call {
                    use super::runtime_types;
                    pub type Origin = runtime_types::mainnet_runtime::OriginCaller;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::result::Result<
                            runtime_types::xcm_runtime_apis::dry_run::CallDryRunEffects<
                                runtime_types::mainnet_runtime::RuntimeEvent,
                            >,
                            runtime_types::xcm_runtime_apis::dry_run::Error,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DryRunCall {
                    pub origin: dry_run_call::Origin,
                    pub call: dry_run_call::Call,
                }
                pub mod dry_run_xcm {
                    use super::runtime_types;
                    pub type OriginLocation = runtime_types::xcm::VersionedLocation;
                    pub type Xcm = runtime_types::xcm::VersionedXcm;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::result::Result<
                            runtime_types::xcm_runtime_apis::dry_run::XcmDryRunEffects<
                                runtime_types::mainnet_runtime::RuntimeEvent,
                            >,
                            runtime_types::xcm_runtime_apis::dry_run::Error,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DryRunXcm {
                    pub origin_location: dry_run_xcm::OriginLocation,
                    pub xcm: dry_run_xcm::Xcm,
                }
            }
        }
    }
    pub fn custom() -> CustomValuesApi {
        CustomValuesApi
    }
    pub struct CustomValuesApi;
    impl CustomValuesApi {}
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn parachain_system(&self) -> parachain_system::constants::ConstantsApi {
            parachain_system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn nfts(&self) -> nfts::constants::ConstantsApi {
            nfts::constants::ConstantsApi
        }
        pub fn marketplace(&self) -> marketplace::constants::ConstantsApi {
            marketplace::constants::ConstantsApi
        }
        pub fn multibatching(&self) -> multibatching::constants::ConstantsApi {
            multibatching::constants::ConstantsApi
        }
        pub fn council(&self) -> council::constants::ConstantsApi {
            council::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn collator_staking(&self) -> collator_staking::constants::ConstantsApi {
            collator_staking::constants::ConstantsApi
        }
        pub fn aura(&self) -> aura::constants::ConstantsApi {
            aura::constants::ConstantsApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::constants::ConstantsApi {
            xcmp_queue::constants::ConstantsApi
        }
        pub fn message_queue(&self) -> message_queue::constants::ConstantsApi {
            message_queue::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn escrow(&self) -> escrow::constants::ConstantsApi {
            escrow::constants::ConstantsApi
        }
        pub fn dmarket(&self) -> dmarket::constants::ConstantsApi {
            dmarket::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn parachain_system(&self) -> parachain_system::storage::StorageApi {
            parachain_system::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn parachain_info(&self) -> parachain_info::storage::StorageApi {
            parachain_info::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn nfts(&self) -> nfts::storage::StorageApi {
            nfts::storage::StorageApi
        }
        pub fn marketplace(&self) -> marketplace::storage::StorageApi {
            marketplace::storage::StorageApi
        }
        pub fn multibatching(&self) -> multibatching::storage::StorageApi {
            multibatching::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn collator_staking(&self) -> collator_staking::storage::StorageApi {
            collator_staking::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn aura(&self) -> aura::storage::StorageApi {
            aura::storage::StorageApi
        }
        pub fn aura_ext(&self) -> aura_ext::storage::StorageApi {
            aura_ext::storage::StorageApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::storage::StorageApi {
            xcmp_queue::storage::StorageApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::storage::StorageApi {
            polkadot_xcm::storage::StorageApi
        }
        pub fn message_queue(&self) -> message_queue::storage::StorageApi {
            message_queue::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn escrow(&self) -> escrow::storage::StorageApi {
            escrow::storage::StorageApi
        }
        pub fn myth_proxy(&self) -> myth_proxy::storage::StorageApi {
            myth_proxy::storage::StorageApi
        }
        pub fn dmarket(&self) -> dmarket::storage::StorageApi {
            dmarket::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn parachain_system(&self) -> parachain_system::calls::TransactionApi {
            parachain_system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn parachain_info(&self) -> parachain_info::calls::TransactionApi {
            parachain_info::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn nfts(&self) -> nfts::calls::TransactionApi {
            nfts::calls::TransactionApi
        }
        pub fn marketplace(&self) -> marketplace::calls::TransactionApi {
            marketplace::calls::TransactionApi
        }
        pub fn multibatching(&self) -> multibatching::calls::TransactionApi {
            multibatching::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn collator_staking(&self) -> collator_staking::calls::TransactionApi {
            collator_staking::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn xcmp_queue(&self) -> xcmp_queue::calls::TransactionApi {
            xcmp_queue::calls::TransactionApi
        }
        pub fn polkadot_xcm(&self) -> polkadot_xcm::calls::TransactionApi {
            polkadot_xcm::calls::TransactionApi
        }
        pub fn cumulus_xcm(&self) -> cumulus_xcm::calls::TransactionApi {
            cumulus_xcm::calls::TransactionApi
        }
        pub fn message_queue(&self) -> message_queue::calls::TransactionApi {
            message_queue::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn escrow(&self) -> escrow::calls::TransactionApi {
            escrow::calls::TransactionApi
        }
        pub fn myth_proxy(&self) -> myth_proxy::calls::TransactionApi {
            myth_proxy::calls::TransactionApi
        }
        pub fn dmarket(&self) -> dmarket::calls::TransactionApi {
            dmarket::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::ext::subxt_core::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                23u8, 164u8, 66u8, 173u8, 65u8, 31u8, 44u8, 132u8, 172u8, 16u8, 170u8, 115u8, 2u8,
                236u8, 30u8, 242u8, 76u8, 53u8, 71u8, 248u8, 85u8, 108u8, 253u8, 178u8, 40u8,
                214u8, 246u8, 135u8, 225u8, 193u8, 159u8, 2u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "Can be executed by every `origin`."]
                pub struct Remark {
                    pub remark: remark::Remark,
                }
                pub mod remark {
                    use super::runtime_types;
                    pub type Remark =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub struct SetHeapPages {
                    pub pages: set_heap_pages::Pages,
                }
                pub mod set_heap_pages {
                    use super::runtime_types;
                    pub type Pages = ::core::primitive::u64;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the new runtime code."]
                pub struct SetCode {
                    pub code: set_code::Code,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                #[doc = "version!"]
                pub struct SetCodeWithoutChecks {
                    pub code: set_code_without_checks::Code,
                }
                pub mod set_code_without_checks {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set some items of storage."]
                pub struct SetStorage {
                    pub items: set_storage::Items,
                }
                pub mod set_storage {
                    use super::runtime_types;
                    pub type Items = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Kill some items from storage."]
                pub struct KillStorage {
                    pub keys: kill_storage::Keys,
                }
                pub mod kill_storage {
                    use super::runtime_types;
                    pub type Keys = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub struct KillPrefix {
                    pub prefix: kill_prefix::Prefix,
                    pub subkeys: kill_prefix::Subkeys,
                }
                pub mod kill_prefix {
                    use super::runtime_types;
                    pub type Prefix =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Subkeys = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Make some on-chain remark and emit event."]
                pub struct RemarkWithEvent {
                    pub remark: remark_with_event::Remark,
                }
                pub mod remark_with_event {
                    use super::runtime_types;
                    pub type Remark =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub struct AuthorizeUpgrade {
                    pub code_hash: authorize_upgrade::CodeHash,
                }
                pub mod authorize_upgrade {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub struct AuthorizeUpgradeWithoutChecks {
                    pub code_hash: authorize_upgrade_without_checks::CodeHash,
                }
                pub mod authorize_upgrade_without_checks {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AuthorizeUpgradeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                #[doc = ""]
                #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                #[doc = "remains unchanged and that the spec version has increased."]
                #[doc = ""]
                #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                #[doc = ""]
                #[doc = "All origins are allowed."]
                pub struct ApplyAuthorizedUpgrade {
                    pub code: apply_authorized_upgrade::Code,
                }
                pub mod apply_authorized_upgrade {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApplyAuthorizedUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "apply_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "Can be executed by every `origin`."]
                pub fn remark(
                    &self,
                    remark: types::remark::Remark,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Remark>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: types::set_heap_pages::Pages,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetHeapPages>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                pub fn set_code(
                    &self,
                    code: types::set_code::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCode>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                #[doc = "version!"]
                pub fn set_code_without_checks(
                    &self,
                    code: types::set_code_without_checks::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCodeWithoutChecks>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: types::set_storage::Items,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetStorage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: types::kill_storage::Keys,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillStorage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: types::kill_prefix::Prefix,
                    subkeys: types::kill_prefix::Subkeys,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPrefix>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: types::remark_with_event::Remark,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemarkWithEvent>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub fn authorize_upgrade(
                    &self,
                    code_hash: types::authorize_upgrade::CodeHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AuthorizeUpgrade>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade { code_hash },
                        [
                            4u8, 14u8, 76u8, 107u8, 209u8, 129u8, 9u8, 39u8, 193u8, 17u8, 84u8,
                            254u8, 170u8, 214u8, 24u8, 155u8, 29u8, 184u8, 249u8, 241u8, 109u8,
                            58u8, 145u8, 131u8, 109u8, 63u8, 38u8, 165u8, 107u8, 215u8, 217u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub fn authorize_upgrade_without_checks(
                    &self,
                    code_hash: types::authorize_upgrade_without_checks::CodeHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::AuthorizeUpgradeWithoutChecks,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "authorize_upgrade_without_checks",
                        types::AuthorizeUpgradeWithoutChecks { code_hash },
                        [
                            126u8, 126u8, 55u8, 26u8, 47u8, 55u8, 66u8, 8u8, 167u8, 18u8, 29u8,
                            136u8, 146u8, 14u8, 189u8, 117u8, 16u8, 227u8, 162u8, 61u8, 149u8,
                            197u8, 104u8, 184u8, 185u8, 161u8, 99u8, 154u8, 80u8, 125u8, 181u8,
                            233u8,
                        ],
                    )
                }
                #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                #[doc = ""]
                #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                #[doc = "remains unchanged and that the spec version has increased."]
                #[doc = ""]
                #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                #[doc = ""]
                #[doc = "All origins are allowed."]
                pub fn apply_authorized_upgrade(
                    &self,
                    code: types::apply_authorized_upgrade::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ApplyAuthorizedUpgrade,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "apply_authorized_upgrade",
                        types::ApplyAuthorizedUpgrade { code },
                        [
                            232u8, 107u8, 127u8, 38u8, 230u8, 29u8, 97u8, 4u8, 160u8, 191u8, 222u8,
                            156u8, 245u8, 102u8, 196u8, 141u8, 44u8, 163u8, 98u8, 68u8, 125u8,
                            32u8, 124u8, 101u8, 108u8, 93u8, 211u8, 52u8, 0u8, 231u8, 33u8, 227u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: extrinsic_success::DispatchInfo,
            }
            pub mod extrinsic_success {
                use super::runtime_types;
                pub type DispatchInfo = runtime_types::frame_system::DispatchEventInfo;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: extrinsic_failed::DispatchError,
                pub dispatch_info: extrinsic_failed::DispatchInfo,
            }
            pub mod extrinsic_failed {
                use super::runtime_types;
                pub type DispatchError = runtime_types::sp_runtime::DispatchError;
                pub type DispatchInfo = runtime_types::frame_system::DispatchEventInfo;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::ext::subxt_core::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: new_account::Account,
            }
            pub mod new_account {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: killed_account::Account,
            }
            pub mod killed_account {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: remarked::Sender,
                pub hash: remarked::Hash,
            }
            pub mod remarked {
                use super::runtime_types;
                pub type Sender = runtime_types::account::AccountId20;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An upgrade was authorized."]
            pub struct UpgradeAuthorized {
                pub code_hash: upgrade_authorized::CodeHash,
                pub check_version: upgrade_authorized::CheckVersion,
            }
            pub mod upgrade_authorized {
                use super::runtime_types;
                pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                pub type CheckVersion = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account {
                    use super::runtime_types;
                    pub type Account = runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod extrinsic_count {
                    use super::runtime_types;
                    pub type ExtrinsicCount = ::core::primitive::u32;
                }
                pub mod inherents_applied {
                    use super::runtime_types;
                    pub type InherentsApplied = ::core::primitive::bool;
                }
                pub mod block_weight {
                    use super::runtime_types;
                    pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                }
                pub mod all_extrinsics_len {
                    use super::runtime_types;
                    pub type AllExtrinsicsLen = ::core::primitive::u32;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod extrinsic_data {
                    use super::runtime_types;
                    pub type ExtrinsicData =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod number {
                    use super::runtime_types;
                    pub type Number = ::core::primitive::u32;
                }
                pub mod parent_hash {
                    use super::runtime_types;
                    pub type ParentHash = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod digest {
                    use super::runtime_types;
                    pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
                }
                pub mod events {
                    use super::runtime_types;
                    pub type Events = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::mainnet_runtime::RuntimeEvent,
                            ::subxt::ext::subxt_core::utils::H256,
                        >,
                    >;
                }
                pub mod event_count {
                    use super::runtime_types;
                    pub type EventCount = ::core::primitive::u32;
                }
                pub mod event_topics {
                    use super::runtime_types;
                    pub type EventTopics = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod last_runtime_upgrade {
                    use super::runtime_types;
                    pub type LastRuntimeUpgrade =
                        runtime_types::frame_system::LastRuntimeUpgradeInfo;
                }
                pub mod upgraded_to_u32_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToU32RefCount = ::core::primitive::bool;
                }
                pub mod upgraded_to_triple_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToTripleRefCount = ::core::primitive::bool;
                }
                pub mod execution_phase {
                    use super::runtime_types;
                    pub type ExecutionPhase = runtime_types::frame_system::Phase;
                }
                pub mod authorized_upgrade {
                    use super::runtime_types;
                    pub type AuthorizedUpgrade =
                        runtime_types::frame_system::CodeUpgradeAuthorization;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account::Account,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Account",
                        (),
                        [
                            120u8, 167u8, 1u8, 247u8, 5u8, 61u8, 226u8, 165u8, 5u8, 119u8, 157u8,
                            82u8, 228u8, 25u8, 237u8, 163u8, 0u8, 52u8, 66u8, 84u8, 164u8, 131u8,
                            253u8, 140u8, 80u8, 70u8, 113u8, 200u8, 249u8, 171u8, 121u8, 9u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account::Param0,
                    >,
                    types::account::Account,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Account",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            120u8, 167u8, 1u8, 247u8, 5u8, 61u8, 226u8, 165u8, 5u8, 119u8, 157u8,
                            82u8, 228u8, 25u8, 237u8, 163u8, 0u8, 52u8, 66u8, 84u8, 164u8, 131u8,
                            253u8, 140u8, 80u8, 70u8, 113u8, 200u8, 249u8, 171u8, 121u8, 9u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::extrinsic_count::ExtrinsicCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicCount",
                        (),
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " Whether all inherents have been applied."]
                pub fn inherents_applied(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::inherents_applied::InherentsApplied,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "InherentsApplied",
                        (),
                        [
                            132u8, 249u8, 142u8, 252u8, 8u8, 103u8, 80u8, 120u8, 50u8, 6u8, 188u8,
                            223u8, 101u8, 55u8, 165u8, 189u8, 172u8, 249u8, 165u8, 230u8, 183u8,
                            109u8, 34u8, 65u8, 185u8, 150u8, 29u8, 8u8, 186u8, 129u8, 135u8, 239u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::block_weight::BlockWeight,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockWeight",
                        (),
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::all_extrinsics_len::AllExtrinsicsLen,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        (),
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockHash",
                        (),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::block_hash::Param0,
                    >,
                    types::block_hash::BlockHash,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockHash",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::extrinsic_data::ExtrinsicData,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicData",
                        (),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::extrinsic_data::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::extrinsic_data::Param0,
                    >,
                    types::extrinsic_data::ExtrinsicData,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicData",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::number::Number,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Number",
                        (),
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::parent_hash::ParentHash,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ParentHash",
                        (),
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::digest::Digest,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Digest",
                        (),
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::events::Events,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Events",
                        (),
                        [
                            141u8, 204u8, 162u8, 252u8, 3u8, 231u8, 102u8, 128u8, 154u8, 82u8,
                            174u8, 102u8, 176u8, 209u8, 205u8, 204u8, 209u8, 229u8, 138u8, 27u8,
                            62u8, 33u8, 197u8, 13u8, 108u8, 188u8, 193u8, 201u8, 57u8, 48u8, 63u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::event_count::EventCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventCount",
                        (),
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::event_topics::EventTopics,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventTopics",
                        (),
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::event_topics::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::event_topics::Param0,
                    >,
                    types::event_topics::EventTopics,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventTopics",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_runtime_upgrade::LastRuntimeUpgrade,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        (),
                        [
                            197u8, 212u8, 249u8, 209u8, 79u8, 34u8, 55u8, 203u8, 31u8, 42u8, 199u8,
                            242u8, 188u8, 74u8, 234u8, 250u8, 245u8, 44u8, 139u8, 162u8, 45u8,
                            150u8, 230u8, 249u8, 135u8, 100u8, 158u8, 167u8, 118u8, 219u8, 28u8,
                            98u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        (),
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        (),
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::execution_phase::ExecutionPhase,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExecutionPhase",
                        (),
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
                #[doc = " `Some` if a code upgrade has been authorized."]
                pub fn authorized_upgrade(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorized_upgrade::AuthorizedUpgrade,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "AuthorizedUpgrade",
                        (),
                        [
                            165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
                            169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
                            214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_system::limits::BlockWeights,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_system::limits::BlockLength,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_weights::RuntimeDbWeight,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Get the chain's in-code version."]
                pub fn version(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_version::RuntimeVersion,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "Version",
                        [
                            214u8, 43u8, 96u8, 193u8, 96u8, 213u8, 63u8, 124u8, 22u8, 111u8, 41u8,
                            78u8, 146u8, 77u8, 34u8, 163u8, 117u8, 100u8, 6u8, 216u8, 238u8, 54u8,
                            80u8, 185u8, 219u8, 11u8, 192u8, 200u8, 129u8, 88u8, 161u8, 250u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u16,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::cumulus_pallet_parachain_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_parachain_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the current validation data."]
                #[doc = ""]
                #[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase if the call was not invoked."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`"]
                #[doc = ""]
                #[doc = "As a side effect, this function upgrades the current validation function"]
                #[doc = "if the appropriate time has come."]
                pub struct SetValidationData {
                    pub data: set_validation_data::Data,
                }
                pub mod set_validation_data {
                    use super::runtime_types;
                    pub type Data =
                        runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetValidationData {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "set_validation_data";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SudoSendUpwardMessage {
                    pub message: sudo_send_upward_message::Message,
                }
                pub mod sudo_send_upward_message {
                    use super::runtime_types;
                    pub type Message =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoSendUpwardMessage {
                    const PALLET: &'static str = "ParachainSystem";
                    const CALL: &'static str = "sudo_send_upward_message";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current validation data."]
                #[doc = ""]
                #[doc = "This should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase if the call was not invoked."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`"]
                #[doc = ""]
                #[doc = "As a side effect, this function upgrades the current validation function"]
                #[doc = "if the appropriate time has come."]
                pub fn set_validation_data(
                    &self,
                    data: types::set_validation_data::Data,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetValidationData>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainSystem",
                        "set_validation_data",
                        types::SetValidationData { data },
                        [
                            167u8, 126u8, 75u8, 137u8, 220u8, 60u8, 106u8, 214u8, 92u8, 170u8,
                            136u8, 176u8, 98u8, 0u8, 234u8, 217u8, 146u8, 113u8, 149u8, 88u8,
                            114u8, 141u8, 228u8, 105u8, 136u8, 71u8, 233u8, 18u8, 70u8, 36u8, 24u8,
                            249u8,
                        ],
                    )
                }
                pub fn sudo_send_upward_message(
                    &self,
                    message: types::sudo_send_upward_message::Message,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SudoSendUpwardMessage,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainSystem",
                        "sudo_send_upward_message",
                        types::SudoSendUpwardMessage { message },
                        [
                            1u8, 231u8, 11u8, 78u8, 127u8, 117u8, 248u8, 67u8, 230u8, 199u8, 126u8,
                            47u8, 20u8, 62u8, 252u8, 138u8, 199u8, 48u8, 41u8, 21u8, 28u8, 157u8,
                            218u8, 143u8, 4u8, 253u8, 62u8, 192u8, 94u8, 252u8, 92u8, 180u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_parachain_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The validation function has been scheduled to apply."]
            pub struct ValidationFunctionStored;
            impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionStored {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionStored";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The validation function was applied as of the contained relay chain block number."]
            pub struct ValidationFunctionApplied {
                pub relay_chain_block_num: validation_function_applied::RelayChainBlockNum,
            }
            pub mod validation_function_applied {
                use super::runtime_types;
                pub type RelayChainBlockNum = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionApplied {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionApplied";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The relay-chain aborted the upgrade process."]
            pub struct ValidationFunctionDiscarded;
            impl ::subxt::ext::subxt_core::events::StaticEvent for ValidationFunctionDiscarded {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "ValidationFunctionDiscarded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some downward messages have been received and will be processed."]
            pub struct DownwardMessagesReceived {
                pub count: downward_messages_received::Count,
            }
            pub mod downward_messages_received {
                use super::runtime_types;
                pub type Count = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DownwardMessagesReceived {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesReceived";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Downward messages were processed using the given weight."]
            pub struct DownwardMessagesProcessed {
                pub weight_used: downward_messages_processed::WeightUsed,
                pub dmq_head: downward_messages_processed::DmqHead,
            }
            pub mod downward_messages_processed {
                use super::runtime_types;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
                pub type DmqHead = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DownwardMessagesProcessed {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "DownwardMessagesProcessed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An upward message was sent to the relay chain."]
            pub struct UpwardMessageSent {
                pub message_hash: upward_message_sent::MessageHash,
            }
            pub mod upward_message_sent {
                use super::runtime_types;
                pub type MessageHash = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpwardMessageSent {
                const PALLET: &'static str = "ParachainSystem";
                const EVENT: &'static str = "UpwardMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod unincluded_segment {
                    use super::runtime_types;
                    pub type UnincludedSegment = :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: Ancestor < :: subxt :: ext :: subxt_core :: utils :: H256 > > ;
                }
                pub mod aggregated_unincluded_segment {
                    use super::runtime_types;
                    pub type AggregatedUnincludedSegment = runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: SegmentTracker < :: subxt :: ext :: subxt_core :: utils :: H256 > ;
                }
                pub mod pending_validation_code {
                    use super::runtime_types;
                    pub type PendingValidationCode =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                pub mod new_validation_code {
                    use super::runtime_types;
                    pub type NewValidationCode =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                pub mod validation_data {
                    use super::runtime_types;
                    pub type ValidationData =
                        runtime_types::polkadot_primitives::v8::PersistedValidationData<
                            ::subxt::ext::subxt_core::utils::H256,
                            ::core::primitive::u32,
                        >;
                }
                pub mod did_set_validation_code {
                    use super::runtime_types;
                    pub type DidSetValidationCode = ::core::primitive::bool;
                }
                pub mod last_relay_chain_block_number {
                    use super::runtime_types;
                    pub type LastRelayChainBlockNumber = ::core::primitive::u32;
                }
                pub mod upgrade_restriction_signal {
                    use super::runtime_types;
                    pub type UpgradeRestrictionSignal = ::core::option::Option<
                        runtime_types::polkadot_primitives::v8::UpgradeRestriction,
                    >;
                }
                pub mod upgrade_go_ahead {
                    use super::runtime_types;
                    pub type UpgradeGoAhead = ::core::option::Option<
                        runtime_types::polkadot_primitives::v8::UpgradeGoAhead,
                    >;
                }
                pub mod relay_state_proof {
                    use super::runtime_types;
                    pub type RelayStateProof = runtime_types::sp_trie::storage_proof::StorageProof;
                }
                pub mod relevant_messaging_state {
                    use super::runtime_types;
                    pub type RelevantMessagingState = runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: MessagingStateSnapshot ;
                }
                pub mod host_configuration {
                    use super::runtime_types;
                    pub type HostConfiguration =
                        runtime_types::polkadot_primitives::v8::AbridgedHostConfiguration;
                }
                pub mod last_dmq_mqc_head {
                    use super::runtime_types;
                    pub type LastDmqMqcHead =
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain;
                }
                pub mod last_hrmp_mqc_heads {
                    use super::runtime_types;
                    pub type LastHrmpMqcHeads = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::polkadot_parachain_primitives::primitives::Id,
                        runtime_types::cumulus_primitives_parachain_inherent::MessageQueueChain,
                    >;
                }
                pub mod processed_downward_messages {
                    use super::runtime_types;
                    pub type ProcessedDownwardMessages = ::core::primitive::u32;
                }
                pub mod hrmp_watermark {
                    use super::runtime_types;
                    pub type HrmpWatermark = ::core::primitive::u32;
                }
                pub mod hrmp_outbound_messages {
                    use super::runtime_types;
                    pub type HrmpOutboundMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                        >,
                    >;
                }
                pub mod upward_messages {
                    use super::runtime_types;
                    pub type UpwardMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                }
                pub mod pending_upward_messages {
                    use super::runtime_types;
                    pub type PendingUpwardMessages = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                }
                pub mod upward_delivery_fee_factor {
                    use super::runtime_types;
                    pub type UpwardDeliveryFeeFactor =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod announced_hrmp_messages_per_candidate {
                    use super::runtime_types;
                    pub type AnnouncedHrmpMessagesPerCandidate = ::core::primitive::u32;
                }
                pub mod reserved_xcmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedXcmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod reserved_dmp_weight_override {
                    use super::runtime_types;
                    pub type ReservedDmpWeightOverride =
                        runtime_types::sp_weights::weight_v2::Weight;
                }
                pub mod custom_validation_head_data {
                    use super::runtime_types;
                    pub type CustomValidationHeadData =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Latest included block descendants the runtime accepted. In other words, these are"]
                #[doc = " ancestors of the currently executing block which have not been included in the observed"]
                #[doc = " relay-chain state."]
                #[doc = ""]
                #[doc = " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured"]
                #[doc = " in the pallet."]
                pub fn unincluded_segment(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::unincluded_segment::UnincludedSegment,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "UnincludedSegment",
                        (),
                        [
                            73u8, 83u8, 226u8, 16u8, 203u8, 233u8, 221u8, 109u8, 23u8, 114u8, 56u8,
                            154u8, 100u8, 116u8, 253u8, 10u8, 164u8, 22u8, 110u8, 73u8, 245u8,
                            226u8, 54u8, 146u8, 67u8, 109u8, 149u8, 142u8, 154u8, 218u8, 55u8,
                            178u8,
                        ],
                    )
                }
                #[doc = " Storage field that keeps track of bandwidth used by the unincluded segment along with the"]
                #[doc = " latest HRMP watermark. Used for limiting the acceptance of new blocks with"]
                #[doc = " respect to relay chain constraints."]
                pub fn aggregated_unincluded_segment(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::aggregated_unincluded_segment::AggregatedUnincludedSegment,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "AggregatedUnincludedSegment",
                        (),
                        [
                            165u8, 51u8, 182u8, 156u8, 65u8, 114u8, 167u8, 133u8, 245u8, 52u8,
                            32u8, 119u8, 159u8, 65u8, 201u8, 108u8, 99u8, 43u8, 84u8, 63u8, 95u8,
                            182u8, 134u8, 163u8, 51u8, 202u8, 243u8, 82u8, 225u8, 192u8, 186u8,
                            2u8,
                        ],
                    )
                }
                #[doc = " In case of a scheduled upgrade, this storage field contains the validation code to be"]
                #[doc = " applied."]
                #[doc = ""]
                #[doc = " As soon as the relay chain gives us the go-ahead signal, we will overwrite the"]
                #[doc = " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process"]
                #[doc = " with the new validation code. This concludes the upgrade process."]
                pub fn pending_validation_code(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_validation_code::PendingValidationCode,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "PendingValidationCode",
                        (),
                        [
                            78u8, 159u8, 219u8, 211u8, 177u8, 80u8, 102u8, 93u8, 83u8, 146u8, 90u8,
                            233u8, 232u8, 11u8, 104u8, 172u8, 93u8, 68u8, 44u8, 228u8, 99u8, 197u8,
                            254u8, 28u8, 181u8, 215u8, 247u8, 238u8, 49u8, 49u8, 195u8, 249u8,
                        ],
                    )
                }
                #[doc = " Validation code that is set by the parachain and is to be communicated to collator and"]
                #[doc = " consequently the relay-chain."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block if no other pallet already set"]
                #[doc = " the value."]
                pub fn new_validation_code(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::new_validation_code::NewValidationCode,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "NewValidationCode",
                        (),
                        [
                            185u8, 123u8, 152u8, 122u8, 230u8, 136u8, 79u8, 73u8, 206u8, 19u8,
                            59u8, 57u8, 75u8, 250u8, 83u8, 185u8, 29u8, 76u8, 89u8, 137u8, 77u8,
                            163u8, 25u8, 125u8, 182u8, 67u8, 2u8, 180u8, 48u8, 237u8, 49u8, 171u8,
                        ],
                    )
                }
                #[doc = " The [`PersistedValidationData`] set for this block."]
                #[doc = " This value is expected to be set only once per block and it's never stored"]
                #[doc = " in the trie."]
                pub fn validation_data(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::validation_data::ValidationData,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "ValidationData",
                        (),
                        [
                            193u8, 240u8, 25u8, 56u8, 103u8, 173u8, 56u8, 56u8, 229u8, 243u8, 91u8,
                            25u8, 249u8, 95u8, 122u8, 93u8, 37u8, 181u8, 54u8, 244u8, 217u8, 200u8,
                            62u8, 136u8, 80u8, 148u8, 16u8, 177u8, 124u8, 211u8, 95u8, 24u8,
                        ],
                    )
                }
                #[doc = " Were the validation data set to notify the relay chain?"]
                pub fn did_set_validation_code(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::did_set_validation_code::DidSetValidationCode,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "DidSetValidationCode",
                        (),
                        [
                            233u8, 228u8, 48u8, 111u8, 200u8, 35u8, 30u8, 139u8, 251u8, 77u8,
                            196u8, 252u8, 35u8, 222u8, 129u8, 235u8, 7u8, 19u8, 156u8, 82u8, 126u8,
                            173u8, 29u8, 62u8, 20u8, 67u8, 166u8, 116u8, 108u8, 182u8, 57u8, 246u8,
                        ],
                    )
                }
                #[doc = " The relay chain block number associated with the last parachain block."]
                #[doc = ""]
                #[doc = " This is updated in `on_finalize`."]
                pub fn last_relay_chain_block_number(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_relay_chain_block_number::LastRelayChainBlockNumber,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "LastRelayChainBlockNumber",
                        (),
                        [
                            17u8, 65u8, 131u8, 169u8, 195u8, 243u8, 195u8, 93u8, 220u8, 174u8,
                            75u8, 216u8, 214u8, 227u8, 96u8, 40u8, 8u8, 153u8, 116u8, 160u8, 79u8,
                            255u8, 35u8, 232u8, 242u8, 42u8, 100u8, 150u8, 208u8, 210u8, 142u8,
                            186u8,
                        ],
                    )
                }
                #[doc = " An option which indicates if the relay-chain restricts signalling a validation code upgrade."]
                #[doc = " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced"]
                #[doc = " candidate will be invalid."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_restriction_signal(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgrade_restriction_signal::UpgradeRestrictionSignal,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "UpgradeRestrictionSignal",
                        (),
                        [
                            235u8, 240u8, 37u8, 44u8, 181u8, 52u8, 7u8, 216u8, 20u8, 139u8, 69u8,
                            124u8, 21u8, 173u8, 237u8, 64u8, 105u8, 88u8, 49u8, 69u8, 123u8, 55u8,
                            181u8, 167u8, 112u8, 183u8, 190u8, 231u8, 231u8, 127u8, 77u8, 148u8,
                        ],
                    )
                }
                #[doc = " Optional upgrade go-ahead signal from the relay-chain."]
                #[doc = ""]
                #[doc = " This storage item is a mirror of the corresponding value for the current parachain from the"]
                #[doc = " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is"]
                #[doc = " set after the inherent."]
                pub fn upgrade_go_ahead(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgrade_go_ahead::UpgradeGoAhead,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "UpgradeGoAhead",
                        (),
                        [
                            149u8, 144u8, 186u8, 88u8, 180u8, 34u8, 82u8, 226u8, 100u8, 148u8,
                            246u8, 55u8, 233u8, 97u8, 43u8, 0u8, 48u8, 31u8, 69u8, 154u8, 29u8,
                            147u8, 241u8, 91u8, 81u8, 126u8, 206u8, 117u8, 14u8, 149u8, 87u8, 88u8,
                        ],
                    )
                }
                #[doc = " The state proof for the last relay parent block."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relay_state_proof(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::relay_state_proof::RelayStateProof,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "RelayStateProof",
                        (),
                        [
                            46u8, 115u8, 163u8, 190u8, 246u8, 47u8, 200u8, 159u8, 206u8, 204u8,
                            94u8, 250u8, 127u8, 112u8, 109u8, 111u8, 210u8, 195u8, 244u8, 41u8,
                            36u8, 187u8, 71u8, 150u8, 149u8, 253u8, 143u8, 33u8, 83u8, 189u8,
                            182u8, 238u8,
                        ],
                    )
                }
                #[doc = " The snapshot of some state related to messaging relevant to the current parachain as per"]
                #[doc = " the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn relevant_messaging_state(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::relevant_messaging_state::RelevantMessagingState,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "RelevantMessagingState",
                        (),
                        [
                            117u8, 166u8, 186u8, 126u8, 21u8, 174u8, 86u8, 253u8, 163u8, 90u8,
                            54u8, 226u8, 186u8, 253u8, 126u8, 168u8, 145u8, 45u8, 155u8, 32u8,
                            97u8, 110u8, 208u8, 125u8, 47u8, 113u8, 165u8, 199u8, 210u8, 118u8,
                            217u8, 73u8,
                        ],
                    )
                }
                #[doc = " The parachain host configuration that was obtained from the relay parent."]
                #[doc = ""]
                #[doc = " This field is meant to be updated each block with the validation data inherent. Therefore,"]
                #[doc = " before processing of the inherent, e.g. in `on_initialize` this data may be stale."]
                #[doc = ""]
                #[doc = " This data is also absent from the genesis."]
                pub fn host_configuration(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::host_configuration::HostConfiguration,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "HostConfiguration",
                        (),
                        [
                            252u8, 23u8, 111u8, 189u8, 120u8, 204u8, 129u8, 223u8, 248u8, 179u8,
                            239u8, 173u8, 133u8, 61u8, 140u8, 2u8, 75u8, 32u8, 204u8, 178u8, 69u8,
                            21u8, 44u8, 227u8, 178u8, 179u8, 33u8, 26u8, 131u8, 156u8, 78u8, 85u8,
                        ],
                    )
                }
                #[doc = " The last downward message queue chain head we have observed."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_dmq_mqc_head(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_dmq_mqc_head::LastDmqMqcHead,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "LastDmqMqcHead",
                        (),
                        [
                            1u8, 70u8, 140u8, 40u8, 51u8, 127u8, 75u8, 80u8, 5u8, 49u8, 196u8,
                            31u8, 30u8, 61u8, 54u8, 252u8, 0u8, 0u8, 100u8, 115u8, 177u8, 250u8,
                            138u8, 48u8, 107u8, 41u8, 93u8, 87u8, 195u8, 107u8, 206u8, 227u8,
                        ],
                    )
                }
                #[doc = " The message queue chain heads we have observed per each channel incoming channel."]
                #[doc = ""]
                #[doc = " This value is loaded before and saved after processing inbound downward messages carried"]
                #[doc = " by the system inherent."]
                pub fn last_hrmp_mqc_heads(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_hrmp_mqc_heads::LastHrmpMqcHeads,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "LastHrmpMqcHeads",
                        (),
                        [
                            131u8, 170u8, 142u8, 30u8, 101u8, 113u8, 131u8, 81u8, 38u8, 168u8,
                            98u8, 3u8, 9u8, 109u8, 96u8, 179u8, 115u8, 177u8, 128u8, 11u8, 238u8,
                            54u8, 81u8, 60u8, 97u8, 112u8, 224u8, 175u8, 86u8, 133u8, 182u8, 76u8,
                        ],
                    )
                }
                #[doc = " Number of downward messages processed in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn processed_downward_messages(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::processed_downward_messages::ProcessedDownwardMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "ProcessedDownwardMessages",
                        (),
                        [
                            151u8, 234u8, 196u8, 87u8, 130u8, 79u8, 4u8, 102u8, 47u8, 10u8, 33u8,
                            132u8, 149u8, 118u8, 61u8, 141u8, 5u8, 1u8, 30u8, 120u8, 220u8, 156u8,
                            16u8, 11u8, 14u8, 52u8, 126u8, 151u8, 244u8, 149u8, 197u8, 51u8,
                        ],
                    )
                }
                #[doc = " HRMP watermark that was set in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_watermark(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::hrmp_watermark::HrmpWatermark,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "HrmpWatermark",
                        (),
                        [
                            77u8, 62u8, 59u8, 220u8, 7u8, 125u8, 98u8, 249u8, 108u8, 212u8, 223u8,
                            99u8, 152u8, 13u8, 29u8, 80u8, 166u8, 65u8, 232u8, 113u8, 145u8, 128u8,
                            123u8, 35u8, 238u8, 31u8, 113u8, 156u8, 220u8, 104u8, 217u8, 165u8,
                        ],
                    )
                }
                #[doc = " HRMP messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn hrmp_outbound_messages(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::hrmp_outbound_messages::HrmpOutboundMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "HrmpOutboundMessages",
                        (),
                        [
                            42u8, 9u8, 96u8, 217u8, 25u8, 101u8, 129u8, 147u8, 150u8, 20u8, 164u8,
                            186u8, 217u8, 178u8, 15u8, 201u8, 233u8, 104u8, 92u8, 120u8, 29u8,
                            245u8, 196u8, 13u8, 141u8, 210u8, 102u8, 62u8, 216u8, 80u8, 246u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Upward messages that were sent in a block."]
                #[doc = ""]
                #[doc = " This will be cleared in `on_initialize` of each new block."]
                pub fn upward_messages(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upward_messages::UpwardMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "UpwardMessages",
                        (),
                        [
                            179u8, 127u8, 8u8, 94u8, 194u8, 246u8, 53u8, 79u8, 80u8, 22u8, 18u8,
                            75u8, 116u8, 163u8, 90u8, 161u8, 30u8, 140u8, 57u8, 126u8, 60u8, 91u8,
                            23u8, 30u8, 120u8, 245u8, 125u8, 96u8, 152u8, 25u8, 248u8, 85u8,
                        ],
                    )
                }
                #[doc = " Upward messages that are still pending and not yet send to the relay chain."]
                pub fn pending_upward_messages(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_upward_messages::PendingUpwardMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "PendingUpwardMessages",
                        (),
                        [
                            239u8, 45u8, 18u8, 173u8, 148u8, 150u8, 55u8, 176u8, 173u8, 156u8,
                            246u8, 226u8, 198u8, 214u8, 104u8, 187u8, 186u8, 13u8, 83u8, 194u8,
                            153u8, 29u8, 228u8, 109u8, 26u8, 18u8, 212u8, 151u8, 246u8, 24u8,
                            133u8, 216u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by for UMP."]
                pub fn upward_delivery_fee_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upward_delivery_fee_factor::UpwardDeliveryFeeFactor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "UpwardDeliveryFeeFactor",
                        (),
                        [
                            40u8, 217u8, 164u8, 111u8, 151u8, 132u8, 69u8, 226u8, 163u8, 175u8,
                            43u8, 239u8, 179u8, 217u8, 136u8, 161u8, 13u8, 251u8, 163u8, 102u8,
                            24u8, 27u8, 168u8, 89u8, 221u8, 83u8, 93u8, 64u8, 96u8, 117u8, 146u8,
                            71u8,
                        ],
                    )
                }
                #[doc = " The number of HRMP messages we observed in `on_initialize` and thus used that number for"]
                #[doc = " announcing the weight of `on_initialize` and `on_finalize`."]
                pub fn announced_hrmp_messages_per_candidate(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::announced_hrmp_messages_per_candidate::AnnouncedHrmpMessagesPerCandidate,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "AnnouncedHrmpMessagesPerCandidate",
                        (),
                        [
                            93u8, 11u8, 229u8, 172u8, 73u8, 87u8, 13u8, 149u8, 15u8, 94u8, 163u8,
                            107u8, 156u8, 22u8, 131u8, 177u8, 96u8, 247u8, 213u8, 224u8, 41u8,
                            126u8, 157u8, 33u8, 154u8, 194u8, 95u8, 234u8, 65u8, 19u8, 58u8, 161u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing XCMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_xcmp_weight_override(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reserved_xcmp_weight_override::ReservedXcmpWeightOverride,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "ReservedXcmpWeightOverride",
                        (),
                        [
                            176u8, 93u8, 203u8, 74u8, 18u8, 170u8, 246u8, 203u8, 109u8, 89u8, 86u8,
                            77u8, 96u8, 66u8, 189u8, 79u8, 184u8, 253u8, 11u8, 230u8, 87u8, 120u8,
                            1u8, 254u8, 215u8, 41u8, 210u8, 86u8, 239u8, 206u8, 60u8, 2u8,
                        ],
                    )
                }
                #[doc = " The weight we reserve at the beginning of the block for processing DMP messages. This"]
                #[doc = " overrides the amount set in the Config trait."]
                pub fn reserved_dmp_weight_override(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reserved_dmp_weight_override::ReservedDmpWeightOverride,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "ReservedDmpWeightOverride",
                        (),
                        [
                            205u8, 124u8, 9u8, 156u8, 255u8, 207u8, 208u8, 23u8, 179u8, 132u8,
                            254u8, 157u8, 237u8, 240u8, 167u8, 203u8, 253u8, 111u8, 136u8, 32u8,
                            100u8, 152u8, 16u8, 19u8, 175u8, 14u8, 108u8, 61u8, 59u8, 231u8, 70u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " A custom head data that should be returned as result of `validate_block`."]
                #[doc = ""]
                #[doc = " See `Pallet::set_custom_validation_head_data` for more information."]
                pub fn custom_validation_head_data(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::custom_validation_head_data::CustomValidationHeadData,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "CustomValidationHeadData",
                        (),
                        [
                            52u8, 186u8, 187u8, 57u8, 245u8, 171u8, 202u8, 23u8, 92u8, 80u8, 118u8,
                            66u8, 251u8, 156u8, 175u8, 254u8, 141u8, 185u8, 115u8, 209u8, 170u8,
                            165u8, 1u8, 242u8, 120u8, 234u8, 162u8, 24u8, 135u8, 105u8, 8u8, 177u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Returns the parachain ID we are running with."]
                pub fn self_para_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::polkadot_parachain_primitives::primitives::Id,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainSystem",
                        "SelfParaId",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "[`Config::MinimumPeriod`]."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _None_."]
                #[doc = ""]
                #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                #[doc = "block to execute any other calls."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub struct Set {
                    #[codec(compact)]
                    pub now: set::Now,
                }
                pub mod set {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "[`Config::MinimumPeriod`]."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _None_."]
                #[doc = ""]
                #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                #[doc = "block to execute any other calls."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub fn set(
                    &self,
                    now: types::set::Now,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Set>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod now {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                pub mod did_update {
                    use super::runtime_types;
                    pub type DidUpdate = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::now::Now,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Timestamp",
                        "Now",
                        (),
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Whether the timestamp has been updated in this block."]
                #[doc = ""]
                #[doc = " This value is updated to `true` upon successful submission of a timestamp by a node."]
                #[doc = " It is then checked at the end of each block execution in the `on_finalize` hook."]
                pub fn did_update(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::did_update::DidUpdate,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Timestamp",
                        "DidUpdate",
                        (),
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks."]
                #[doc = ""]
                #[doc = " Be aware that this is different to the *expected* period that the block production"]
                #[doc = " apparatus provides. Your chosen consensus system will generally work with this to"]
                #[doc = " determine a sensible block time. For example, in the Aura pallet it will be double this"]
                #[doc = " period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u64,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_info {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::staging_parachain_info::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
            }
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod parachain_id {
                    use super::runtime_types;
                    pub type ParachainId =
                        runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn parachain_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::parachain_id::ParachainId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainInfo",
                        "ParachainId",
                        (),
                        [
                            160u8, 130u8, 74u8, 181u8, 231u8, 180u8, 246u8, 152u8, 204u8, 44u8,
                            245u8, 91u8, 113u8, 246u8, 218u8, 50u8, 254u8, 248u8, 35u8, 219u8,
                            83u8, 144u8, 228u8, 245u8, 122u8, 53u8, 194u8, 172u8, 222u8, 118u8,
                            202u8, 91u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub struct Batch {
                    pub calls: batch::Calls,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::mainnet_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct AsDerivative {
                    pub index: as_derivative::Index,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<as_derivative::Call>,
                }
                pub mod as_derivative {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u16;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct BatchAll {
                    pub calls: batch_all::Calls,
                }
                pub mod batch_all {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::mainnet_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct DispatchAs {
                    pub as_origin:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::AsOrigin>,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::Call>,
                }
                pub mod dispatch_as {
                    use super::runtime_types;
                    pub type AsOrigin = runtime_types::mainnet_runtime::OriginCaller;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct ForceBatch {
                    pub calls: force_batch::Calls,
                }
                pub mod force_batch {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::mainnet_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub struct WithWeight {
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<with_weight::Call>,
                    pub weight: with_weight::Weight,
                }
                pub mod with_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: types::batch::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Batch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            233u8, 158u8, 214u8, 101u8, 129u8, 250u8, 76u8, 92u8, 6u8, 12u8, 219u8,
                            112u8, 47u8, 255u8, 145u8, 29u8, 244u8, 188u8, 130u8, 223u8, 252u8,
                            37u8, 180u8, 79u8, 52u8, 105u8, 209u8, 46u8, 142u8, 132u8, 43u8, 114u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: types::as_derivative::Index,
                    call: types::as_derivative::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsDerivative>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            99u8, 187u8, 153u8, 26u8, 143u8, 250u8, 114u8, 91u8, 56u8, 110u8, 24u8,
                            230u8, 118u8, 43u8, 74u8, 194u8, 196u8, 55u8, 131u8, 175u8, 9u8, 106u8,
                            231u8, 153u8, 37u8, 56u8, 62u8, 136u8, 146u8, 37u8, 233u8, 32u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn batch_all(
                    &self,
                    calls: types::batch_all::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BatchAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            238u8, 89u8, 198u8, 0u8, 216u8, 99u8, 184u8, 182u8, 70u8, 90u8, 109u8,
                            129u8, 157u8, 94u8, 35u8, 231u8, 9u8, 238u8, 239u8, 72u8, 83u8, 81u8,
                            206u8, 176u8, 95u8, 242u8, 182u8, 211u8, 249u8, 45u8, 52u8, 8u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn dispatch_as(
                    &self,
                    as_origin: types::dispatch_as::AsOrigin,
                    call: types::dispatch_as::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DispatchAs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box::new(as_origin),
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            183u8, 120u8, 2u8, 231u8, 163u8, 25u8, 188u8, 119u8, 212u8, 48u8,
                            175u8, 233u8, 34u8, 221u8, 58u8, 177u8, 20u8, 165u8, 106u8, 194u8,
                            189u8, 87u8, 57u8, 202u8, 35u8, 10u8, 227u8, 188u8, 75u8, 217u8, 136u8,
                            253u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn force_batch(
                    &self,
                    calls: types::force_batch::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceBatch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            222u8, 26u8, 87u8, 151u8, 7u8, 114u8, 123u8, 214u8, 27u8, 6u8, 34u8,
                            95u8, 6u8, 212u8, 252u8, 73u8, 17u8, 70u8, 25u8, 183u8, 230u8, 98u8,
                            181u8, 97u8, 195u8, 98u8, 188u8, 117u8, 247u8, 193u8, 140u8, 128u8,
                        ],
                    )
                }
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub fn with_weight(
                    &self,
                    call: types::with_weight::Call,
                    weight: types::with_weight::Weight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WithWeight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            weight,
                        },
                        [
                            42u8, 164u8, 123u8, 130u8, 190u8, 1u8, 197u8, 169u8, 20u8, 224u8, 32u8,
                            119u8, 21u8, 131u8, 222u8, 174u8, 108u8, 213u8, 3u8, 158u8, 156u8,
                            208u8, 57u8, 72u8, 90u8, 52u8, 94u8, 245u8, 206u8, 168u8, 147u8, 157u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: batch_interrupted::Index,
                pub error: batch_interrupted::Error,
            }
            pub mod batch_interrupted {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: item_failed::Error,
            }
            pub mod item_failed {
                use super::runtime_types;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: dispatched_as::Result,
            }
            pub mod dispatched_as {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: as_multi_threshold1::OtherSignatories,
                    pub call:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<as_multi_threshold1::Call>,
                }
                pub mod as_multi_threshold1 {
                    use super::runtime_types;
                    pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub struct AsMulti {
                    pub threshold: as_multi::Threshold,
                    pub other_signatories: as_multi::OtherSignatories,
                    pub maybe_timepoint: as_multi::MaybeTimepoint,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<as_multi::Call>,
                    pub max_weight: as_multi::MaxWeight,
                }
                pub mod as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub struct ApproveAsMulti {
                    pub threshold: approve_as_multi::Threshold,
                    pub other_signatories: approve_as_multi::OtherSignatories,
                    pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
                    pub call_hash: approve_as_multi::CallHash,
                    pub max_weight: approve_as_multi::MaxWeight,
                }
                pub mod approve_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                pub struct CancelAsMulti {
                    pub threshold: cancel_as_multi::Threshold,
                    pub other_signatories: cancel_as_multi::OtherSignatories,
                    pub timepoint: cancel_as_multi::Timepoint,
                    pub call_hash: cancel_as_multi::CallHash,
                }
                pub mod cancel_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Timepoint =
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: types::as_multi_threshold1::OtherSignatories,
                    call: types::as_multi_threshold1::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsMultiThreshold1>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            44u8, 146u8, 173u8, 212u8, 124u8, 147u8, 82u8, 14u8, 211u8, 178u8,
                            20u8, 118u8, 235u8, 35u8, 174u8, 188u8, 114u8, 28u8, 34u8, 19u8, 40u8,
                            191u8, 250u8, 144u8, 155u8, 28u8, 230u8, 94u8, 111u8, 149u8, 242u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn as_multi(
                    &self,
                    threshold: types::as_multi::Threshold,
                    other_signatories: types::as_multi::OtherSignatories,
                    maybe_timepoint: types::as_multi::MaybeTimepoint,
                    call: types::as_multi::Call,
                    max_weight: types::as_multi::MaxWeight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsMulti>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            128u8, 114u8, 148u8, 68u8, 149u8, 35u8, 193u8, 141u8, 51u8, 47u8, 22u8,
                            155u8, 193u8, 120u8, 34u8, 215u8, 196u8, 209u8, 46u8, 99u8, 71u8,
                            239u8, 10u8, 131u8, 103u8, 75u8, 84u8, 207u8, 143u8, 149u8, 200u8,
                            159u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn approve_as_multi(
                    &self,
                    threshold: types::approve_as_multi::Threshold,
                    other_signatories: types::approve_as_multi::OtherSignatories,
                    maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
                    call_hash: types::approve_as_multi::CallHash,
                    max_weight: types::approve_as_multi::MaxWeight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveAsMulti>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            46u8, 145u8, 69u8, 114u8, 81u8, 52u8, 81u8, 29u8, 128u8, 113u8, 68u8,
                            155u8, 236u8, 103u8, 18u8, 115u8, 170u8, 165u8, 81u8, 40u8, 21u8,
                            130u8, 39u8, 165u8, 70u8, 205u8, 39u8, 109u8, 255u8, 8u8, 84u8, 146u8,
                        ],
                    )
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                pub fn cancel_as_multi(
                    &self,
                    threshold: types::cancel_as_multi::Threshold,
                    other_signatories: types::cancel_as_multi::OtherSignatories,
                    timepoint: types::cancel_as_multi::Timepoint,
                    call_hash: types::cancel_as_multi::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelAsMulti>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            167u8, 10u8, 185u8, 123u8, 77u8, 135u8, 185u8, 224u8, 42u8, 3u8, 13u8,
                            194u8, 242u8, 152u8, 42u8, 3u8, 202u8, 174u8, 164u8, 149u8, 35u8, 87u8,
                            63u8, 24u8, 183u8, 199u8, 189u8, 159u8, 138u8, 160u8, 116u8, 37u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: new_multisig::Approving,
                pub multisig: new_multisig::Multisig,
                pub call_hash: new_multisig::CallHash,
            }
            pub mod new_multisig {
                use super::runtime_types;
                pub type Approving = runtime_types::account::AccountId20;
                pub type Multisig = runtime_types::account::AccountId20;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: multisig_approval::Approving,
                pub timepoint: multisig_approval::Timepoint,
                pub multisig: multisig_approval::Multisig,
                pub call_hash: multisig_approval::CallHash,
            }
            pub mod multisig_approval {
                use super::runtime_types;
                pub type Approving = runtime_types::account::AccountId20;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = runtime_types::account::AccountId20;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: multisig_executed::Approving,
                pub timepoint: multisig_executed::Timepoint,
                pub multisig: multisig_executed::Multisig,
                pub call_hash: multisig_executed::CallHash,
                pub result: multisig_executed::Result,
            }
            pub mod multisig_executed {
                use super::runtime_types;
                pub type Approving = runtime_types::account::AccountId20;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = runtime_types::account::AccountId20;
                pub type CallHash = [::core::primitive::u8; 32usize];
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: multisig_cancelled::Cancelling,
                pub timepoint: multisig_cancelled::Timepoint,
                pub multisig: multisig_cancelled::Multisig,
                pub call_hash: multisig_cancelled::CallHash,
            }
            pub mod multisig_cancelled {
                use super::runtime_types;
                pub type Cancelling = runtime_types::account::AccountId20;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = runtime_types::account::AccountId20;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod multisigs {
                    use super::runtime_types;
                    pub type Multisigs = runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Multisig",
                        "Multisigs",
                        (),
                        [
                            87u8, 7u8, 24u8, 224u8, 143u8, 13u8, 224u8, 6u8, 224u8, 55u8, 113u8,
                            8u8, 89u8, 121u8, 103u8, 37u8, 246u8, 242u8, 54u8, 236u8, 168u8, 32u8,
                            12u8, 7u8, 170u8, 105u8, 209u8, 46u8, 44u8, 140u8, 221u8, 131u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::multisigs::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::multisigs::Param0,
                    >,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Multisig",
                        "Multisigs",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            87u8, 7u8, 24u8, 224u8, 143u8, 13u8, 224u8, 6u8, 224u8, 55u8, 113u8,
                            8u8, 89u8, 121u8, 103u8, 37u8, 246u8, 242u8, 54u8, 236u8, 168u8, 32u8,
                            12u8, 7u8, 170u8, 105u8, 209u8, 46u8, 44u8, 140u8, 221u8, 131u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::multisigs::Param0>,
                    _1: impl ::core::borrow::Borrow<types::multisigs::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::multisigs::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::multisigs::Param1,
                        >,
                    ),
                    types::multisigs::Multisigs,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Multisig",
                        "Multisigs",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            87u8, 7u8, 24u8, 224u8, 143u8, 13u8, 224u8, 6u8, 224u8, 55u8, 113u8,
                            8u8, 89u8, 121u8, 103u8, 37u8, 246u8, 242u8, 54u8, 236u8, 168u8, 32u8,
                            12u8, 7u8, 170u8, 105u8, 209u8, 46u8, 44u8, 140u8, 221u8, 131u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_preimage::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_preimage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub struct NotePreimage {
                    pub bytes: note_preimage::Bytes,
                }
                pub mod note_preimage {
                    use super::runtime_types;
                    pub type Bytes =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for NotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "note_preimage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                #[doc = ""]
                #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                #[doc = ""]
                #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                #[doc = "- `len`: The length of the preimage of `hash`."]
                pub struct UnnotePreimage {
                    pub hash: unnote_preimage::Hash,
                }
                pub mod unnote_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnnotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unnote_preimage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub struct RequestPreimage {
                    pub hash: request_preimage::Hash,
                }
                pub mod request_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "request_preimage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub struct UnrequestPreimage {
                    pub hash: unrequest_preimage::Hash,
                }
                pub mod unrequest_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnrequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unrequest_preimage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Ensure that the a bulk of pre-images is upgraded."]
                #[doc = ""]
                #[doc = "The caller pays no fee if at least 90% of pre-images were successfully updated."]
                pub struct EnsureUpdated {
                    pub hashes: ensure_updated::Hashes,
                }
                pub mod ensure_updated {
                    use super::runtime_types;
                    pub type Hashes = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::utils::H256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for EnsureUpdated {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "ensure_updated";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub fn note_preimage(
                    &self,
                    bytes: types::note_preimage::Bytes,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::NotePreimage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Preimage",
                        "note_preimage",
                        types::NotePreimage { bytes },
                        [
                            121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
                            242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
                            192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
                        ],
                    )
                }
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                #[doc = ""]
                #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                #[doc = ""]
                #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                #[doc = "- `len`: The length of the preimage of `hash`."]
                pub fn unnote_preimage(
                    &self,
                    hash: types::unnote_preimage::Hash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnnotePreimage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Preimage",
                        "unnote_preimage",
                        types::UnnotePreimage { hash },
                        [
                            188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
                            190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
                            221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
                            252u8, 222u8,
                        ],
                    )
                }
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub fn request_preimage(
                    &self,
                    hash: types::request_preimage::Hash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RequestPreimage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Preimage",
                        "request_preimage",
                        types::RequestPreimage { hash },
                        [
                            87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
                            45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
                            134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
                        ],
                    )
                }
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub fn unrequest_preimage(
                    &self,
                    hash: types::unrequest_preimage::Hash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnrequestPreimage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Preimage",
                        "unrequest_preimage",
                        types::UnrequestPreimage { hash },
                        [
                            55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
                            240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
                            104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
                            134u8,
                        ],
                    )
                }
                #[doc = "Ensure that the a bulk of pre-images is upgraded."]
                #[doc = ""]
                #[doc = "The caller pays no fee if at least 90% of pre-images were successfully updated."]
                pub fn ensure_updated(
                    &self,
                    hashes: types::ensure_updated::Hashes,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::EnsureUpdated>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Preimage",
                        "ensure_updated",
                        types::EnsureUpdated { hashes },
                        [
                            254u8, 228u8, 88u8, 44u8, 126u8, 235u8, 188u8, 153u8, 61u8, 27u8,
                            103u8, 253u8, 163u8, 161u8, 113u8, 243u8, 87u8, 136u8, 2u8, 231u8,
                            209u8, 188u8, 215u8, 106u8, 192u8, 225u8, 75u8, 125u8, 224u8, 96u8,
                            221u8, 90u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: noted::Hash,
            }
            pub mod noted {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: requested::Hash,
            }
            pub mod requested {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: cleared::Hash,
            }
            pub mod cleared {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod status_for {
                    use super::runtime_types;
                    pub type StatusFor = runtime_types::pallet_preimage::OldRequestStatus<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod request_status_for {
                    use super::runtime_types;
                    pub type RequestStatusFor = runtime_types::pallet_preimage::RequestStatus<
                        runtime_types::account::AccountId20,
                        runtime_types::frame_support::traits::tokens::fungible::HoldConsideration,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod preimage_for {
                    use super::runtime_types;
                    pub type PreimageFor =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]
                pub fn status_for_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::status_for::StatusFor,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "StatusFor",
                        (),
                        [
                            74u8, 55u8, 179u8, 182u8, 220u8, 123u8, 206u8, 149u8, 35u8, 228u8,
                            196u8, 187u8, 54u8, 64u8, 164u8, 239u8, 234u8, 32u8, 45u8, 161u8, 42u8,
                            17u8, 130u8, 209u8, 79u8, 100u8, 100u8, 99u8, 71u8, 76u8, 138u8, 195u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn status_for(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::status_for::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::status_for::Param0,
                    >,
                    types::status_for::StatusFor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "StatusFor",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            74u8, 55u8, 179u8, 182u8, 220u8, 123u8, 206u8, 149u8, 35u8, 228u8,
                            196u8, 187u8, 54u8, 64u8, 164u8, 239u8, 234u8, 32u8, 45u8, 161u8, 42u8,
                            17u8, 130u8, 209u8, 79u8, 100u8, 100u8, 99u8, 71u8, 76u8, 138u8, 195u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn request_status_for_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::request_status_for::RequestStatusFor,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "RequestStatusFor",
                        (),
                        [
                            232u8, 171u8, 92u8, 167u8, 107u8, 78u8, 46u8, 11u8, 75u8, 178u8, 245u8,
                            9u8, 8u8, 224u8, 203u8, 201u8, 86u8, 173u8, 0u8, 247u8, 80u8, 95u8,
                            253u8, 117u8, 145u8, 41u8, 192u8, 138u8, 53u8, 111u8, 46u8, 14u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn request_status_for(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::request_status_for::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::request_status_for::Param0,
                    >,
                    types::request_status_for::RequestStatusFor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "RequestStatusFor",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            232u8, 171u8, 92u8, 167u8, 107u8, 78u8, 46u8, 11u8, 75u8, 178u8, 245u8,
                            9u8, 8u8, 224u8, 203u8, 201u8, 86u8, 173u8, 0u8, 247u8, 80u8, 95u8,
                            253u8, 117u8, 145u8, 41u8, 192u8, 138u8, 53u8, 111u8, 46u8, 14u8,
                        ],
                    )
                }
                pub fn preimage_for_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::preimage_for::PreimageFor,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "PreimageFor",
                        (),
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
                pub fn preimage_for_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::preimage_for::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::preimage_for::Param0,
                    >,
                    types::preimage_for::PreimageFor,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "PreimageFor",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
                pub fn preimage_for(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::preimage_for::Param0>,
                    _1: impl ::core::borrow::Borrow<types::preimage_for::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::preimage_for::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::preimage_for::Param1,
                        >,
                    ),
                    types::preimage_for::PreimageFor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Preimage",
                        "PreimageFor",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_scheduler::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_scheduler::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Anonymously schedule a task."]
                pub struct Schedule {
                    pub when: schedule::When,
                    pub maybe_periodic: schedule::MaybePeriodic,
                    pub priority: schedule::Priority,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule::Call>,
                }
                pub mod schedule {
                    use super::runtime_types;
                    pub type When = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Schedule {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel an anonymously scheduled task."]
                pub struct Cancel {
                    pub when: cancel::When,
                    pub index: cancel::Index,
                }
                pub mod cancel {
                    use super::runtime_types;
                    pub type When = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule a named task."]
                pub struct ScheduleNamed {
                    pub id: schedule_named::Id,
                    pub when: schedule_named::When,
                    pub maybe_periodic: schedule_named::MaybePeriodic,
                    pub priority: schedule_named::Priority,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule_named::Call>,
                }
                pub mod schedule_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                    pub type When = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel a named scheduled task."]
                pub struct CancelNamed {
                    pub id: cancel_named::Id,
                }
                pub mod cancel_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_named";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Anonymously schedule a task after a delay."]
                pub struct ScheduleAfter {
                    pub after: schedule_after::After,
                    pub maybe_periodic: schedule_after::MaybePeriodic,
                    pub priority: schedule_after::Priority,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<schedule_after::Call>,
                }
                pub mod schedule_after {
                    use super::runtime_types;
                    pub type After = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_after";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule a named task after a delay."]
                pub struct ScheduleNamedAfter {
                    pub id: schedule_named_after::Id,
                    pub after: schedule_named_after::After,
                    pub maybe_periodic: schedule_named_after::MaybePeriodic,
                    pub priority: schedule_named_after::Priority,
                    pub call:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<schedule_named_after::Call>,
                }
                pub mod schedule_named_after {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                    pub type After = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleNamedAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named_after";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set a retry configuration for a task so that, in case its scheduled run fails, it will"]
                #[doc = "be retried after `period` blocks, for a total amount of `retries` retries or until it"]
                #[doc = "succeeds."]
                #[doc = ""]
                #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                #[doc = "normally while the task is retrying."]
                #[doc = ""]
                #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                #[doc = "original `total_retries`."]
                pub struct SetRetry {
                    pub task: set_retry::Task,
                    pub retries: set_retry::Retries,
                    pub period: set_retry::Period,
                }
                pub mod set_retry {
                    use super::runtime_types;
                    pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                    pub type Retries = ::core::primitive::u8;
                    pub type Period = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetRetry {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "set_retry";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set a retry configuration for a named task so that, in case its scheduled run fails, it"]
                #[doc = "will be retried after `period` blocks, for a total amount of `retries` retries or until"]
                #[doc = "it succeeds."]
                #[doc = ""]
                #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                #[doc = "normally while the task is retrying."]
                #[doc = ""]
                #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                #[doc = "original `total_retries`."]
                pub struct SetRetryNamed {
                    pub id: set_retry_named::Id,
                    pub retries: set_retry_named::Retries,
                    pub period: set_retry_named::Period,
                }
                pub mod set_retry_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                    pub type Retries = ::core::primitive::u8;
                    pub type Period = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetRetryNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "set_retry_named";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes the retry configuration of a task."]
                pub struct CancelRetry {
                    pub task: cancel_retry::Task,
                }
                pub mod cancel_retry {
                    use super::runtime_types;
                    pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelRetry {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_retry";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel the retry configuration of a named task."]
                pub struct CancelRetryNamed {
                    pub id: cancel_retry_named::Id,
                }
                pub mod cancel_retry_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelRetryNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_retry_named";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Anonymously schedule a task."]
                pub fn schedule(
                    &self,
                    when: types::schedule::When,
                    maybe_periodic: types::schedule::MaybePeriodic,
                    priority: types::schedule::Priority,
                    call: types::schedule::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Schedule>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "schedule",
                        types::Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            82u8, 62u8, 255u8, 192u8, 180u8, 139u8, 94u8, 176u8, 1u8, 72u8, 38u8,
                            249u8, 100u8, 209u8, 137u8, 232u8, 199u8, 177u8, 251u8, 48u8, 169u8,
                            86u8, 8u8, 80u8, 109u8, 213u8, 87u8, 205u8, 250u8, 184u8, 219u8, 49u8,
                        ],
                    )
                }
                #[doc = "Cancel an anonymously scheduled task."]
                pub fn cancel(
                    &self,
                    when: types::cancel::When,
                    index: types::cancel::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Cancel>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "cancel",
                        types::Cancel { when, index },
                        [
                            183u8, 204u8, 143u8, 86u8, 17u8, 130u8, 132u8, 91u8, 133u8, 168u8,
                            103u8, 129u8, 114u8, 56u8, 123u8, 42u8, 123u8, 120u8, 221u8, 211u8,
                            26u8, 85u8, 82u8, 246u8, 192u8, 39u8, 254u8, 45u8, 147u8, 56u8, 178u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task."]
                pub fn schedule_named(
                    &self,
                    id: types::schedule_named::Id,
                    when: types::schedule_named::When,
                    maybe_periodic: types::schedule_named::MaybePeriodic,
                    priority: types::schedule_named::Priority,
                    call: types::schedule_named::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleNamed>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "schedule_named",
                        types::ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            220u8, 105u8, 242u8, 239u8, 42u8, 35u8, 16u8, 121u8, 255u8, 150u8, 9u8,
                            16u8, 25u8, 96u8, 69u8, 12u8, 80u8, 28u8, 230u8, 189u8, 199u8, 157u8,
                            195u8, 219u8, 171u8, 63u8, 209u8, 24u8, 88u8, 221u8, 134u8, 58u8,
                        ],
                    )
                }
                #[doc = "Cancel a named scheduled task."]
                pub fn cancel_named(
                    &self,
                    id: types::cancel_named::Id,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelNamed>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "cancel_named",
                        types::CancelNamed { id },
                        [
                            205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
                            236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
                            227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
                        ],
                    )
                }
                #[doc = "Anonymously schedule a task after a delay."]
                pub fn schedule_after(
                    &self,
                    after: types::schedule_after::After,
                    maybe_periodic: types::schedule_after::MaybePeriodic,
                    priority: types::schedule_after::Priority,
                    call: types::schedule_after::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleAfter>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "schedule_after",
                        types::ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            142u8, 27u8, 219u8, 219u8, 33u8, 24u8, 50u8, 170u8, 224u8, 26u8, 110u8,
                            44u8, 189u8, 163u8, 152u8, 92u8, 181u8, 125u8, 145u8, 184u8, 248u8,
                            241u8, 230u8, 212u8, 36u8, 10u8, 3u8, 124u8, 150u8, 65u8, 89u8, 172u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task after a delay."]
                pub fn schedule_named_after(
                    &self,
                    id: types::schedule_named_after::Id,
                    after: types::schedule_named_after::After,
                    maybe_periodic: types::schedule_named_after::MaybePeriodic,
                    priority: types::schedule_named_after::Priority,
                    call: types::schedule_named_after::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleNamedAfter>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "schedule_named_after",
                        types::ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            9u8, 165u8, 130u8, 21u8, 116u8, 143u8, 87u8, 133u8, 127u8, 238u8, 6u8,
                            168u8, 10u8, 122u8, 74u8, 116u8, 238u8, 198u8, 62u8, 219u8, 227u8,
                            135u8, 188u8, 85u8, 219u8, 209u8, 200u8, 14u8, 195u8, 236u8, 246u8,
                            86u8,
                        ],
                    )
                }
                #[doc = "Set a retry configuration for a task so that, in case its scheduled run fails, it will"]
                #[doc = "be retried after `period` blocks, for a total amount of `retries` retries or until it"]
                #[doc = "succeeds."]
                #[doc = ""]
                #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                #[doc = "normally while the task is retrying."]
                #[doc = ""]
                #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                #[doc = "original `total_retries`."]
                pub fn set_retry(
                    &self,
                    task: types::set_retry::Task,
                    retries: types::set_retry::Retries,
                    period: types::set_retry::Period,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetRetry>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "set_retry",
                        types::SetRetry {
                            task,
                            retries,
                            period,
                        },
                        [
                            2u8, 242u8, 180u8, 69u8, 237u8, 168u8, 243u8, 93u8, 47u8, 222u8, 189u8,
                            74u8, 233u8, 106u8, 54u8, 40u8, 160u8, 61u8, 78u8, 138u8, 232u8, 20u8,
                            243u8, 17u8, 151u8, 194u8, 67u8, 200u8, 186u8, 192u8, 210u8, 214u8,
                        ],
                    )
                }
                #[doc = "Set a retry configuration for a named task so that, in case its scheduled run fails, it"]
                #[doc = "will be retried after `period` blocks, for a total amount of `retries` retries or until"]
                #[doc = "it succeeds."]
                #[doc = ""]
                #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                #[doc = "normally while the task is retrying."]
                #[doc = ""]
                #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                #[doc = "original `total_retries`."]
                pub fn set_retry_named(
                    &self,
                    id: types::set_retry_named::Id,
                    retries: types::set_retry_named::Retries,
                    period: types::set_retry_named::Period,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetRetryNamed>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "set_retry_named",
                        types::SetRetryNamed {
                            id,
                            retries,
                            period,
                        },
                        [
                            240u8, 102u8, 255u8, 253u8, 52u8, 81u8, 164u8, 170u8, 184u8, 178u8,
                            254u8, 126u8, 41u8, 247u8, 121u8, 22u8, 254u8, 136u8, 237u8, 37u8,
                            11u8, 42u8, 227u8, 234u8, 132u8, 83u8, 109u8, 168u8, 31u8, 44u8, 231u8,
                            70u8,
                        ],
                    )
                }
                #[doc = "Removes the retry configuration of a task."]
                pub fn cancel_retry(
                    &self,
                    task: types::cancel_retry::Task,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelRetry>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "cancel_retry",
                        types::CancelRetry { task },
                        [
                            142u8, 126u8, 127u8, 216u8, 64u8, 189u8, 42u8, 126u8, 63u8, 249u8,
                            211u8, 202u8, 224u8, 197u8, 199u8, 240u8, 58u8, 94u8, 219u8, 177u8,
                            20u8, 210u8, 153u8, 0u8, 127u8, 255u8, 235u8, 238u8, 170u8, 240u8,
                            44u8, 49u8,
                        ],
                    )
                }
                #[doc = "Cancel the retry configuration of a named task."]
                pub fn cancel_retry_named(
                    &self,
                    id: types::cancel_retry_named::Id,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelRetryNamed>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Scheduler",
                        "cancel_retry_named",
                        types::CancelRetryNamed { id },
                        [
                            76u8, 157u8, 253u8, 113u8, 162u8, 54u8, 98u8, 21u8, 62u8, 44u8, 155u8,
                            202u8, 2u8, 28u8, 153u8, 219u8, 67u8, 166u8, 206u8, 79u8, 139u8, 3u8,
                            119u8, 182u8, 254u8, 134u8, 143u8, 121u8, 155u8, 220u8, 192u8, 209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: scheduled::When,
                pub index: scheduled::Index,
            }
            pub mod scheduled {
                use super::runtime_types;
                pub type When = ::core::primitive::u32;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: canceled::When,
                pub index: canceled::Index,
            }
            pub mod canceled {
                use super::runtime_types;
                pub type When = ::core::primitive::u32;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: dispatched::Task,
                pub id: dispatched::Id,
                pub result: dispatched::Result,
            }
            pub mod dispatched {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Set a retry configuration for some task."]
            pub struct RetrySet {
                pub task: retry_set::Task,
                pub id: retry_set::Id,
                pub period: retry_set::Period,
                pub retries: retry_set::Retries,
            }
            pub mod retry_set {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                pub type Period = ::core::primitive::u32;
                pub type Retries = ::core::primitive::u8;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RetrySet {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "RetrySet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Cancel a retry configuration for some task."]
            pub struct RetryCancelled {
                pub task: retry_cancelled::Task,
                pub id: retry_cancelled::Id,
            }
            pub mod retry_cancelled {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RetryCancelled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "RetryCancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallUnavailable {
                pub task: call_unavailable::Task,
                pub id: call_unavailable::Id,
            }
            pub mod call_unavailable {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CallUnavailable {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallUnavailable";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
            pub struct PeriodicFailed {
                pub task: periodic_failed::Task,
                pub id: periodic_failed::Id,
            }
            pub mod periodic_failed {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PeriodicFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PeriodicFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The given task was unable to be retried since the agenda is full at that block or there"]
            #[doc = "was not enough weight to reschedule it."]
            pub struct RetryFailed {
                pub task: retry_failed::Task,
                pub id: retry_failed::Id,
            }
            pub mod retry_failed {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RetryFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "RetryFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The given task can never be executed since it is overweight."]
            pub struct PermanentlyOverweight {
                pub task: permanently_overweight::Task,
                pub id: permanently_overweight::Id,
            }
            pub mod permanently_overweight {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PermanentlyOverweight {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PermanentlyOverweight";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod incomplete_since {
                    use super::runtime_types;
                    pub type IncompleteSince = ::core::primitive::u32;
                }
                pub mod agenda {
                    use super::runtime_types;
                    pub type Agenda = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::mainnet_runtime::RuntimeCall,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                ::core::primitive::u32,
                                runtime_types::mainnet_runtime::OriginCaller,
                                runtime_types::account::AccountId20,
                            >,
                        >,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod retries {
                    use super::runtime_types;
                    pub type Retries =
                        runtime_types::pallet_scheduler::RetryConfig<::core::primitive::u32>;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod lookup {
                    use super::runtime_types;
                    pub type Lookup = (::core::primitive::u32, ::core::primitive::u32);
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn incomplete_since(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::incomplete_since::IncompleteSince,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "IncompleteSince",
                        (),
                        [
                            250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
                            130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
                            135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::agenda::Agenda,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Agenda",
                        (),
                        [
                            115u8, 68u8, 105u8, 224u8, 60u8, 77u8, 60u8, 11u8, 176u8, 153u8, 31u8,
                            17u8, 231u8, 218u8, 143u8, 104u8, 7u8, 172u8, 153u8, 167u8, 46u8,
                            159u8, 100u8, 204u8, 229u8, 69u8, 60u8, 43u8, 209u8, 148u8, 159u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::agenda::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::agenda::Param0,
                    >,
                    types::agenda::Agenda,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Agenda",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            115u8, 68u8, 105u8, 224u8, 60u8, 77u8, 60u8, 11u8, 176u8, 153u8, 31u8,
                            17u8, 231u8, 218u8, 143u8, 104u8, 7u8, 172u8, 153u8, 167u8, 46u8,
                            159u8, 100u8, 204u8, 229u8, 69u8, 60u8, 43u8, 209u8, 148u8, 159u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " Retry configurations for items to be executed, indexed by task address."]
                pub fn retries_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::retries::Retries,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Retries",
                        (),
                        [
                            164u8, 27u8, 208u8, 185u8, 19u8, 232u8, 190u8, 97u8, 137u8, 73u8,
                            146u8, 10u8, 241u8, 176u8, 251u8, 140u8, 133u8, 65u8, 190u8, 162u8,
                            59u8, 32u8, 77u8, 201u8, 27u8, 78u8, 183u8, 164u8, 74u8, 46u8, 139u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Retry configurations for items to be executed, indexed by task address."]
                pub fn retries_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::retries::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::retries::Param0,
                    >,
                    types::retries::Retries,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Retries",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            164u8, 27u8, 208u8, 185u8, 19u8, 232u8, 190u8, 97u8, 137u8, 73u8,
                            146u8, 10u8, 241u8, 176u8, 251u8, 140u8, 133u8, 65u8, 190u8, 162u8,
                            59u8, 32u8, 77u8, 201u8, 27u8, 78u8, 183u8, 164u8, 74u8, 46u8, 139u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Retry configurations for items to be executed, indexed by task address."]
                pub fn retries(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::retries::Param0>,
                    _1: impl ::core::borrow::Borrow<types::retries::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::retries::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::retries::Param1,
                        >,
                    ),
                    types::retries::Retries,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Retries",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            164u8, 27u8, 208u8, 185u8, 19u8, 232u8, 190u8, 97u8, 137u8, 73u8,
                            146u8, 10u8, 241u8, 176u8, 251u8, 140u8, 133u8, 65u8, 190u8, 162u8,
                            59u8, 32u8, 77u8, 201u8, 27u8, 78u8, 183u8, 164u8, 74u8, 46u8, 139u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::lookup::Lookup,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Lookup",
                        (),
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::lookup::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::lookup::Param0,
                    >,
                    types::lookup::Lookup,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Scheduler",
                        "Lookup",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
                pub fn maximum_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_weights::weight_v2::Weight,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                #[doc = ""]
                #[doc = " NOTE:"]
                #[doc = " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a"]
                #[doc = " higher limit under `runtime-benchmarks` feature."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                pub struct TransferAllowDeath {
                    pub dest: transfer_allow_death::Dest,
                    #[codec(compact)]
                    pub value: transfer_allow_death::Value,
                }
                pub mod transfer_allow_death {
                    use super::runtime_types;
                    pub type Dest = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAllowDeath {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_allow_death";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
                #[doc = "may be specified."]
                pub struct ForceTransfer {
                    pub source: force_transfer::Source,
                    pub dest: force_transfer::Dest,
                    #[codec(compact)]
                    pub value: force_transfer::Value,
                }
                pub mod force_transfer {
                    use super::runtime_types;
                    pub type Source = runtime_types::account::AccountId20;
                    pub type Dest = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
                #[doc = "kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer_allow_death`] instead."]
                #[doc = ""]
                #[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
                pub struct TransferKeepAlive {
                    pub dest: transfer_keep_alive::Dest,
                    #[codec(compact)]
                    pub value: transfer_keep_alive::Value,
                }
                pub mod transfer_keep_alive {
                    use super::runtime_types;
                    pub type Dest = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub struct TransferAll {
                    pub dest: transfer_all::Dest,
                    pub keep_alive: transfer_all::KeepAlive,
                }
                pub mod transfer_all {
                    use super::runtime_types;
                    pub type Dest = runtime_types::account::AccountId20;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub struct ForceUnreserve {
                    pub who: force_unreserve::Who,
                    pub amount: force_unreserve::Amount,
                }
                pub mod force_unreserve {
                    use super::runtime_types;
                    pub type Who = runtime_types::account::AccountId20;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Upgrade a specified account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `Signed`."]
                #[doc = "- `who`: The account to be upgraded."]
                #[doc = ""]
                #[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
                #[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
                #[doc = "possibility of churn)."]
                pub struct UpgradeAccounts {
                    pub who: upgrade_accounts::Who,
                }
                pub mod upgrade_accounts {
                    use super::runtime_types;
                    pub type Who = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpgradeAccounts {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "upgrade_accounts";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the regular balance of a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub struct ForceSetBalance {
                    pub who: force_set_balance::Who,
                    #[codec(compact)]
                    pub new_free: force_set_balance::NewFree,
                }
                pub mod force_set_balance {
                    use super::runtime_types;
                    pub type Who = runtime_types::account::AccountId20;
                    pub type NewFree = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_set_balance";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Adjust the total issuance in a saturating way."]
                #[doc = ""]
                #[doc = "Can only be called by root and always needs a positive `delta`."]
                #[doc = ""]
                #[doc = "# Example"]
                pub struct ForceAdjustTotalIssuance {
                    pub direction: force_adjust_total_issuance::Direction,
                    #[codec(compact)]
                    pub delta: force_adjust_total_issuance::Delta,
                }
                pub mod force_adjust_total_issuance {
                    use super::runtime_types;
                    pub type Direction = runtime_types::pallet_balances::types::AdjustmentDirection;
                    pub type Delta = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceAdjustTotalIssuance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_adjust_total_issuance";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Burn the specified liquid free balance from the origin account."]
                #[doc = ""]
                #[doc = "If the origin's account ends up below the existential deposit as a result"]
                #[doc = "of the burn and `keep_alive` is false, the account will be reaped."]
                #[doc = ""]
                #[doc = "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,"]
                #[doc = "this `burn` operation will reduce total issuance by the amount _burned_."]
                pub struct Burn {
                    #[codec(compact)]
                    pub value: burn::Value,
                    pub keep_alive: burn::KeepAlive,
                }
                pub mod burn {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "burn";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                pub fn transfer_allow_death(
                    &self,
                    dest: types::transfer_allow_death::Dest,
                    value: types::transfer_allow_death::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAllowDeath>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "transfer_allow_death",
                        types::TransferAllowDeath { dest, value },
                        [
                            170u8, 183u8, 55u8, 90u8, 158u8, 129u8, 185u8, 45u8, 22u8, 189u8,
                            183u8, 226u8, 208u8, 179u8, 125u8, 116u8, 135u8, 24u8, 130u8, 138u8,
                            7u8, 187u8, 160u8, 6u8, 125u8, 81u8, 42u8, 2u8, 52u8, 166u8, 235u8,
                            19u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
                #[doc = "may be specified."]
                pub fn force_transfer(
                    &self,
                    source: types::force_transfer::Source,
                    dest: types::force_transfer::Dest,
                    value: types::force_transfer::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            36u8, 161u8, 9u8, 149u8, 23u8, 63u8, 220u8, 12u8, 28u8, 133u8, 98u8,
                            252u8, 211u8, 72u8, 11u8, 130u8, 48u8, 191u8, 161u8, 58u8, 221u8, 96u8,
                            250u8, 26u8, 53u8, 238u8, 17u8, 191u8, 223u8, 104u8, 86u8, 98u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
                #[doc = "kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer_allow_death`] instead."]
                #[doc = ""]
                #[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: types::transfer_keep_alive::Dest,
                    value: types::transfer_keep_alive::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferKeepAlive>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            74u8, 57u8, 223u8, 189u8, 54u8, 162u8, 17u8, 85u8, 239u8, 155u8, 92u8,
                            220u8, 78u8, 225u8, 91u8, 187u8, 189u8, 113u8, 72u8, 130u8, 232u8,
                            115u8, 75u8, 184u8, 83u8, 98u8, 252u8, 156u8, 137u8, 223u8, 68u8,
                            184u8,
                        ],
                    )
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub fn transfer_all(
                    &self,
                    dest: types::transfer_all::Dest,
                    keep_alive: types::transfer_all::KeepAlive,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            244u8, 113u8, 187u8, 2u8, 150u8, 160u8, 107u8, 183u8, 37u8, 89u8,
                            144u8, 97u8, 107u8, 37u8, 101u8, 39u8, 64u8, 255u8, 182u8, 162u8,
                            198u8, 192u8, 2u8, 202u8, 156u8, 112u8, 91u8, 82u8, 203u8, 114u8,
                            187u8, 61u8,
                        ],
                    )
                }
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub fn force_unreserve(
                    &self,
                    who: types::force_unreserve::Who,
                    amount: types::force_unreserve::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceUnreserve>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            123u8, 50u8, 50u8, 66u8, 70u8, 79u8, 101u8, 176u8, 243u8, 126u8, 123u8,
                            90u8, 54u8, 239u8, 169u8, 132u8, 105u8, 220u8, 61u8, 176u8, 185u8,
                            20u8, 138u8, 237u8, 130u8, 158u8, 161u8, 198u8, 203u8, 185u8, 205u8,
                            193u8,
                        ],
                    )
                }
                #[doc = "Upgrade a specified account."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `Signed`."]
                #[doc = "- `who`: The account to be upgraded."]
                #[doc = ""]
                #[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
                #[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
                #[doc = "possibility of churn)."]
                pub fn upgrade_accounts(
                    &self,
                    who: types::upgrade_accounts::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpgradeAccounts>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "upgrade_accounts",
                        types::UpgradeAccounts { who },
                        [
                            249u8, 91u8, 142u8, 5u8, 224u8, 39u8, 121u8, 223u8, 150u8, 120u8,
                            147u8, 82u8, 44u8, 42u8, 240u8, 195u8, 136u8, 90u8, 31u8, 72u8, 35u8,
                            140u8, 193u8, 43u8, 112u8, 144u8, 10u8, 61u8, 227u8, 140u8, 2u8, 126u8,
                        ],
                    )
                }
                #[doc = "Set the regular balance of a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn force_set_balance(
                    &self,
                    who: types::force_set_balance::Who,
                    new_free: types::force_set_balance::NewFree,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetBalance>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "force_set_balance",
                        types::ForceSetBalance { who, new_free },
                        [
                            91u8, 28u8, 236u8, 62u8, 238u8, 92u8, 214u8, 23u8, 63u8, 219u8, 164u8,
                            24u8, 97u8, 57u8, 25u8, 129u8, 42u8, 151u8, 32u8, 206u8, 83u8, 140u8,
                            203u8, 199u8, 96u8, 32u8, 61u8, 255u8, 135u8, 185u8, 226u8, 81u8,
                        ],
                    )
                }
                #[doc = "Adjust the total issuance in a saturating way."]
                #[doc = ""]
                #[doc = "Can only be called by root and always needs a positive `delta`."]
                #[doc = ""]
                #[doc = "# Example"]
                pub fn force_adjust_total_issuance(
                    &self,
                    direction: types::force_adjust_total_issuance::Direction,
                    delta: types::force_adjust_total_issuance::Delta,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceAdjustTotalIssuance,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "force_adjust_total_issuance",
                        types::ForceAdjustTotalIssuance { direction, delta },
                        [
                            208u8, 134u8, 56u8, 133u8, 232u8, 164u8, 10u8, 213u8, 53u8, 193u8,
                            190u8, 63u8, 236u8, 186u8, 96u8, 122u8, 104u8, 87u8, 173u8, 38u8, 58u8,
                            176u8, 21u8, 78u8, 42u8, 106u8, 46u8, 248u8, 251u8, 190u8, 150u8,
                            202u8,
                        ],
                    )
                }
                #[doc = "Burn the specified liquid free balance from the origin account."]
                #[doc = ""]
                #[doc = "If the origin's account ends up below the existential deposit as a result"]
                #[doc = "of the burn and `keep_alive` is false, the account will be reaped."]
                #[doc = ""]
                #[doc = "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,"]
                #[doc = "this `burn` operation will reduce total issuance by the amount _burned_."]
                pub fn burn(
                    &self,
                    value: types::burn::Value,
                    keep_alive: types::burn::KeepAlive,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Burn>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Balances",
                        "burn",
                        types::Burn { value, keep_alive },
                        [
                            176u8, 64u8, 7u8, 109u8, 16u8, 44u8, 145u8, 125u8, 147u8, 152u8, 130u8,
                            114u8, 221u8, 201u8, 150u8, 162u8, 118u8, 71u8, 52u8, 92u8, 240u8,
                            116u8, 203u8, 98u8, 5u8, 22u8, 43u8, 102u8, 94u8, 208u8, 101u8, 57u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: endowed::Account,
                pub free_balance: endowed::FreeBalance,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type FreeBalance = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: dust_lost::Account,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type From = runtime_types::account::AccountId20;
                pub type To = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: balance_set::Who,
                pub free: balance_set::Free,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Free = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub destination_status: reserve_repatriated::DestinationStatus,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type From = runtime_types::account::AccountId20;
                pub type To = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
                pub type DestinationStatus =
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: deposit::Who,
                pub amount: deposit::Amount,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: withdraw::Who,
                pub amount: withdraw::Amount,
            }
            pub mod withdraw {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: slashed::Who,
                pub amount: slashed::Amount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was minted into an account."]
            pub struct Minted {
                pub who: minted::Who,
                pub amount: minted::Amount,
            }
            pub mod minted {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Minted {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was burned from an account."]
            pub struct Burned {
                pub who: burned::Who,
                pub amount: burned::Amount,
            }
            pub mod burned {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Burned {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was suspended from an account (it can be restored later)."]
            pub struct Suspended {
                pub who: suspended::Who,
                pub amount: suspended::Amount,
            }
            pub mod suspended {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Suspended {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Suspended";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some amount was restored into an account."]
            pub struct Restored {
                pub who: restored::Who,
                pub amount: restored::Amount,
            }
            pub mod restored {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Restored {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Restored";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was upgraded."]
            pub struct Upgraded {
                pub who: upgraded::Who,
            }
            pub mod upgraded {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Upgraded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Upgraded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
            pub struct Issued {
                pub amount: issued::Amount,
            }
            pub mod issued {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
            pub struct Rescinded {
                pub amount: rescinded::Amount,
            }
            pub mod rescinded {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Rescinded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was locked."]
            pub struct Locked {
                pub who: locked::Who,
                pub amount: locked::Amount,
            }
            pub mod locked {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Locked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was unlocked."]
            pub struct Unlocked {
                pub who: unlocked::Who,
                pub amount: unlocked::Amount,
            }
            pub mod unlocked {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was frozen."]
            pub struct Frozen {
                pub who: frozen::Who,
                pub amount: frozen::Amount,
            }
            pub mod frozen {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was thawed."]
            pub struct Thawed {
                pub who: thawed::Who,
                pub amount: thawed::Amount,
            }
            pub mod thawed {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The `TotalIssuance` was forcefully changed."]
            pub struct TotalIssuanceForced {
                pub old: total_issuance_forced::Old,
                pub new: total_issuance_forced::New,
            }
            pub mod total_issuance_forced {
                use super::runtime_types;
                pub type Old = ::core::primitive::u128;
                pub type New = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TotalIssuanceForced {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "TotalIssuanceForced";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u128;
                }
                pub mod inactive_issuance {
                    use super::runtime_types;
                    pub type InactiveIssuance = ::core::primitive::u128;
                }
                pub mod account {
                    use super::runtime_types;
                    pub type Account =
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::types::BalanceLock<
                                ::core::primitive::u128,
                            >,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod holds {
                    use super::runtime_types;
                    pub type Holds = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::frame_support::traits::tokens::misc::IdAmount<
                            runtime_types::mainnet_runtime::RuntimeHoldReason,
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod freezes {
                    use super::runtime_types;
                    pub type Freezes = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::frame_support::traits::tokens::misc::IdAmount<
                            runtime_types::mainnet_runtime::RuntimeFreezeReason,
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_issuance::TotalIssuance,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "TotalIssuance",
                        (),
                        [
                            116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
                            171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
                            255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The total units of outstanding deactivated balance in the system."]
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::inactive_issuance::InactiveIssuance,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "InactiveIssuance",
                        (),
                        [
                            212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
                            249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
                            30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account::Account,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Account",
                        (),
                        [
                            4u8, 32u8, 254u8, 218u8, 216u8, 126u8, 196u8, 64u8, 246u8, 55u8, 43u8,
                            85u8, 100u8, 29u8, 212u8, 25u8, 105u8, 74u8, 73u8, 204u8, 249u8, 49u8,
                            53u8, 77u8, 66u8, 159u8, 45u8, 18u8, 8u8, 15u8, 185u8, 45u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account::Param0,
                    >,
                    types::account::Account,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Account",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            4u8, 32u8, 254u8, 218u8, 216u8, 126u8, 196u8, 64u8, 246u8, 55u8, 43u8,
                            85u8, 100u8, 29u8, 212u8, 25u8, 105u8, 74u8, 73u8, 204u8, 249u8, 49u8,
                            53u8, 77u8, 66u8, 159u8, 45u8, 18u8, 8u8, 15u8, 185u8, 45u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                #[doc = ""]
                #[doc = " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::locks::Locks,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Locks",
                        (),
                        [
                            81u8, 204u8, 13u8, 224u8, 52u8, 52u8, 0u8, 155u8, 83u8, 151u8, 116u8,
                            28u8, 188u8, 135u8, 35u8, 220u8, 153u8, 116u8, 140u8, 76u8, 185u8,
                            241u8, 54u8, 96u8, 93u8, 25u8, 54u8, 6u8, 68u8, 130u8, 106u8, 114u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                #[doc = ""]
                #[doc = " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn locks(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::locks::Param0,
                    >,
                    types::locks::Locks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Locks",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            81u8, 204u8, 13u8, 224u8, 52u8, 52u8, 0u8, 155u8, 83u8, 151u8, 116u8,
                            28u8, 188u8, 135u8, 35u8, 220u8, 153u8, 116u8, 140u8, 76u8, 185u8,
                            241u8, 54u8, 96u8, 93u8, 25u8, 54u8, 6u8, 68u8, 130u8, 106u8, 114u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                #[doc = ""]
                #[doc = " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reserves::Reserves,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Reserves",
                        (),
                        [
                            102u8, 188u8, 69u8, 228u8, 255u8, 175u8, 89u8, 80u8, 2u8, 49u8, 159u8,
                            55u8, 167u8, 11u8, 228u8, 87u8, 104u8, 125u8, 181u8, 174u8, 222u8,
                            14u8, 135u8, 242u8, 137u8, 208u8, 35u8, 15u8, 217u8, 185u8, 124u8,
                            156u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                #[doc = ""]
                #[doc = " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn reserves(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::reserves::Param0,
                    >,
                    types::reserves::Reserves,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Reserves",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            102u8, 188u8, 69u8, 228u8, 255u8, 175u8, 89u8, 80u8, 2u8, 49u8, 159u8,
                            55u8, 167u8, 11u8, 228u8, 87u8, 104u8, 125u8, 181u8, 174u8, 222u8,
                            14u8, 135u8, 242u8, 137u8, 208u8, 35u8, 15u8, 217u8, 185u8, 124u8,
                            156u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::holds::Holds,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Holds",
                        (),
                        [
                            131u8, 142u8, 246u8, 13u8, 147u8, 216u8, 195u8, 187u8, 235u8, 91u8,
                            11u8, 220u8, 148u8, 73u8, 121u8, 220u8, 144u8, 254u8, 77u8, 214u8,
                            23u8, 103u8, 161u8, 196u8, 23u8, 52u8, 128u8, 197u8, 94u8, 241u8,
                            252u8, 232u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::holds::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::holds::Param0,
                    >,
                    types::holds::Holds,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Holds",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            131u8, 142u8, 246u8, 13u8, 147u8, 216u8, 195u8, 187u8, 235u8, 91u8,
                            11u8, 220u8, 148u8, 73u8, 121u8, 220u8, 144u8, 254u8, 77u8, 214u8,
                            23u8, 103u8, 161u8, 196u8, 23u8, 52u8, 128u8, 197u8, 94u8, 241u8,
                            252u8, 232u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::freezes::Freezes,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Freezes",
                        (),
                        [
                            27u8, 193u8, 59u8, 243u8, 236u8, 7u8, 135u8, 219u8, 171u8, 106u8,
                            242u8, 229u8, 209u8, 212u8, 206u8, 220u8, 64u8, 25u8, 125u8, 228u8,
                            32u8, 231u8, 44u8, 251u8, 98u8, 50u8, 77u8, 28u8, 106u8, 126u8, 183u8,
                            163u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::freezes::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::freezes::Param0,
                    >,
                    types::freezes::Freezes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Balances",
                        "Freezes",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            27u8, 193u8, 59u8, 243u8, 236u8, 7u8, 135u8, 219u8, 171u8, 106u8,
                            242u8, 229u8, 209u8, 212u8, 206u8, 220u8, 64u8, 25u8, 125u8, 228u8,
                            32u8, 231u8, 44u8, 251u8, 98u8, 50u8, 77u8, 28u8, 106u8, 126u8, 183u8,
                            163u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
                #[doc = ""]
                #[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
                #[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
                #[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
                #[doc = " behaviour if you set this to zero."]
                #[doc = ""]
                #[doc = " Bottom line: Do yourself a favour and make it at least one!"]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                #[doc = ""]
                #[doc = " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn max_locks(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                #[doc = ""]
                #[doc = " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"]
                pub fn max_reserves(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
                pub fn max_freezes(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Balances",
                        "MaxFreezes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: transaction_fee_paid::Who,
                pub actual_fee: transaction_fee_paid::ActualFee,
                pub tip: transaction_fee_paid::Tip,
            }
            pub mod transaction_fee_paid {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type ActualFee = ::core::primitive::u128;
                pub type Tip = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod next_fee_multiplier {
                    use super::runtime_types;
                    pub type NextFeeMultiplier =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_fee_multiplier::NextFeeMultiplier,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        (),
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::storage_version::StorageVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        (),
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u8,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nfts {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_nfts::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_nfts::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Issue a new collection of non-fungible items from a public origin."]
                #[doc = ""]
                #[doc = "This new collection has no items initially and its owner is the origin."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
                #[doc = ""]
                #[doc = "`CollectionDeposit` funds of sender are reserved."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `admin`: The admin of this collection. The admin is the initial address of each"]
                #[doc = "member of the collection's admin team."]
                #[doc = ""]
                #[doc = "Emits `Created` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct Create {
                    pub admin: create::Admin,
                    pub config: create::Config,
                }
                pub mod create {
                    use super::runtime_types;
                    pub type Admin = runtime_types::account::AccountId20;
                    pub type Config = runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        runtime_types::runtime_common::IncrementableU256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Issue a new collection of non-fungible items from a privileged origin."]
                #[doc = ""]
                #[doc = "This new collection has no items initially."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin`."]
                #[doc = ""]
                #[doc = "Unlike `create`, no funds are reserved."]
                #[doc = ""]
                #[doc = "- `owner`: The owner of this collection of items. The owner has full superuser"]
                #[doc = "  permissions over this item, but may later change and configure the permissions using"]
                #[doc = "  `transfer_ownership` and `set_team`."]
                #[doc = ""]
                #[doc = "Emits `ForceCreated` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ForceCreate {
                    pub owner: force_create::Owner,
                    pub config: force_create::Config,
                }
                pub mod force_create {
                    use super::runtime_types;
                    pub type Owner = runtime_types::account::AccountId20;
                    pub type Config = runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        runtime_types::runtime_common::IncrementableU256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Destroy a collection of fungible items."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                #[doc = "owner of the `collection`."]
                #[doc = ""]
                #[doc = "NOTE: The collection must have 0 items to be destroyed."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to be destroyed."]
                #[doc = "- `witness`: Information on the items minted in the collection. This must be"]
                #[doc = "correct."]
                #[doc = ""]
                #[doc = "Emits `Destroyed` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(m + c + a)` where:"]
                #[doc = "- `m = witness.item_metadatas`"]
                #[doc = "- `c = witness.item_configs`"]
                #[doc = "- `a = witness.attributes`"]
                pub struct Destroy {
                    pub collection: destroy::Collection,
                    pub witness: destroy::Witness,
                }
                pub mod destroy {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Witness = runtime_types::pallet_nfts::types::DestroyWitness;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Destroy {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "destroy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Mint an item of a particular collection."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must comply with the `mint_settings` rules."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be minted."]
                #[doc = "- `maybe_item`: An identifier of the new item. If the collection mints serially, this should be `None`."]
                #[doc = "- `mint_to`: Account into which the item will be minted."]
                #[doc = "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned"]
                #[doc = "  item_id from that collection needs to be provided within the witness data object. If"]
                #[doc = "  the mint price is set, then it should be additionally confirmed in the `witness_data`."]
                #[doc = ""]
                #[doc = "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct Mint {
                    pub collection: mint::Collection,
                    pub maybe_item: mint::MaybeItem,
                    pub mint_to: mint::MintTo,
                    pub witness_data: mint::WitnessData,
                }
                pub mod mint {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                    pub type MintTo = runtime_types::account::AccountId20;
                    pub type WitnessData = ::core::option::Option<
                        runtime_types::pallet_nfts::types::MintWitness<
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Mint an item of a particular collection from a privileged origin."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                #[doc = "Issuer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be minted."]
                #[doc = "- `maybe_item`: An identifier of the new item."]
                #[doc = "- `mint_to`: Account into which the item will be minted."]
                #[doc = "- `item_config`: A config of the new item."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ForceMint {
                    pub collection: force_mint::Collection,
                    pub maybe_item: force_mint::MaybeItem,
                    pub mint_to: force_mint::MintTo,
                    pub item_config: force_mint::ItemConfig,
                }
                pub mod force_mint {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                    pub type MintTo = runtime_types::account::AccountId20;
                    pub type ItemConfig = runtime_types::pallet_nfts::types::ItemConfig;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceMint {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_mint";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Destroy a single item."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be Signed and the signing account must"]
                #[doc = "be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be burned."]
                #[doc = "- `item`: The item to be burned."]
                #[doc = ""]
                #[doc = "Emits `Burned`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct Burn {
                    pub collection: burn::Collection,
                    pub item: burn::Item,
                }
                pub mod burn {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Move an item from the sender account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the signing account must be either:"]
                #[doc = "- the Owner of the `item`;"]
                #[doc = "- the approved delegate for the `item` (in this case, the approval is reset)."]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item to be transferred."]
                #[doc = "- `item`: The item to be transferred."]
                #[doc = "- `dest`: The account to receive ownership of the item."]
                #[doc = ""]
                #[doc = "Emits `Transferred`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct Transfer {
                    pub collection: transfer::Collection,
                    pub item: transfer::Item,
                    pub dest: transfer::Dest,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Dest = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Re-evaluate the deposits on some items."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the items to be reevaluated."]
                #[doc = "- `items`: The items of the collection whose deposits will be reevaluated."]
                #[doc = ""]
                #[doc = "NOTE: This exists as a best-effort function. Any items which are unknown or"]
                #[doc = "in the case that the owner account does not have reservable funds to pay for a"]
                #[doc = "deposit increase are ignored. Generally the owner isn't going to call this on items"]
                #[doc = "whose existing deposit is less than the refreshed deposit as it would only cost them,"]
                #[doc = "so it's of little consequence."]
                #[doc = ""]
                #[doc = "It will still return an error in the case that the collection is unknown or the signer"]
                #[doc = "is not permitted to call it."]
                #[doc = ""]
                #[doc = "Weight: `O(items.len())`"]
                pub struct Redeposit {
                    pub collection: redeposit::Collection,
                    pub items: redeposit::Items,
                }
                pub mod redeposit {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Items =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Redeposit {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "redeposit";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disallow further unprivileged transfer of an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be changed."]
                #[doc = "- `item`: The item to become non-transferable."]
                #[doc = ""]
                #[doc = "Emits `ItemTransferLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct LockItemTransfer {
                    pub collection: lock_item_transfer::Collection,
                    pub item: lock_item_transfer::Item,
                }
                pub mod lock_item_transfer {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LockItemTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_item_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Re-allow unprivileged transfer of an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be changed."]
                #[doc = "- `item`: The item to become transferable."]
                #[doc = ""]
                #[doc = "Emits `ItemTransferUnlocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct UnlockItemTransfer {
                    pub collection: unlock_item_transfer::Collection,
                    pub item: unlock_item_transfer::Item,
                }
                pub mod unlock_item_transfer {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnlockItemTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "unlock_item_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disallows specified settings for the whole collection."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection to be locked."]
                #[doc = "- `lock_settings`: The settings to be locked."]
                #[doc = ""]
                #[doc = "Note: it's possible to only lock(set) the setting, but not to unset it."]
                #[doc = ""]
                #[doc = "Emits `CollectionLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct LockCollection {
                    pub collection: lock_collection::Collection,
                    pub lock_settings: lock_collection::LockSettings,
                }
                pub mod lock_collection {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type LockSettings = runtime_types::pallet_nfts::types::BitFlags1<
                        runtime_types::pallet_nfts::types::CollectionSetting,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LockCollection {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_collection";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the Owner of a collection."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection whose owner should be changed."]
                #[doc = "- `owner`: The new Owner of this collection. They must have called"]
                #[doc = "  `set_accept_ownership` with `collection` in order for this operation to succeed."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct TransferOwnership {
                    pub collection: transfer_ownership::Collection,
                    pub new_owner: transfer_ownership::NewOwner,
                }
                pub mod transfer_ownership {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type NewOwner = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the Issuer, Admin and Freezer of a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it"]
                #[doc = "after to `Some(account)`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection whose team should be changed."]
                #[doc = "- `issuer`: The new Issuer of this collection."]
                #[doc = "- `admin`: The new Admin of this collection."]
                #[doc = "- `freezer`: The new Freezer of this collection."]
                #[doc = ""]
                #[doc = "Emits `TeamChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct SetTeam {
                    pub collection: set_team::Collection,
                    pub issuer: set_team::Issuer,
                    pub admin: set_team::Admin,
                    pub freezer: set_team::Freezer,
                }
                pub mod set_team {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Issuer = ::core::option::Option<runtime_types::account::AccountId20>;
                    pub type Admin = ::core::option::Option<runtime_types::account::AccountId20>;
                    pub type Freezer = ::core::option::Option<runtime_types::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the Owner of a collection."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection."]
                #[doc = "- `owner`: The new Owner of this collection."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ForceCollectionOwner {
                    pub collection: force_collection_owner::Collection,
                    pub owner: force_collection_owner::Owner,
                }
                pub mod force_collection_owner {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Owner = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceCollectionOwner {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_collection_owner";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the config of a collection."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection."]
                #[doc = "- `config`: The new config of this collection."]
                #[doc = ""]
                #[doc = "Emits `CollectionConfigChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ForceCollectionConfig {
                    pub collection: force_collection_config::Collection,
                    pub config: force_collection_config::Config,
                }
                pub mod force_collection_config {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Config = runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        runtime_types::runtime_common::IncrementableU256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceCollectionConfig {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_collection_config";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Approve an item to be transferred by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "`item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be approved for delegated transfer."]
                #[doc = "- `item`: The item to be approved for delegated transfer."]
                #[doc = "- `delegate`: The account to delegate permission to transfer the item."]
                #[doc = "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the"]
                #[doc = "\tnumber of blocks after which the approval will expire"]
                #[doc = ""]
                #[doc = "Emits `TransferApproved` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ApproveTransfer {
                    pub collection: approve_transfer::Collection,
                    pub item: approve_transfer::Item,
                    pub delegate: approve_transfer::Delegate,
                    pub maybe_deadline: approve_transfer::MaybeDeadline,
                }
                pub mod approve_transfer {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type MaybeDeadline = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel one of the transfer approvals for a specific item."]
                #[doc = ""]
                #[doc = "Origin must be either:"]
                #[doc = "- the `Force` origin;"]
                #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item of whose approval will be cancelled."]
                #[doc = "- `item`: The item of the collection of whose approval will be cancelled."]
                #[doc = "- `delegate`: The account that is going to loose their approval."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct CancelApproval {
                    pub collection: cancel_approval::Collection,
                    pub item: cancel_approval::Item,
                    pub delegate: cancel_approval::Delegate,
                }
                pub mod cancel_approval {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Delegate = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel all the approvals of a specific item."]
                #[doc = ""]
                #[doc = "Origin must be either:"]
                #[doc = "- the `Force` origin;"]
                #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item of whose approvals will be cleared."]
                #[doc = "- `item`: The item of the collection of whose approvals will be cleared."]
                #[doc = ""]
                #[doc = "Emits `AllApprovalsCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ClearAllTransferApprovals {
                    pub collection: clear_all_transfer_approvals::Collection,
                    pub item: clear_all_transfer_approvals::Item,
                }
                pub mod clear_all_transfer_approvals {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearAllTransferApprovals {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_all_transfer_approvals";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disallows changing the metadata or attributes of the item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin"]
                #[doc = "of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection if the `item`."]
                #[doc = "- `item`: An item to be locked."]
                #[doc = "- `lock_metadata`: Specifies whether the metadata should be locked."]
                #[doc = "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace"]
                #[doc = "  should be locked."]
                #[doc = ""]
                #[doc = "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only."]
                #[doc = "When the metadata or attributes are locked, it won't be possible the unlock them."]
                #[doc = ""]
                #[doc = "Emits `ItemPropertiesLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct LockItemProperties {
                    pub collection: lock_item_properties::Collection,
                    pub item: lock_item_properties::Item,
                    pub lock_metadata: lock_item_properties::LockMetadata,
                    pub lock_attributes: lock_item_properties::LockAttributes,
                }
                pub mod lock_item_properties {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type LockMetadata = ::core::primitive::bool;
                    pub type LockAttributes = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LockItemProperties {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_item_properties";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must conform to the namespace ruleset:"]
                #[doc = "- `CollectionOwner` namespace could be modified by the `collection` Admin only;"]
                #[doc = "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`"]
                #[doc = "  should be set in that case;"]
                #[doc = "- `Account(AccountId)` namespace could be modified only when the `origin` was given a"]
                #[doc = "  permission to do so;"]
                #[doc = ""]
                #[doc = "The funds of `origin` are reserved according to the formula:"]
                #[doc = "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = "- `value`: The value to which to set the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct SetAttribute {
                    pub collection: set_attribute::Collection,
                    pub maybe_item: set_attribute::MaybeItem,
                    pub namespace: set_attribute::Namespace,
                    pub key: set_attribute::Key,
                    pub value: set_attribute::Value,
                }
                pub mod set_attribute {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                    pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Key = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                    pub type Value = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_attribute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force-set an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "If the attribute already exists and it was set by another account, the deposit"]
                #[doc = "will be returned to the previous owner."]
                #[doc = ""]
                #[doc = "- `set_as`: An optional owner of the attribute."]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = "- `value`: The value to which to set the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ForceSetAttribute {
                    pub set_as: force_set_attribute::SetAs,
                    pub collection: force_set_attribute::Collection,
                    pub maybe_item: force_set_attribute::MaybeItem,
                    pub namespace: force_set_attribute::Namespace,
                    pub key: force_set_attribute::Key,
                    pub value: force_set_attribute::Value,
                }
                pub mod force_set_attribute {
                    use super::runtime_types;
                    pub type SetAs = ::core::option::Option<runtime_types::account::AccountId20>;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                    pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Key = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                    pub type Value = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_set_attribute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "attribute."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to clear."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ClearAttribute {
                    pub collection: clear_attribute::Collection,
                    pub maybe_item: clear_attribute::MaybeItem,
                    pub namespace: clear_attribute::Namespace,
                    pub key: clear_attribute::Key,
                }
                pub mod clear_attribute {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                    pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Key = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_attribute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Approve item's attributes to be changed by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: A collection of the item."]
                #[doc = "- `item`: The item that holds attributes."]
                #[doc = "- `delegate`: The account to delegate permission to change attributes of the item."]
                #[doc = ""]
                #[doc = "Emits `ItemAttributesApprovalAdded` on success."]
                pub struct ApproveItemAttributes {
                    pub collection: approve_item_attributes::Collection,
                    pub item: approve_item_attributes::Item,
                    pub delegate: approve_item_attributes::Delegate,
                }
                pub mod approve_item_attributes {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Delegate = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveItemAttributes {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "approve_item_attributes";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel the previously provided approval to change item's attributes."]
                #[doc = "All the previously set attributes by the `delegate` will be removed."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: Collection that the item is contained within."]
                #[doc = "- `item`: The item that holds attributes."]
                #[doc = "- `delegate`: The previously approved account to remove."]
                #[doc = ""]
                #[doc = "Emits `ItemAttributesApprovalRemoved` on success."]
                pub struct CancelItemAttributesApproval {
                    pub collection: cancel_item_attributes_approval::Collection,
                    pub item: cancel_item_attributes_approval::Item,
                    pub delegate: cancel_item_attributes_approval::Delegate,
                    pub witness: cancel_item_attributes_approval::Witness,
                }
                pub mod cancel_item_attributes_approval {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type Witness =
                        runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelItemAttributesApproval {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_item_attributes_approval";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the metadata for an item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "If the origin is Signed, then funds of signer are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `item`: The identifier of the item whose metadata to set."]
                #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                #[doc = ""]
                #[doc = "Emits `ItemMetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct SetMetadata {
                    pub collection: set_metadata::Collection,
                    pub item: set_metadata::Item,
                    pub data: set_metadata::Data,
                }
                pub mod set_metadata {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Data = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear the metadata for an item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                #[doc = "- `item`: The identifier of the item whose metadata to clear."]
                #[doc = ""]
                #[doc = "Emits `ItemMetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ClearMetadata {
                    pub collection: clear_metadata::Collection,
                    pub item: clear_metadata::Item,
                }
                pub mod clear_metadata {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the metadata for a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "If the origin is `Signed`, then funds of signer are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the item whose metadata to update."]
                #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                #[doc = ""]
                #[doc = "Emits `CollectionMetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct SetCollectionMetadata {
                    pub collection: set_collection_metadata::Collection,
                    pub data: set_collection_metadata::Data,
                }
                pub mod set_collection_metadata {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Data = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCollectionMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear the metadata for a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose metadata to clear."]
                #[doc = ""]
                #[doc = "Emits `CollectionMetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ClearCollectionMetadata {
                    pub collection: clear_collection_metadata::Collection,
                }
                pub mod clear_collection_metadata {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearCollectionMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set (or reset) the acceptance of ownership for a particular account."]
                #[doc = ""]
                #[doc = "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a"]
                #[doc = "provider reference."]
                #[doc = ""]
                #[doc = "- `maybe_collection`: The identifier of the collection whose ownership the signer is"]
                #[doc = "  willing to accept, or if `None`, an indication that the signer is willing to accept no"]
                #[doc = "  ownership transferal."]
                #[doc = ""]
                #[doc = "Emits `OwnershipAcceptanceChanged`."]
                pub struct SetAcceptOwnership {
                    pub maybe_collection: set_accept_ownership::MaybeCollection,
                }
                pub mod set_accept_ownership {
                    use super::runtime_types;
                    pub type MaybeCollection =
                        ::core::option::Option<runtime_types::runtime_common::IncrementableU256>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetAcceptOwnership {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_accept_ownership";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the maximum number of items a collection could have."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to change."]
                #[doc = "- `max_supply`: The maximum number of items a collection could have."]
                #[doc = ""]
                #[doc = "Emits `CollectionMaxSupplySet` event when successful."]
                pub struct SetCollectionMaxSupply {
                    pub collection: set_collection_max_supply::Collection,
                    pub max_supply: set_collection_max_supply::MaxSupply,
                }
                pub mod set_collection_max_supply {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaxSupply = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCollectionMaxSupply {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_collection_max_supply";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Update mint settings."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer"]
                #[doc = "of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to change."]
                #[doc = "- `mint_settings`: The new mint settings."]
                #[doc = ""]
                #[doc = "Emits `CollectionMintSettingsUpdated` event when successful."]
                pub struct UpdateMintSettings {
                    pub collection: update_mint_settings::Collection,
                    pub mint_settings: update_mint_settings::MintSettings,
                }
                pub mod update_mint_settings {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type MintSettings = runtime_types::pallet_nfts::types::MintSettings<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        runtime_types::runtime_common::IncrementableU256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateMintSettings {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "update_mint_settings";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set (or reset) the price for an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item to set the price for."]
                #[doc = "- `price`: The price for the item. Pass `None`, to reset the price."]
                #[doc = "- `buyer`: Restricts the buy operation to a specific account."]
                #[doc = ""]
                #[doc = "Emits `ItemPriceSet` on success if the price is not `None`."]
                #[doc = "Emits `ItemPriceRemoved` on success if the price is `None`."]
                pub struct SetPrice {
                    pub collection: set_price::Collection,
                    pub item: set_price::Item,
                    pub price: set_price::Price,
                    pub whitelisted_buyer: set_price::WhitelistedBuyer,
                }
                pub mod set_price {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Price = ::core::option::Option<::core::primitive::u128>;
                    pub type WhitelistedBuyer =
                        ::core::option::Option<runtime_types::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrice {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_price";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows to buy an item if it's up for sale."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must not be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item the sender wants to buy."]
                #[doc = "- `bid_price`: The price the sender is willing to pay."]
                #[doc = ""]
                #[doc = "Emits `ItemBought` on success."]
                pub struct BuyItem {
                    pub collection: buy_item::Collection,
                    pub item: buy_item::Item,
                    pub bid_price: buy_item::BidPrice,
                }
                pub mod buy_item {
                    use super::runtime_types;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type BidPrice = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BuyItem {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "buy_item";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows to pay the tips."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `tips`: Tips array."]
                #[doc = ""]
                #[doc = "Emits `TipSent` on every tip transfer."]
                pub struct PayTips {
                    pub tips: pay_tips::Tips,
                }
                pub mod pay_tips {
                    use super::runtime_types;
                    pub type Tips = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nfts::types::ItemTip<
                            runtime_types::runtime_common::IncrementableU256,
                            ::core::primitive::u128,
                            runtime_types::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PayTips {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "pay_tips";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register a new atomic swap, declaring an intention to send an `item` in exchange for"]
                #[doc = "`desired_item` from origin to target on the current blockchain."]
                #[doc = "The target can execute the swap during the specified `duration` of blocks (if set)."]
                #[doc = "Additionally, the price could be set for the desired `item`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item an owner wants to give."]
                #[doc = "- `desired_collection`: The collection of the desired item."]
                #[doc = "- `desired_item`: The desired item an owner wants to receive."]
                #[doc = "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`."]
                #[doc = "- `duration`: A deadline for the swap. Specified by providing the number of blocks"]
                #[doc = "\tafter which the swap will expire."]
                #[doc = ""]
                #[doc = "Emits `SwapCreated` on success."]
                pub struct CreateSwap {
                    pub offered_collection: create_swap::OfferedCollection,
                    pub offered_item: create_swap::OfferedItem,
                    pub desired_collection: create_swap::DesiredCollection,
                    pub maybe_desired_item: create_swap::MaybeDesiredItem,
                    pub maybe_price: create_swap::MaybePrice,
                    pub duration: create_swap::Duration,
                }
                pub mod create_swap {
                    use super::runtime_types;
                    pub type OfferedCollection = runtime_types::runtime_common::IncrementableU256;
                    pub type OfferedItem = ::core::primitive::u128;
                    pub type DesiredCollection = runtime_types::runtime_common::IncrementableU256;
                    pub type MaybeDesiredItem = ::core::option::Option<::core::primitive::u128>;
                    pub type MaybePrice = ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Duration = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreateSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "create_swap";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel an atomic swap."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = "Origin must be an owner of the `item` if the deadline hasn't expired."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item an owner wants to give."]
                #[doc = ""]
                #[doc = "Emits `SwapCancelled` on success."]
                pub struct CancelSwap {
                    pub offered_collection: cancel_swap::OfferedCollection,
                    pub offered_item: cancel_swap::OfferedItem,
                }
                pub mod cancel_swap {
                    use super::runtime_types;
                    pub type OfferedCollection = runtime_types::runtime_common::IncrementableU256;
                    pub type OfferedItem = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_swap";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claim an atomic swap."]
                #[doc = "This method executes a pending swap, that was created by a counterpart before."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `send_collection`: The collection of the item to be sent."]
                #[doc = "- `send_item`: The item to be sent."]
                #[doc = "- `receive_collection`: The collection of the item to be received."]
                #[doc = "- `receive_item`: The item to be received."]
                #[doc = "- `witness_price`: A price that was previously agreed on."]
                #[doc = ""]
                #[doc = "Emits `SwapClaimed` on success."]
                pub struct ClaimSwap {
                    pub send_collection: claim_swap::SendCollection,
                    pub send_item: claim_swap::SendItem,
                    pub receive_collection: claim_swap::ReceiveCollection,
                    pub receive_item: claim_swap::ReceiveItem,
                    pub witness_price: claim_swap::WitnessPrice,
                }
                pub mod claim_swap {
                    use super::runtime_types;
                    pub type SendCollection = runtime_types::runtime_common::IncrementableU256;
                    pub type SendItem = ::core::primitive::u128;
                    pub type ReceiveCollection = runtime_types::runtime_common::IncrementableU256;
                    pub type ReceiveItem = ::core::primitive::u128;
                    pub type WitnessPrice = ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "claim_swap";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Mint an item by providing the pre-signed approval."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `mint_data`: The pre-signed approval that consists of the information about the item,"]
                #[doc = "  its metadata, attributes, who can mint it (`None` for anyone) and until what block"]
                #[doc = "  number."]
                #[doc = "- `signature`: The signature of the `data` object."]
                #[doc = "- `signer`: The `data` object's signer. Should be an Issuer of the collection."]
                #[doc = ""]
                #[doc = "Emits `Issued` on success."]
                #[doc = "Emits `AttributeSet` if the attributes were provided."]
                #[doc = "Emits `ItemMetadataSet` if the metadata was not empty."]
                pub struct MintPreSigned {
                    pub mint_data:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<mint_pre_signed::MintData>,
                    pub signature: mint_pre_signed::Signature,
                    pub signer: mint_pre_signed::Signer,
                }
                pub mod mint_pre_signed {
                    use super::runtime_types;
                    pub type MintData = runtime_types::pallet_nfts::types::PreSignedMint<
                        runtime_types::runtime_common::IncrementableU256,
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >;
                    pub type Signature = runtime_types::account::EthereumSignature;
                    pub type Signer = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintPreSigned {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "mint_pre_signed";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set attributes for an item by providing the pre-signed approval."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `data.item`."]
                #[doc = ""]
                #[doc = "- `data`: The pre-signed approval that consists of the information about the item,"]
                #[doc = "  attributes to update and until what block number."]
                #[doc = "- `signature`: The signature of the `data` object."]
                #[doc = "- `signer`: The `data` object's signer. Should be an Admin of the collection for the"]
                #[doc = "  `CollectionOwner` namespace."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet` for each provided attribute."]
                #[doc = "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before."]
                #[doc = "Emits `PreSignedAttributesSet` on success."]
                pub struct SetAttributesPreSigned {
                    pub data: set_attributes_pre_signed::Data,
                    pub signature: set_attributes_pre_signed::Signature,
                    pub signer: set_attributes_pre_signed::Signer,
                }
                pub mod set_attributes_pre_signed {
                    use super::runtime_types;
                    pub type Data = runtime_types::pallet_nfts::types::PreSignedAttributes<
                        runtime_types::runtime_common::IncrementableU256,
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >;
                    pub type Signature = runtime_types::account::EthereumSignature;
                    pub type Signer = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetAttributesPreSigned {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_attributes_pre_signed";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Issue a new collection of non-fungible items from a public origin."]
                #[doc = ""]
                #[doc = "This new collection has no items initially and its owner is the origin."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
                #[doc = ""]
                #[doc = "`CollectionDeposit` funds of sender are reserved."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `admin`: The admin of this collection. The admin is the initial address of each"]
                #[doc = "member of the collection's admin team."]
                #[doc = ""]
                #[doc = "Emits `Created` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn create(
                    &self,
                    admin: types::create::Admin,
                    config: types::create::Config,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Create>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "create",
                        types::Create { admin, config },
                        [
                            19u8, 21u8, 9u8, 230u8, 243u8, 226u8, 205u8, 242u8, 30u8, 2u8, 254u8,
                            78u8, 223u8, 175u8, 69u8, 135u8, 36u8, 41u8, 128u8, 202u8, 119u8, 12u8,
                            83u8, 137u8, 13u8, 252u8, 19u8, 69u8, 246u8, 43u8, 82u8, 239u8,
                        ],
                    )
                }
                #[doc = "Issue a new collection of non-fungible items from a privileged origin."]
                #[doc = ""]
                #[doc = "This new collection has no items initially."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin`."]
                #[doc = ""]
                #[doc = "Unlike `create`, no funds are reserved."]
                #[doc = ""]
                #[doc = "- `owner`: The owner of this collection of items. The owner has full superuser"]
                #[doc = "  permissions over this item, but may later change and configure the permissions using"]
                #[doc = "  `transfer_ownership` and `set_team`."]
                #[doc = ""]
                #[doc = "Emits `ForceCreated` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_create(
                    &self,
                    owner: types::force_create::Owner,
                    config: types::force_create::Config,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceCreate>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "force_create",
                        types::ForceCreate { owner, config },
                        [
                            42u8, 183u8, 97u8, 236u8, 206u8, 29u8, 46u8, 148u8, 179u8, 62u8, 43u8,
                            230u8, 205u8, 165u8, 29u8, 230u8, 144u8, 209u8, 150u8, 222u8, 165u8,
                            239u8, 34u8, 118u8, 32u8, 20u8, 155u8, 2u8, 64u8, 190u8, 73u8, 41u8,
                        ],
                    )
                }
                #[doc = "Destroy a collection of fungible items."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                #[doc = "owner of the `collection`."]
                #[doc = ""]
                #[doc = "NOTE: The collection must have 0 items to be destroyed."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to be destroyed."]
                #[doc = "- `witness`: Information on the items minted in the collection. This must be"]
                #[doc = "correct."]
                #[doc = ""]
                #[doc = "Emits `Destroyed` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(m + c + a)` where:"]
                #[doc = "- `m = witness.item_metadatas`"]
                #[doc = "- `c = witness.item_configs`"]
                #[doc = "- `a = witness.attributes`"]
                pub fn destroy(
                    &self,
                    collection: types::destroy::Collection,
                    witness: types::destroy::Witness,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Destroy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "destroy",
                        types::Destroy {
                            collection,
                            witness,
                        },
                        [
                            189u8, 50u8, 238u8, 80u8, 72u8, 254u8, 149u8, 248u8, 219u8, 238u8,
                            21u8, 183u8, 52u8, 84u8, 123u8, 165u8, 236u8, 92u8, 49u8, 42u8, 40u8,
                            168u8, 244u8, 91u8, 121u8, 175u8, 4u8, 76u8, 240u8, 40u8, 246u8, 221u8,
                        ],
                    )
                }
                #[doc = "Mint an item of a particular collection."]
                #[doc = ""]
                #[doc = "The origin must be Signed and the sender must comply with the `mint_settings` rules."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be minted."]
                #[doc = "- `maybe_item`: An identifier of the new item. If the collection mints serially, this should be `None`."]
                #[doc = "- `mint_to`: Account into which the item will be minted."]
                #[doc = "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned"]
                #[doc = "  item_id from that collection needs to be provided within the witness data object. If"]
                #[doc = "  the mint price is set, then it should be additionally confirmed in the `witness_data`."]
                #[doc = ""]
                #[doc = "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn mint(
                    &self,
                    collection: types::mint::Collection,
                    maybe_item: types::mint::MaybeItem,
                    mint_to: types::mint::MintTo,
                    witness_data: types::mint::WitnessData,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Mint>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "mint",
                        types::Mint {
                            collection,
                            maybe_item,
                            mint_to,
                            witness_data,
                        },
                        [
                            160u8, 39u8, 163u8, 116u8, 86u8, 10u8, 175u8, 208u8, 8u8, 102u8, 31u8,
                            133u8, 155u8, 114u8, 159u8, 99u8, 100u8, 215u8, 148u8, 65u8, 236u8,
                            200u8, 56u8, 53u8, 11u8, 76u8, 94u8, 91u8, 3u8, 101u8, 9u8, 44u8,
                        ],
                    )
                }
                #[doc = "Mint an item of a particular collection from a privileged origin."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                #[doc = "Issuer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be minted."]
                #[doc = "- `maybe_item`: An identifier of the new item."]
                #[doc = "- `mint_to`: Account into which the item will be minted."]
                #[doc = "- `item_config`: A config of the new item."]
                #[doc = ""]
                #[doc = "Emits `Issued` event when successful."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_mint(
                    &self,
                    collection: types::force_mint::Collection,
                    maybe_item: types::force_mint::MaybeItem,
                    mint_to: types::force_mint::MintTo,
                    item_config: types::force_mint::ItemConfig,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceMint>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "force_mint",
                        types::ForceMint {
                            collection,
                            maybe_item,
                            mint_to,
                            item_config,
                        },
                        [
                            237u8, 89u8, 66u8, 108u8, 245u8, 173u8, 76u8, 156u8, 168u8, 215u8,
                            50u8, 135u8, 86u8, 165u8, 99u8, 140u8, 68u8, 128u8, 135u8, 86u8, 11u8,
                            148u8, 124u8, 220u8, 26u8, 4u8, 22u8, 247u8, 21u8, 60u8, 231u8, 80u8,
                        ],
                    )
                }
                #[doc = "Destroy a single item."]
                #[doc = ""]
                #[doc = "The origin must conform to `ForceOrigin` or must be Signed and the signing account must"]
                #[doc = "be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be burned."]
                #[doc = "- `item`: The item to be burned."]
                #[doc = ""]
                #[doc = "Emits `Burned`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn burn(
                    &self,
                    collection: types::burn::Collection,
                    item: types::burn::Item,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Burn>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "burn",
                        types::Burn { collection, item },
                        [
                            1u8, 240u8, 229u8, 22u8, 135u8, 238u8, 96u8, 102u8, 135u8, 131u8,
                            105u8, 195u8, 188u8, 178u8, 224u8, 148u8, 161u8, 122u8, 221u8, 219u8,
                            201u8, 232u8, 217u8, 196u8, 139u8, 203u8, 103u8, 67u8, 14u8, 83u8,
                            185u8, 156u8,
                        ],
                    )
                }
                #[doc = "Move an item from the sender account to another."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the signing account must be either:"]
                #[doc = "- the Owner of the `item`;"]
                #[doc = "- the approved delegate for the `item` (in this case, the approval is reset)."]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item to be transferred."]
                #[doc = "- `item`: The item to be transferred."]
                #[doc = "- `dest`: The account to receive ownership of the item."]
                #[doc = ""]
                #[doc = "Emits `Transferred`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer(
                    &self,
                    collection: types::transfer::Collection,
                    item: types::transfer::Item,
                    dest: types::transfer::Dest,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "transfer",
                        types::Transfer {
                            collection,
                            item,
                            dest,
                        },
                        [
                            11u8, 91u8, 36u8, 82u8, 109u8, 191u8, 51u8, 36u8, 18u8, 41u8, 12u8,
                            242u8, 124u8, 55u8, 131u8, 69u8, 152u8, 80u8, 21u8, 209u8, 182u8,
                            129u8, 113u8, 42u8, 84u8, 157u8, 112u8, 142u8, 52u8, 121u8, 131u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "Re-evaluate the deposits on some items."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the items to be reevaluated."]
                #[doc = "- `items`: The items of the collection whose deposits will be reevaluated."]
                #[doc = ""]
                #[doc = "NOTE: This exists as a best-effort function. Any items which are unknown or"]
                #[doc = "in the case that the owner account does not have reservable funds to pay for a"]
                #[doc = "deposit increase are ignored. Generally the owner isn't going to call this on items"]
                #[doc = "whose existing deposit is less than the refreshed deposit as it would only cost them,"]
                #[doc = "so it's of little consequence."]
                #[doc = ""]
                #[doc = "It will still return an error in the case that the collection is unknown or the signer"]
                #[doc = "is not permitted to call it."]
                #[doc = ""]
                #[doc = "Weight: `O(items.len())`"]
                pub fn redeposit(
                    &self,
                    collection: types::redeposit::Collection,
                    items: types::redeposit::Items,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Redeposit>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "redeposit",
                        types::Redeposit { collection, items },
                        [
                            133u8, 70u8, 169u8, 156u8, 117u8, 146u8, 217u8, 146u8, 15u8, 31u8,
                            45u8, 76u8, 203u8, 136u8, 145u8, 145u8, 26u8, 196u8, 81u8, 112u8, 49u8,
                            169u8, 59u8, 116u8, 46u8, 18u8, 8u8, 1u8, 31u8, 31u8, 194u8, 127u8,
                        ],
                    )
                }
                #[doc = "Disallow further unprivileged transfer of an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be changed."]
                #[doc = "- `item`: The item to become non-transferable."]
                #[doc = ""]
                #[doc = "Emits `ItemTransferLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn lock_item_transfer(
                    &self,
                    collection: types::lock_item_transfer::Collection,
                    item: types::lock_item_transfer::Item,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::LockItemTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "lock_item_transfer",
                        types::LockItemTransfer { collection, item },
                        [
                            179u8, 20u8, 1u8, 159u8, 16u8, 194u8, 103u8, 77u8, 180u8, 146u8, 59u8,
                            56u8, 175u8, 24u8, 194u8, 72u8, 92u8, 102u8, 124u8, 250u8, 157u8, 32u8,
                            57u8, 229u8, 93u8, 91u8, 142u8, 129u8, 90u8, 212u8, 100u8, 36u8,
                        ],
                    )
                }
                #[doc = "Re-allow unprivileged transfer of an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be changed."]
                #[doc = "- `item`: The item to become transferable."]
                #[doc = ""]
                #[doc = "Emits `ItemTransferUnlocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn unlock_item_transfer(
                    &self,
                    collection: types::unlock_item_transfer::Collection,
                    item: types::unlock_item_transfer::Item,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnlockItemTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "unlock_item_transfer",
                        types::UnlockItemTransfer { collection, item },
                        [
                            247u8, 49u8, 66u8, 135u8, 14u8, 146u8, 74u8, 89u8, 158u8, 27u8, 111u8,
                            176u8, 45u8, 101u8, 48u8, 104u8, 34u8, 3u8, 15u8, 95u8, 149u8, 100u8,
                            217u8, 235u8, 120u8, 180u8, 220u8, 42u8, 142u8, 142u8, 85u8, 193u8,
                        ],
                    )
                }
                #[doc = "Disallows specified settings for the whole collection."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection to be locked."]
                #[doc = "- `lock_settings`: The settings to be locked."]
                #[doc = ""]
                #[doc = "Note: it's possible to only lock(set) the setting, but not to unset it."]
                #[doc = ""]
                #[doc = "Emits `CollectionLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn lock_collection(
                    &self,
                    collection: types::lock_collection::Collection,
                    lock_settings: types::lock_collection::LockSettings,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::LockCollection>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "lock_collection",
                        types::LockCollection {
                            collection,
                            lock_settings,
                        },
                        [
                            207u8, 226u8, 6u8, 81u8, 226u8, 32u8, 136u8, 67u8, 122u8, 69u8, 85u8,
                            242u8, 133u8, 138u8, 217u8, 116u8, 171u8, 241u8, 236u8, 214u8, 68u8,
                            97u8, 89u8, 246u8, 41u8, 30u8, 92u8, 63u8, 150u8, 59u8, 31u8, 252u8,
                        ],
                    )
                }
                #[doc = "Change the Owner of a collection."]
                #[doc = ""]
                #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection whose owner should be changed."]
                #[doc = "- `owner`: The new Owner of this collection. They must have called"]
                #[doc = "  `set_accept_ownership` with `collection` in order for this operation to succeed."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn transfer_ownership(
                    &self,
                    collection: types::transfer_ownership::Collection,
                    new_owner: types::transfer_ownership::NewOwner,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferOwnership>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "transfer_ownership",
                        types::TransferOwnership {
                            collection,
                            new_owner,
                        },
                        [
                            133u8, 159u8, 244u8, 202u8, 1u8, 167u8, 63u8, 74u8, 219u8, 148u8, 3u8,
                            39u8, 18u8, 212u8, 120u8, 134u8, 60u8, 189u8, 72u8, 139u8, 10u8, 11u8,
                            91u8, 62u8, 77u8, 113u8, 3u8, 23u8, 48u8, 32u8, 84u8, 1u8,
                        ],
                    )
                }
                #[doc = "Change the Issuer, Admin and Freezer of a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it"]
                #[doc = "after to `Some(account)`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection whose team should be changed."]
                #[doc = "- `issuer`: The new Issuer of this collection."]
                #[doc = "- `admin`: The new Admin of this collection."]
                #[doc = "- `freezer`: The new Freezer of this collection."]
                #[doc = ""]
                #[doc = "Emits `TeamChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_team(
                    &self,
                    collection: types::set_team::Collection,
                    issuer: types::set_team::Issuer,
                    admin: types::set_team::Admin,
                    freezer: types::set_team::Freezer,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetTeam>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_team",
                        types::SetTeam {
                            collection,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            66u8, 255u8, 249u8, 153u8, 205u8, 193u8, 235u8, 165u8, 72u8, 139u8,
                            25u8, 133u8, 246u8, 196u8, 250u8, 250u8, 251u8, 27u8, 251u8, 251u8,
                            67u8, 237u8, 218u8, 226u8, 85u8, 48u8, 80u8, 181u8, 149u8, 106u8, 75u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Change the Owner of a collection."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection."]
                #[doc = "- `owner`: The new Owner of this collection."]
                #[doc = ""]
                #[doc = "Emits `OwnerChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_collection_owner(
                    &self,
                    collection: types::force_collection_owner::Collection,
                    owner: types::force_collection_owner::Owner,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceCollectionOwner>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "force_collection_owner",
                        types::ForceCollectionOwner { collection, owner },
                        [
                            59u8, 144u8, 41u8, 0u8, 78u8, 47u8, 119u8, 66u8, 39u8, 203u8, 243u8,
                            235u8, 73u8, 2u8, 205u8, 229u8, 86u8, 3u8, 197u8, 197u8, 99u8, 249u8,
                            247u8, 242u8, 20u8, 153u8, 111u8, 178u8, 139u8, 137u8, 101u8, 61u8,
                        ],
                    )
                }
                #[doc = "Change the config of a collection."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection."]
                #[doc = "- `config`: The new config of this collection."]
                #[doc = ""]
                #[doc = "Emits `CollectionConfigChanged`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_collection_config(
                    &self,
                    collection: types::force_collection_config::Collection,
                    config: types::force_collection_config::Config,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceCollectionConfig,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "force_collection_config",
                        types::ForceCollectionConfig { collection, config },
                        [
                            72u8, 211u8, 190u8, 168u8, 48u8, 161u8, 61u8, 209u8, 93u8, 128u8,
                            103u8, 83u8, 60u8, 196u8, 30u8, 3u8, 137u8, 103u8, 245u8, 67u8, 204u8,
                            147u8, 3u8, 234u8, 209u8, 219u8, 91u8, 205u8, 98u8, 18u8, 0u8, 23u8,
                        ],
                    )
                }
                #[doc = "Approve an item to be transferred by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "`item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item to be approved for delegated transfer."]
                #[doc = "- `item`: The item to be approved for delegated transfer."]
                #[doc = "- `delegate`: The account to delegate permission to transfer the item."]
                #[doc = "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the"]
                #[doc = "\tnumber of blocks after which the approval will expire"]
                #[doc = ""]
                #[doc = "Emits `TransferApproved` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn approve_transfer(
                    &self,
                    collection: types::approve_transfer::Collection,
                    item: types::approve_transfer::Item,
                    delegate: types::approve_transfer::Delegate,
                    maybe_deadline: types::approve_transfer::MaybeDeadline,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "approve_transfer",
                        types::ApproveTransfer {
                            collection,
                            item,
                            delegate,
                            maybe_deadline,
                        },
                        [
                            31u8, 39u8, 255u8, 247u8, 92u8, 242u8, 244u8, 34u8, 112u8, 143u8,
                            151u8, 213u8, 139u8, 155u8, 62u8, 94u8, 157u8, 159u8, 104u8, 88u8,
                            161u8, 83u8, 99u8, 66u8, 130u8, 227u8, 73u8, 181u8, 187u8, 31u8, 218u8,
                            111u8,
                        ],
                    )
                }
                #[doc = "Cancel one of the transfer approvals for a specific item."]
                #[doc = ""]
                #[doc = "Origin must be either:"]
                #[doc = "- the `Force` origin;"]
                #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item of whose approval will be cancelled."]
                #[doc = "- `item`: The item of the collection of whose approval will be cancelled."]
                #[doc = "- `delegate`: The account that is going to loose their approval."]
                #[doc = ""]
                #[doc = "Emits `ApprovalCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn cancel_approval(
                    &self,
                    collection: types::cancel_approval::Collection,
                    item: types::cancel_approval::Item,
                    delegate: types::cancel_approval::Delegate,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelApproval>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "cancel_approval",
                        types::CancelApproval {
                            collection,
                            item,
                            delegate,
                        },
                        [
                            170u8, 212u8, 19u8, 51u8, 219u8, 80u8, 115u8, 172u8, 121u8, 99u8,
                            158u8, 203u8, 60u8, 239u8, 109u8, 226u8, 51u8, 97u8, 124u8, 57u8, 26u8,
                            118u8, 34u8, 254u8, 71u8, 140u8, 49u8, 65u8, 227u8, 49u8, 71u8, 181u8,
                        ],
                    )
                }
                #[doc = "Cancel all the approvals of a specific item."]
                #[doc = ""]
                #[doc = "Origin must be either:"]
                #[doc = "- the `Force` origin;"]
                #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                #[doc = ""]
                #[doc = "Arguments:"]
                #[doc = "- `collection`: The collection of the item of whose approvals will be cleared."]
                #[doc = "- `item`: The item of the collection of whose approvals will be cleared."]
                #[doc = ""]
                #[doc = "Emits `AllApprovalsCancelled` on success."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_all_transfer_approvals(
                    &self,
                    collection: types::clear_all_transfer_approvals::Collection,
                    item: types::clear_all_transfer_approvals::Item,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ClearAllTransferApprovals,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "clear_all_transfer_approvals",
                        types::ClearAllTransferApprovals { collection, item },
                        [
                            124u8, 26u8, 108u8, 107u8, 129u8, 207u8, 167u8, 121u8, 248u8, 217u8,
                            140u8, 222u8, 41u8, 112u8, 222u8, 143u8, 158u8, 165u8, 246u8, 246u8,
                            197u8, 215u8, 95u8, 31u8, 142u8, 26u8, 216u8, 94u8, 63u8, 153u8, 222u8,
                            0u8,
                        ],
                    )
                }
                #[doc = "Disallows changing the metadata or attributes of the item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin"]
                #[doc = "of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection if the `item`."]
                #[doc = "- `item`: An item to be locked."]
                #[doc = "- `lock_metadata`: Specifies whether the metadata should be locked."]
                #[doc = "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace"]
                #[doc = "  should be locked."]
                #[doc = ""]
                #[doc = "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only."]
                #[doc = "When the metadata or attributes are locked, it won't be possible the unlock them."]
                #[doc = ""]
                #[doc = "Emits `ItemPropertiesLocked`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn lock_item_properties(
                    &self,
                    collection: types::lock_item_properties::Collection,
                    item: types::lock_item_properties::Item,
                    lock_metadata: types::lock_item_properties::LockMetadata,
                    lock_attributes: types::lock_item_properties::LockAttributes,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::LockItemProperties>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "lock_item_properties",
                        types::LockItemProperties {
                            collection,
                            item,
                            lock_metadata,
                            lock_attributes,
                        },
                        [
                            3u8, 224u8, 57u8, 149u8, 241u8, 172u8, 122u8, 216u8, 11u8, 81u8, 87u8,
                            41u8, 194u8, 101u8, 212u8, 170u8, 169u8, 84u8, 58u8, 244u8, 12u8,
                            229u8, 154u8, 26u8, 19u8, 253u8, 250u8, 78u8, 119u8, 46u8, 180u8,
                            214u8,
                        ],
                    )
                }
                #[doc = "Set an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must conform to the namespace ruleset:"]
                #[doc = "- `CollectionOwner` namespace could be modified by the `collection` Admin only;"]
                #[doc = "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`"]
                #[doc = "  should be set in that case;"]
                #[doc = "- `Account(AccountId)` namespace could be modified only when the `origin` was given a"]
                #[doc = "  permission to do so;"]
                #[doc = ""]
                #[doc = "The funds of `origin` are reserved according to the formula:"]
                #[doc = "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = "- `value`: The value to which to set the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_attribute(
                    &self,
                    collection: types::set_attribute::Collection,
                    maybe_item: types::set_attribute::MaybeItem,
                    namespace: types::set_attribute::Namespace,
                    key: types::set_attribute::Key,
                    value: types::set_attribute::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetAttribute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_attribute",
                        types::SetAttribute {
                            collection,
                            maybe_item,
                            namespace,
                            key,
                            value,
                        },
                        [
                            210u8, 145u8, 102u8, 226u8, 82u8, 98u8, 239u8, 157u8, 1u8, 91u8, 93u8,
                            196u8, 84u8, 32u8, 210u8, 112u8, 124u8, 248u8, 199u8, 90u8, 242u8,
                            213u8, 199u8, 66u8, 254u8, 87u8, 50u8, 180u8, 1u8, 139u8, 54u8, 17u8,
                        ],
                    )
                }
                #[doc = "Force-set an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be `ForceOrigin`."]
                #[doc = ""]
                #[doc = "If the attribute already exists and it was set by another account, the deposit"]
                #[doc = "will be returned to the previous owner."]
                #[doc = ""]
                #[doc = "- `set_as`: An optional owner of the attribute."]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = "- `value`: The value to which to set the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn force_set_attribute(
                    &self,
                    set_as: types::force_set_attribute::SetAs,
                    collection: types::force_set_attribute::Collection,
                    maybe_item: types::force_set_attribute::MaybeItem,
                    namespace: types::force_set_attribute::Namespace,
                    key: types::force_set_attribute::Key,
                    value: types::force_set_attribute::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetAttribute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "force_set_attribute",
                        types::ForceSetAttribute {
                            set_as,
                            collection,
                            maybe_item,
                            namespace,
                            key,
                            value,
                        },
                        [
                            18u8, 168u8, 82u8, 41u8, 31u8, 186u8, 148u8, 67u8, 203u8, 87u8, 24u8,
                            53u8, 94u8, 59u8, 193u8, 86u8, 103u8, 104u8, 45u8, 127u8, 22u8, 46u8,
                            15u8, 92u8, 84u8, 162u8, 100u8, 128u8, 144u8, 183u8, 204u8, 234u8,
                        ],
                    )
                }
                #[doc = "Clear an attribute for a collection or item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                #[doc = "attribute."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                #[doc = "- `maybe_item`: The identifier of the item whose metadata to clear."]
                #[doc = "- `namespace`: Attribute's namespace."]
                #[doc = "- `key`: The key of the attribute."]
                #[doc = ""]
                #[doc = "Emits `AttributeCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_attribute(
                    &self,
                    collection: types::clear_attribute::Collection,
                    maybe_item: types::clear_attribute::MaybeItem,
                    namespace: types::clear_attribute::Namespace,
                    key: types::clear_attribute::Key,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearAttribute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "clear_attribute",
                        types::ClearAttribute {
                            collection,
                            maybe_item,
                            namespace,
                            key,
                        },
                        [
                            224u8, 246u8, 61u8, 149u8, 48u8, 179u8, 150u8, 171u8, 121u8, 126u8,
                            67u8, 28u8, 66u8, 157u8, 144u8, 245u8, 242u8, 58u8, 137u8, 61u8, 160u8,
                            18u8, 188u8, 55u8, 21u8, 85u8, 247u8, 58u8, 15u8, 191u8, 74u8, 80u8,
                        ],
                    )
                }
                #[doc = "Approve item's attributes to be changed by a delegated third-party account."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: A collection of the item."]
                #[doc = "- `item`: The item that holds attributes."]
                #[doc = "- `delegate`: The account to delegate permission to change attributes of the item."]
                #[doc = ""]
                #[doc = "Emits `ItemAttributesApprovalAdded` on success."]
                pub fn approve_item_attributes(
                    &self,
                    collection: types::approve_item_attributes::Collection,
                    item: types::approve_item_attributes::Item,
                    delegate: types::approve_item_attributes::Delegate,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ApproveItemAttributes,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "approve_item_attributes",
                        types::ApproveItemAttributes {
                            collection,
                            item,
                            delegate,
                        },
                        [
                            243u8, 87u8, 170u8, 139u8, 207u8, 82u8, 21u8, 106u8, 15u8, 240u8,
                            139u8, 19u8, 151u8, 138u8, 15u8, 96u8, 70u8, 131u8, 100u8, 136u8, 86u8,
                            40u8, 166u8, 150u8, 184u8, 148u8, 18u8, 49u8, 180u8, 157u8, 156u8,
                            135u8,
                        ],
                    )
                }
                #[doc = "Cancel the previously provided approval to change item's attributes."]
                #[doc = "All the previously set attributes by the `delegate` will be removed."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: Collection that the item is contained within."]
                #[doc = "- `item`: The item that holds attributes."]
                #[doc = "- `delegate`: The previously approved account to remove."]
                #[doc = ""]
                #[doc = "Emits `ItemAttributesApprovalRemoved` on success."]
                pub fn cancel_item_attributes_approval(
                    &self,
                    collection: types::cancel_item_attributes_approval::Collection,
                    item: types::cancel_item_attributes_approval::Item,
                    delegate: types::cancel_item_attributes_approval::Delegate,
                    witness: types::cancel_item_attributes_approval::Witness,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CancelItemAttributesApproval,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "cancel_item_attributes_approval",
                        types::CancelItemAttributesApproval {
                            collection,
                            item,
                            delegate,
                            witness,
                        },
                        [
                            216u8, 201u8, 30u8, 71u8, 251u8, 206u8, 222u8, 209u8, 7u8, 217u8,
                            195u8, 25u8, 111u8, 193u8, 24u8, 125u8, 65u8, 206u8, 78u8, 85u8, 248u8,
                            143u8, 109u8, 179u8, 24u8, 155u8, 92u8, 54u8, 60u8, 23u8, 195u8, 104u8,
                        ],
                    )
                }
                #[doc = "Set the metadata for an item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "If the origin is Signed, then funds of signer are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                #[doc = "- `item`: The identifier of the item whose metadata to set."]
                #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                #[doc = ""]
                #[doc = "Emits `ItemMetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_metadata(
                    &self,
                    collection: types::set_metadata::Collection,
                    item: types::set_metadata::Item,
                    data: types::set_metadata::Data,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMetadata>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_metadata",
                        types::SetMetadata {
                            collection,
                            item,
                            data,
                        },
                        [
                            113u8, 125u8, 56u8, 25u8, 58u8, 81u8, 202u8, 38u8, 77u8, 196u8, 82u8,
                            82u8, 254u8, 30u8, 125u8, 98u8, 53u8, 79u8, 159u8, 126u8, 13u8, 102u8,
                            124u8, 18u8, 39u8, 199u8, 217u8, 71u8, 187u8, 195u8, 58u8, 229u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for an item."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                #[doc = "`collection`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                #[doc = "- `item`: The identifier of the item whose metadata to clear."]
                #[doc = ""]
                #[doc = "Emits `ItemMetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_metadata(
                    &self,
                    collection: types::clear_metadata::Collection,
                    item: types::clear_metadata::Item,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearMetadata>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "clear_metadata",
                        types::ClearMetadata { collection, item },
                        [
                            217u8, 181u8, 101u8, 41u8, 82u8, 27u8, 208u8, 78u8, 205u8, 181u8,
                            119u8, 122u8, 189u8, 190u8, 102u8, 122u8, 124u8, 78u8, 82u8, 104u8,
                            220u8, 116u8, 233u8, 220u8, 99u8, 213u8, 165u8, 182u8, 208u8, 85u8,
                            234u8, 171u8,
                        ],
                    )
                }
                #[doc = "Set the metadata for a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "If the origin is `Signed`, then funds of signer are reserved according to the formula:"]
                #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                #[doc = "account any already reserved funds."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the item whose metadata to update."]
                #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                #[doc = ""]
                #[doc = "Emits `CollectionMetadataSet`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn set_collection_metadata(
                    &self,
                    collection: types::set_collection_metadata::Collection,
                    data: types::set_collection_metadata::Data,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetCollectionMetadata,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_collection_metadata",
                        types::SetCollectionMetadata { collection, data },
                        [
                            101u8, 106u8, 80u8, 7u8, 47u8, 150u8, 151u8, 17u8, 141u8, 231u8, 56u8,
                            120u8, 14u8, 163u8, 2u8, 82u8, 69u8, 107u8, 176u8, 249u8, 167u8, 85u8,
                            85u8, 16u8, 184u8, 154u8, 249u8, 12u8, 238u8, 35u8, 215u8, 181u8,
                        ],
                    )
                }
                #[doc = "Clear the metadata for a collection."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "Any deposit is freed for the collection's owner."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection whose metadata to clear."]
                #[doc = ""]
                #[doc = "Emits `CollectionMetadataCleared`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn clear_collection_metadata(
                    &self,
                    collection: types::clear_collection_metadata::Collection,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ClearCollectionMetadata,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "clear_collection_metadata",
                        types::ClearCollectionMetadata { collection },
                        [
                            175u8, 118u8, 28u8, 213u8, 230u8, 63u8, 65u8, 102u8, 213u8, 167u8,
                            132u8, 159u8, 100u8, 239u8, 160u8, 45u8, 196u8, 162u8, 232u8, 207u8,
                            134u8, 192u8, 2u8, 96u8, 51u8, 35u8, 30u8, 73u8, 123u8, 1u8, 131u8,
                            72u8,
                        ],
                    )
                }
                #[doc = "Set (or reset) the acceptance of ownership for a particular account."]
                #[doc = ""]
                #[doc = "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a"]
                #[doc = "provider reference."]
                #[doc = ""]
                #[doc = "- `maybe_collection`: The identifier of the collection whose ownership the signer is"]
                #[doc = "  willing to accept, or if `None`, an indication that the signer is willing to accept no"]
                #[doc = "  ownership transferal."]
                #[doc = ""]
                #[doc = "Emits `OwnershipAcceptanceChanged`."]
                pub fn set_accept_ownership(
                    &self,
                    maybe_collection: types::set_accept_ownership::MaybeCollection,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetAcceptOwnership>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_accept_ownership",
                        types::SetAcceptOwnership { maybe_collection },
                        [
                            146u8, 89u8, 13u8, 118u8, 88u8, 119u8, 74u8, 4u8, 203u8, 85u8, 88u8,
                            60u8, 169u8, 172u8, 205u8, 124u8, 107u8, 12u8, 18u8, 245u8, 106u8, 4u8,
                            91u8, 195u8, 111u8, 210u8, 244u8, 137u8, 232u8, 85u8, 90u8, 119u8,
                        ],
                    )
                }
                #[doc = "Set the maximum number of items a collection could have."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of"]
                #[doc = "the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to change."]
                #[doc = "- `max_supply`: The maximum number of items a collection could have."]
                #[doc = ""]
                #[doc = "Emits `CollectionMaxSupplySet` event when successful."]
                pub fn set_collection_max_supply(
                    &self,
                    collection: types::set_collection_max_supply::Collection,
                    max_supply: types::set_collection_max_supply::MaxSupply,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetCollectionMaxSupply,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_collection_max_supply",
                        types::SetCollectionMaxSupply {
                            collection,
                            max_supply,
                        },
                        [
                            87u8, 87u8, 207u8, 55u8, 213u8, 170u8, 93u8, 32u8, 25u8, 154u8, 230u8,
                            66u8, 193u8, 205u8, 150u8, 1u8, 85u8, 178u8, 140u8, 64u8, 64u8, 41u8,
                            178u8, 96u8, 43u8, 35u8, 168u8, 197u8, 127u8, 136u8, 158u8, 186u8,
                        ],
                    )
                }
                #[doc = "Update mint settings."]
                #[doc = ""]
                #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer"]
                #[doc = "of the `collection`."]
                #[doc = ""]
                #[doc = "- `collection`: The identifier of the collection to change."]
                #[doc = "- `mint_settings`: The new mint settings."]
                #[doc = ""]
                #[doc = "Emits `CollectionMintSettingsUpdated` event when successful."]
                pub fn update_mint_settings(
                    &self,
                    collection: types::update_mint_settings::Collection,
                    mint_settings: types::update_mint_settings::MintSettings,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateMintSettings>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "update_mint_settings",
                        types::UpdateMintSettings {
                            collection,
                            mint_settings,
                        },
                        [
                            96u8, 120u8, 64u8, 5u8, 140u8, 72u8, 230u8, 98u8, 7u8, 113u8, 234u8,
                            44u8, 204u8, 185u8, 19u8, 127u8, 129u8, 37u8, 12u8, 199u8, 236u8, 20u8,
                            70u8, 245u8, 126u8, 98u8, 174u8, 170u8, 7u8, 232u8, 40u8, 219u8,
                        ],
                    )
                }
                #[doc = "Set (or reset) the price for an item."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item to set the price for."]
                #[doc = "- `price`: The price for the item. Pass `None`, to reset the price."]
                #[doc = "- `buyer`: Restricts the buy operation to a specific account."]
                #[doc = ""]
                #[doc = "Emits `ItemPriceSet` on success if the price is not `None`."]
                #[doc = "Emits `ItemPriceRemoved` on success if the price is `None`."]
                pub fn set_price(
                    &self,
                    collection: types::set_price::Collection,
                    item: types::set_price::Item,
                    price: types::set_price::Price,
                    whitelisted_buyer: types::set_price::WhitelistedBuyer,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrice>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_price",
                        types::SetPrice {
                            collection,
                            item,
                            price,
                            whitelisted_buyer,
                        },
                        [
                            12u8, 24u8, 98u8, 48u8, 240u8, 107u8, 56u8, 1u8, 60u8, 107u8, 70u8,
                            196u8, 61u8, 108u8, 233u8, 33u8, 130u8, 8u8, 203u8, 79u8, 35u8, 124u8,
                            16u8, 56u8, 227u8, 142u8, 222u8, 220u8, 57u8, 253u8, 202u8, 96u8,
                        ],
                    )
                }
                #[doc = "Allows to buy an item if it's up for sale."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must not be the owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item the sender wants to buy."]
                #[doc = "- `bid_price`: The price the sender is willing to pay."]
                #[doc = ""]
                #[doc = "Emits `ItemBought` on success."]
                pub fn buy_item(
                    &self,
                    collection: types::buy_item::Collection,
                    item: types::buy_item::Item,
                    bid_price: types::buy_item::BidPrice,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BuyItem>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "buy_item",
                        types::BuyItem {
                            collection,
                            item,
                            bid_price,
                        },
                        [
                            87u8, 177u8, 221u8, 72u8, 128u8, 65u8, 187u8, 198u8, 166u8, 229u8,
                            242u8, 132u8, 130u8, 175u8, 104u8, 245u8, 36u8, 50u8, 71u8, 223u8,
                            82u8, 198u8, 106u8, 253u8, 29u8, 121u8, 12u8, 89u8, 207u8, 158u8,
                            124u8, 214u8,
                        ],
                    )
                }
                #[doc = "Allows to pay the tips."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `tips`: Tips array."]
                #[doc = ""]
                #[doc = "Emits `TipSent` on every tip transfer."]
                pub fn pay_tips(
                    &self,
                    tips: types::pay_tips::Tips,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PayTips>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "pay_tips",
                        types::PayTips { tips },
                        [
                            60u8, 231u8, 228u8, 185u8, 81u8, 244u8, 41u8, 44u8, 169u8, 125u8,
                            235u8, 221u8, 192u8, 168u8, 39u8, 66u8, 237u8, 24u8, 99u8, 181u8,
                            173u8, 106u8, 104u8, 158u8, 248u8, 144u8, 152u8, 107u8, 230u8, 177u8,
                            127u8, 225u8,
                        ],
                    )
                }
                #[doc = "Register a new atomic swap, declaring an intention to send an `item` in exchange for"]
                #[doc = "`desired_item` from origin to target on the current blockchain."]
                #[doc = "The target can execute the swap during the specified `duration` of blocks (if set)."]
                #[doc = "Additionally, the price could be set for the desired `item`."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item an owner wants to give."]
                #[doc = "- `desired_collection`: The collection of the desired item."]
                #[doc = "- `desired_item`: The desired item an owner wants to receive."]
                #[doc = "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`."]
                #[doc = "- `duration`: A deadline for the swap. Specified by providing the number of blocks"]
                #[doc = "\tafter which the swap will expire."]
                #[doc = ""]
                #[doc = "Emits `SwapCreated` on success."]
                pub fn create_swap(
                    &self,
                    offered_collection: types::create_swap::OfferedCollection,
                    offered_item: types::create_swap::OfferedItem,
                    desired_collection: types::create_swap::DesiredCollection,
                    maybe_desired_item: types::create_swap::MaybeDesiredItem,
                    maybe_price: types::create_swap::MaybePrice,
                    duration: types::create_swap::Duration,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreateSwap>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "create_swap",
                        types::CreateSwap {
                            offered_collection,
                            offered_item,
                            desired_collection,
                            maybe_desired_item,
                            maybe_price,
                            duration,
                        },
                        [
                            54u8, 47u8, 216u8, 198u8, 157u8, 204u8, 192u8, 45u8, 168u8, 97u8,
                            227u8, 235u8, 79u8, 152u8, 191u8, 219u8, 103u8, 189u8, 243u8, 189u8,
                            22u8, 107u8, 55u8, 35u8, 51u8, 45u8, 41u8, 91u8, 183u8, 182u8, 3u8,
                            80u8,
                        ],
                    )
                }
                #[doc = "Cancel an atomic swap."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = "Origin must be an owner of the `item` if the deadline hasn't expired."]
                #[doc = ""]
                #[doc = "- `collection`: The collection of the item."]
                #[doc = "- `item`: The item an owner wants to give."]
                #[doc = ""]
                #[doc = "Emits `SwapCancelled` on success."]
                pub fn cancel_swap(
                    &self,
                    offered_collection: types::cancel_swap::OfferedCollection,
                    offered_item: types::cancel_swap::OfferedItem,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelSwap>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "cancel_swap",
                        types::CancelSwap {
                            offered_collection,
                            offered_item,
                        },
                        [
                            246u8, 109u8, 1u8, 37u8, 160u8, 71u8, 0u8, 184u8, 88u8, 246u8, 223u8,
                            43u8, 56u8, 246u8, 53u8, 4u8, 231u8, 87u8, 186u8, 3u8, 225u8, 34u8,
                            42u8, 36u8, 25u8, 148u8, 104u8, 25u8, 40u8, 132u8, 202u8, 11u8,
                        ],
                    )
                }
                #[doc = "Claim an atomic swap."]
                #[doc = "This method executes a pending swap, that was created by a counterpart before."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `item`."]
                #[doc = ""]
                #[doc = "- `send_collection`: The collection of the item to be sent."]
                #[doc = "- `send_item`: The item to be sent."]
                #[doc = "- `receive_collection`: The collection of the item to be received."]
                #[doc = "- `receive_item`: The item to be received."]
                #[doc = "- `witness_price`: A price that was previously agreed on."]
                #[doc = ""]
                #[doc = "Emits `SwapClaimed` on success."]
                pub fn claim_swap(
                    &self,
                    send_collection: types::claim_swap::SendCollection,
                    send_item: types::claim_swap::SendItem,
                    receive_collection: types::claim_swap::ReceiveCollection,
                    receive_item: types::claim_swap::ReceiveItem,
                    witness_price: types::claim_swap::WitnessPrice,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimSwap>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "claim_swap",
                        types::ClaimSwap {
                            send_collection,
                            send_item,
                            receive_collection,
                            receive_item,
                            witness_price,
                        },
                        [
                            17u8, 195u8, 200u8, 128u8, 47u8, 255u8, 0u8, 33u8, 216u8, 105u8, 82u8,
                            232u8, 151u8, 20u8, 68u8, 229u8, 209u8, 113u8, 95u8, 101u8, 158u8,
                            154u8, 154u8, 18u8, 38u8, 197u8, 107u8, 89u8, 160u8, 87u8, 135u8,
                            246u8,
                        ],
                    )
                }
                #[doc = "Mint an item by providing the pre-signed approval."]
                #[doc = ""]
                #[doc = "Origin must be Signed."]
                #[doc = ""]
                #[doc = "- `mint_data`: The pre-signed approval that consists of the information about the item,"]
                #[doc = "  its metadata, attributes, who can mint it (`None` for anyone) and until what block"]
                #[doc = "  number."]
                #[doc = "- `signature`: The signature of the `data` object."]
                #[doc = "- `signer`: The `data` object's signer. Should be an Issuer of the collection."]
                #[doc = ""]
                #[doc = "Emits `Issued` on success."]
                #[doc = "Emits `AttributeSet` if the attributes were provided."]
                #[doc = "Emits `ItemMetadataSet` if the metadata was not empty."]
                pub fn mint_pre_signed(
                    &self,
                    mint_data: types::mint_pre_signed::MintData,
                    signature: types::mint_pre_signed::Signature,
                    signer: types::mint_pre_signed::Signer,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MintPreSigned>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "mint_pre_signed",
                        types::MintPreSigned {
                            mint_data: ::subxt::ext::subxt_core::alloc::boxed::Box::new(mint_data),
                            signature,
                            signer,
                        },
                        [
                            224u8, 246u8, 45u8, 7u8, 230u8, 201u8, 31u8, 81u8, 143u8, 28u8, 59u8,
                            216u8, 85u8, 239u8, 25u8, 244u8, 229u8, 209u8, 31u8, 69u8, 41u8, 254u8,
                            20u8, 90u8, 246u8, 119u8, 53u8, 15u8, 87u8, 50u8, 189u8, 188u8,
                        ],
                    )
                }
                #[doc = "Set attributes for an item by providing the pre-signed approval."]
                #[doc = ""]
                #[doc = "Origin must be Signed and must be an owner of the `data.item`."]
                #[doc = ""]
                #[doc = "- `data`: The pre-signed approval that consists of the information about the item,"]
                #[doc = "  attributes to update and until what block number."]
                #[doc = "- `signature`: The signature of the `data` object."]
                #[doc = "- `signer`: The `data` object's signer. Should be an Admin of the collection for the"]
                #[doc = "  `CollectionOwner` namespace."]
                #[doc = ""]
                #[doc = "Emits `AttributeSet` for each provided attribute."]
                #[doc = "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before."]
                #[doc = "Emits `PreSignedAttributesSet` on success."]
                pub fn set_attributes_pre_signed(
                    &self,
                    data: types::set_attributes_pre_signed::Data,
                    signature: types::set_attributes_pre_signed::Signature,
                    signer: types::set_attributes_pre_signed::Signer,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetAttributesPreSigned,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Nfts",
                        "set_attributes_pre_signed",
                        types::SetAttributesPreSigned {
                            data,
                            signature,
                            signer,
                        },
                        [
                            143u8, 130u8, 228u8, 194u8, 108u8, 153u8, 198u8, 72u8, 141u8, 254u8,
                            178u8, 184u8, 116u8, 206u8, 38u8, 232u8, 57u8, 179u8, 231u8, 178u8,
                            1u8, 153u8, 124u8, 255u8, 125u8, 180u8, 200u8, 187u8, 247u8, 239u8,
                            63u8, 27u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_nfts::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A `collection` was created."]
            pub struct Created {
                pub collection: created::Collection,
                pub creator: created::Creator,
                pub owner: created::Owner,
            }
            pub mod created {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Creator = runtime_types::account::AccountId20;
                pub type Owner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Created {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A `collection` was force-created."]
            pub struct ForceCreated {
                pub collection: force_created::Collection,
                pub owner: force_created::Owner,
            }
            pub mod force_created {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Owner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A `collection` was destroyed."]
            pub struct Destroyed {
                pub collection: destroyed::Collection,
            }
            pub mod destroyed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` was issued."]
            pub struct Issued {
                pub collection: issued::Collection,
                pub item: issued::Item,
                pub owner: issued::Owner,
            }
            pub mod issued {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Owner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` was transferred."]
            pub struct Transferred {
                pub collection: transferred::Collection,
                pub item: transferred::Item,
                pub from: transferred::From,
                pub to: transferred::To,
            }
            pub mod transferred {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type From = runtime_types::account::AccountId20;
                pub type To = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` was destroyed."]
            pub struct Burned {
                pub collection: burned::Collection,
                pub item: burned::Item,
                pub owner: burned::Owner,
            }
            pub mod burned {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Owner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Burned {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` became non-transferable."]
            pub struct ItemTransferLocked {
                pub collection: item_transfer_locked::Collection,
                pub item: item_transfer_locked::Item,
            }
            pub mod item_transfer_locked {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemTransferLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemTransferLocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` became transferable."]
            pub struct ItemTransferUnlocked {
                pub collection: item_transfer_unlocked::Collection,
                pub item: item_transfer_unlocked::Item,
            }
            pub mod item_transfer_unlocked {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemTransferUnlocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemTransferUnlocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "`item` metadata or attributes were locked."]
            pub struct ItemPropertiesLocked {
                pub collection: item_properties_locked::Collection,
                pub item: item_properties_locked::Item,
                pub lock_metadata: item_properties_locked::LockMetadata,
                pub lock_attributes: item_properties_locked::LockAttributes,
            }
            pub mod item_properties_locked {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type LockMetadata = ::core::primitive::bool;
                pub type LockAttributes = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemPropertiesLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPropertiesLocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some `collection` was locked."]
            pub struct CollectionLocked {
                pub collection: collection_locked::Collection,
            }
            pub mod collection_locked {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionLocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub collection: owner_changed::Collection,
                pub new_owner: owner_changed::NewOwner,
            }
            pub mod owner_changed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type NewOwner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub collection: team_changed::Collection,
                pub issuer: team_changed::Issuer,
                pub admin: team_changed::Admin,
                pub freezer: team_changed::Freezer,
            }
            pub mod team_changed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Issuer = ::core::option::Option<runtime_types::account::AccountId20>;
                pub type Admin = ::core::option::Option<runtime_types::account::AccountId20>;
                pub type Freezer = ::core::option::Option<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
            #[doc = "a `delegate`."]
            pub struct TransferApproved {
                pub collection: transfer_approved::Collection,
                pub item: transfer_approved::Item,
                pub owner: transfer_approved::Owner,
                pub delegate: transfer_approved::Delegate,
                pub deadline: transfer_approved::Deadline,
            }
            pub mod transfer_approved {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Owner = runtime_types::account::AccountId20;
                pub type Delegate = runtime_types::account::AccountId20;
                pub type Deadline = ::core::option::Option<::core::primitive::u32>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TransferApproved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TransferApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
            #[doc = "`collection` was cancelled by its `owner`."]
            pub struct ApprovalCancelled {
                pub collection: approval_cancelled::Collection,
                pub item: approval_cancelled::Item,
                pub owner: approval_cancelled::Owner,
                pub delegate: approval_cancelled::Delegate,
            }
            pub mod approval_cancelled {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Owner = runtime_types::account::AccountId20;
                pub type Delegate = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "All approvals of an item got cancelled."]
            pub struct AllApprovalsCancelled {
                pub collection: all_approvals_cancelled::Collection,
                pub item: all_approvals_cancelled::Item,
                pub owner: all_approvals_cancelled::Owner,
            }
            pub mod all_approvals_cancelled {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Owner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AllApprovalsCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AllApprovalsCancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A `collection` has had its config changed by the `Force` origin."]
            pub struct CollectionConfigChanged {
                pub collection: collection_config_changed::Collection,
            }
            pub mod collection_config_changed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionConfigChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionConfigChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New metadata has been set for a `collection`."]
            pub struct CollectionMetadataSet {
                pub collection: collection_metadata_set::Collection,
                pub data: collection_metadata_set::Data,
            }
            pub mod collection_metadata_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Data = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionMetadataSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMetadataSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for a `collection`."]
            pub struct CollectionMetadataCleared {
                pub collection: collection_metadata_cleared::Collection,
            }
            pub mod collection_metadata_cleared {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionMetadataCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an item."]
            pub struct ItemMetadataSet {
                pub collection: item_metadata_set::Collection,
                pub item: item_metadata_set::Item,
                pub data: item_metadata_set::Data,
            }
            pub mod item_metadata_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Data = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemMetadataSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemMetadataSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an item."]
            pub struct ItemMetadataCleared {
                pub collection: item_metadata_cleared::Collection,
                pub item: item_metadata_cleared::Item,
            }
            pub mod item_metadata_cleared {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemMetadataCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemMetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The deposit for a set of `item`s within a `collection` has been updated."]
            pub struct Redeposited {
                pub collection: redeposited::Collection,
                pub successful_items: redeposited::SuccessfulItems,
            }
            pub mod redeposited {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type SuccessfulItems =
                    ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u128>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Redeposited {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Redeposited";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New attribute metadata has been set for a `collection` or `item`."]
            pub struct AttributeSet {
                pub collection: attribute_set::Collection,
                pub maybe_item: attribute_set::MaybeItem,
                pub key: attribute_set::Key,
                pub value: attribute_set::Value,
                pub namespace: attribute_set::Namespace,
            }
            pub mod attribute_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                pub type Key = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
                pub type Value = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
                pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                    runtime_types::account::AccountId20,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AttributeSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AttributeSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
            pub struct AttributeCleared {
                pub collection: attribute_cleared::Collection,
                pub maybe_item: attribute_cleared::MaybeItem,
                pub key: attribute_cleared::Key,
                pub namespace: attribute_cleared::Namespace,
            }
            pub mod attribute_cleared {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type MaybeItem = ::core::option::Option<::core::primitive::u128>;
                pub type Key = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
                pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                    runtime_types::account::AccountId20,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AttributeCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AttributeCleared";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new approval to modify item attributes was added."]
            pub struct ItemAttributesApprovalAdded {
                pub collection: item_attributes_approval_added::Collection,
                pub item: item_attributes_approval_added::Item,
                pub delegate: item_attributes_approval_added::Delegate,
            }
            pub mod item_attributes_approval_added {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Delegate = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemAttributesApprovalAdded {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemAttributesApprovalAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new approval to modify item attributes was removed."]
            pub struct ItemAttributesApprovalRemoved {
                pub collection: item_attributes_approval_removed::Collection,
                pub item: item_attributes_approval_removed::Item,
                pub delegate: item_attributes_approval_removed::Delegate,
            }
            pub mod item_attributes_approval_removed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Delegate = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemAttributesApprovalRemoved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemAttributesApprovalRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Ownership acceptance has changed for an account."]
            pub struct OwnershipAcceptanceChanged {
                pub who: ownership_acceptance_changed::Who,
                pub maybe_collection: ownership_acceptance_changed::MaybeCollection,
            }
            pub mod ownership_acceptance_changed {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type MaybeCollection =
                    ::core::option::Option<runtime_types::runtime_common::IncrementableU256>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OwnershipAcceptanceChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "OwnershipAcceptanceChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Max supply has been set for a collection."]
            pub struct CollectionMaxSupplySet {
                pub collection: collection_max_supply_set::Collection,
                pub max_supply: collection_max_supply_set::MaxSupply,
            }
            pub mod collection_max_supply_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type MaxSupply = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionMaxSupplySet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMaxSupplySet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Mint settings for a collection had changed."]
            pub struct CollectionMintSettingsUpdated {
                pub collection: collection_mint_settings_updated::Collection,
            }
            pub mod collection_mint_settings_updated {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionMintSettingsUpdated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMintSettingsUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Event gets emitted when the `NextCollectionId` gets incremented."]
            pub struct NextCollectionIdIncremented {
                pub next_id: next_collection_id_incremented::NextId,
            }
            pub mod next_collection_id_incremented {
                use super::runtime_types;
                pub type NextId =
                    ::core::option::Option<runtime_types::runtime_common::IncrementableU256>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NextCollectionIdIncremented {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "NextCollectionIdIncremented";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The price was set for the item."]
            pub struct ItemPriceSet {
                pub collection: item_price_set::Collection,
                pub item: item_price_set::Item,
                pub price: item_price_set::Price,
                pub whitelisted_buyer: item_price_set::WhitelistedBuyer,
            }
            pub mod item_price_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Price = ::core::primitive::u128;
                pub type WhitelistedBuyer =
                    ::core::option::Option<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemPriceSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPriceSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The price for the item was removed."]
            pub struct ItemPriceRemoved {
                pub collection: item_price_removed::Collection,
                pub item: item_price_removed::Item,
            }
            pub mod item_price_removed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemPriceRemoved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPriceRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An item was bought."]
            pub struct ItemBought {
                pub collection: item_bought::Collection,
                pub item: item_bought::Item,
                pub price: item_bought::Price,
                pub seller: item_bought::Seller,
                pub buyer: item_bought::Buyer,
            }
            pub mod item_bought {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Price = ::core::primitive::u128;
                pub type Seller = runtime_types::account::AccountId20;
                pub type Buyer = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemBought {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemBought";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A tip was sent."]
            pub struct TipSent {
                pub collection: tip_sent::Collection,
                pub item: tip_sent::Item,
                pub sender: tip_sent::Sender,
                pub receiver: tip_sent::Receiver,
                pub amount: tip_sent::Amount,
            }
            pub mod tip_sent {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Sender = runtime_types::account::AccountId20;
                pub type Receiver = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TipSent {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TipSent";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An `item` swap intent was created."]
            pub struct SwapCreated {
                pub offered_collection: swap_created::OfferedCollection,
                pub offered_item: swap_created::OfferedItem,
                pub desired_collection: swap_created::DesiredCollection,
                pub desired_item: swap_created::DesiredItem,
                pub price: swap_created::Price,
                pub deadline: swap_created::Deadline,
            }
            pub mod swap_created {
                use super::runtime_types;
                pub type OfferedCollection = runtime_types::runtime_common::IncrementableU256;
                pub type OfferedItem = ::core::primitive::u128;
                pub type DesiredCollection = runtime_types::runtime_common::IncrementableU256;
                pub type DesiredItem = ::core::option::Option<::core::primitive::u128>;
                pub type Price = ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >;
                pub type Deadline = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SwapCreated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The swap was cancelled."]
            pub struct SwapCancelled {
                pub offered_collection: swap_cancelled::OfferedCollection,
                pub offered_item: swap_cancelled::OfferedItem,
                pub desired_collection: swap_cancelled::DesiredCollection,
                pub desired_item: swap_cancelled::DesiredItem,
                pub price: swap_cancelled::Price,
                pub deadline: swap_cancelled::Deadline,
            }
            pub mod swap_cancelled {
                use super::runtime_types;
                pub type OfferedCollection = runtime_types::runtime_common::IncrementableU256;
                pub type OfferedItem = ::core::primitive::u128;
                pub type DesiredCollection = runtime_types::runtime_common::IncrementableU256;
                pub type DesiredItem = ::core::option::Option<::core::primitive::u128>;
                pub type Price = ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >;
                pub type Deadline = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SwapCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapCancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The swap has been claimed."]
            pub struct SwapClaimed {
                pub sent_collection: swap_claimed::SentCollection,
                pub sent_item: swap_claimed::SentItem,
                pub sent_item_owner: swap_claimed::SentItemOwner,
                pub received_collection: swap_claimed::ReceivedCollection,
                pub received_item: swap_claimed::ReceivedItem,
                pub received_item_owner: swap_claimed::ReceivedItemOwner,
                pub price: swap_claimed::Price,
                pub deadline: swap_claimed::Deadline,
            }
            pub mod swap_claimed {
                use super::runtime_types;
                pub type SentCollection = runtime_types::runtime_common::IncrementableU256;
                pub type SentItem = ::core::primitive::u128;
                pub type SentItemOwner = runtime_types::account::AccountId20;
                pub type ReceivedCollection = runtime_types::runtime_common::IncrementableU256;
                pub type ReceivedItem = ::core::primitive::u128;
                pub type ReceivedItemOwner = runtime_types::account::AccountId20;
                pub type Price = ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >;
                pub type Deadline = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SwapClaimed {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New attributes have been set for an `item` of the `collection`."]
            pub struct PreSignedAttributesSet {
                pub collection: pre_signed_attributes_set::Collection,
                pub item: pre_signed_attributes_set::Item,
                pub namespace: pre_signed_attributes_set::Namespace,
            }
            pub mod pre_signed_attributes_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Namespace = runtime_types::pallet_nfts::types::AttributeNamespace<
                    runtime_types::account::AccountId20,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PreSignedAttributesSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "PreSignedAttributesSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`"]
            #[doc = "within that `collection`."]
            pub struct PalletAttributeSet {
                pub collection: pallet_attribute_set::Collection,
                pub item: pallet_attribute_set::Item,
                pub attribute: pallet_attribute_set::Attribute,
                pub value: pallet_attribute_set::Value,
            }
            pub mod pallet_attribute_set {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::option::Option<::core::primitive::u128>;
                pub type Attribute = runtime_types::pallet_nfts::types::PalletAttributes<
                    runtime_types::runtime_common::IncrementableU256,
                >;
                pub type Value = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PalletAttributeSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "PalletAttributeSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod collection {
                    use super::runtime_types;
                    pub type Collection = runtime_types::pallet_nfts::types::CollectionDetails<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                }
                pub mod burned_items {
                    use super::runtime_types;
                    pub type BurnedItems = ::core::primitive::bool;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod ownership_acceptance {
                    use super::runtime_types;
                    pub type OwnershipAcceptance = runtime_types::runtime_common::IncrementableU256;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod account {
                    use super::runtime_types;
                    pub type Account = ();
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param2 = ::core::primitive::u128;
                }
                pub mod collection_account {
                    use super::runtime_types;
                    pub type CollectionAccount = ();
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::runtime_common::IncrementableU256;
                }
                pub mod collection_role_of {
                    use super::runtime_types;
                    pub type CollectionRoleOf = runtime_types::pallet_nfts::types::BitFlags2<
                        runtime_types::pallet_nfts::types::CollectionRole,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = runtime_types::account::AccountId20;
                }
                pub mod item {
                    use super::runtime_types;
                    pub type Item = runtime_types::pallet_nfts::types::ItemDetails<
                        runtime_types::account::AccountId20,
                        runtime_types::pallet_nfts::types::ItemDeposit<
                            ::core::primitive::u128,
                            runtime_types::account::AccountId20,
                        >,
                        runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                            runtime_types::account::AccountId20,
                            ::core::option::Option<::core::primitive::u32>,
                        >,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod collection_metadata_of {
                    use super::runtime_types;
                    pub type CollectionMetadataOf =
                        runtime_types::pallet_nfts::types::CollectionMetadata<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                }
                pub mod item_metadata_of {
                    use super::runtime_types;
                    pub type ItemMetadataOf = runtime_types::pallet_nfts::types::ItemMetadata<
                        runtime_types::pallet_nfts::types::ItemMetadataDeposit<
                            ::core::primitive::u128,
                            runtime_types::account::AccountId20,
                        >,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod attribute {
                    use super::runtime_types;
                    pub type Attribute = (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        runtime_types::pallet_nfts::types::AttributeDeposit<
                            ::core::primitive::u128,
                            runtime_types::account::AccountId20,
                        >,
                    );
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::option::Option<::core::primitive::u128>;
                    pub type Param2 = runtime_types::pallet_nfts::types::AttributeNamespace<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Param3 = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                pub mod item_price_of {
                    use super::runtime_types;
                    pub type ItemPriceOf = (
                        ::core::primitive::u128,
                        ::core::option::Option<runtime_types::account::AccountId20>,
                    );
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod item_attributes_approvals_of {
                    use super::runtime_types;
                    pub type ItemAttributesApprovalsOf =
                        runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                            runtime_types::account::AccountId20,
                        >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod next_collection_id {
                    use super::runtime_types;
                    pub type NextCollectionId = runtime_types::runtime_common::IncrementableU256;
                }
                pub mod pending_swap_of {
                    use super::runtime_types;
                    pub type PendingSwapOf = runtime_types::pallet_nfts::types::PendingSwap<
                        runtime_types::runtime_common::IncrementableU256,
                        ::core::primitive::u128,
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod collection_config_of {
                    use super::runtime_types;
                    pub type CollectionConfigOf =
                        runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            runtime_types::runtime_common::IncrementableU256,
                        >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                }
                pub mod item_config_of {
                    use super::runtime_types;
                    pub type ItemConfigOf = runtime_types::pallet_nfts::types::ItemConfig;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of a collection."]
                pub fn collection_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collection::Collection,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Collection",
                        (),
                        [
                            19u8, 79u8, 197u8, 22u8, 245u8, 199u8, 42u8, 68u8, 11u8, 216u8, 236u8,
                            44u8, 139u8, 14u8, 117u8, 51u8, 121u8, 8u8, 237u8, 66u8, 109u8, 35u8,
                            120u8, 207u8, 61u8, 203u8, 238u8, 142u8, 33u8, 45u8, 149u8, 124u8,
                        ],
                    )
                }
                #[doc = " Details of a collection."]
                pub fn collection(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::collection::Param0,
                    >,
                    types::collection::Collection,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Collection",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            19u8, 79u8, 197u8, 22u8, 245u8, 199u8, 42u8, 68u8, 11u8, 216u8, 236u8,
                            44u8, 139u8, 14u8, 117u8, 51u8, 121u8, 8u8, 237u8, 66u8, 109u8, 35u8,
                            120u8, 207u8, 61u8, 203u8, 238u8, 142u8, 33u8, 45u8, 149u8, 124u8,
                        ],
                    )
                }
                #[doc = " Burned items in a collection."]
                pub fn burned_items_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::burned_items::BurnedItems,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "BurnedItems",
                        (),
                        [
                            111u8, 221u8, 134u8, 24u8, 187u8, 10u8, 217u8, 28u8, 223u8, 8u8, 40u8,
                            219u8, 43u8, 72u8, 125u8, 129u8, 31u8, 185u8, 155u8, 238u8, 63u8, 81u8,
                            196u8, 250u8, 94u8, 121u8, 86u8, 187u8, 7u8, 166u8, 204u8, 84u8,
                        ],
                    )
                }
                #[doc = " Burned items in a collection."]
                pub fn burned_items_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::burned_items::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::burned_items::Param0,
                    >,
                    types::burned_items::BurnedItems,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "BurnedItems",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            111u8, 221u8, 134u8, 24u8, 187u8, 10u8, 217u8, 28u8, 223u8, 8u8, 40u8,
                            219u8, 43u8, 72u8, 125u8, 129u8, 31u8, 185u8, 155u8, 238u8, 63u8, 81u8,
                            196u8, 250u8, 94u8, 121u8, 86u8, 187u8, 7u8, 166u8, 204u8, 84u8,
                        ],
                    )
                }
                #[doc = " Burned items in a collection."]
                pub fn burned_items(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::burned_items::Param0>,
                    _1: impl ::core::borrow::Borrow<types::burned_items::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::burned_items::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::burned_items::Param1,
                        >,
                    ),
                    types::burned_items::BurnedItems,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "BurnedItems",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            111u8, 221u8, 134u8, 24u8, 187u8, 10u8, 217u8, 28u8, 223u8, 8u8, 40u8,
                            219u8, 43u8, 72u8, 125u8, 129u8, 31u8, 185u8, 155u8, 238u8, 63u8, 81u8,
                            196u8, 250u8, 94u8, 121u8, 86u8, 187u8, 7u8, 166u8, 204u8, 84u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::ownership_acceptance::OwnershipAcceptance,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "OwnershipAcceptance",
                        (),
                        [
                            21u8, 7u8, 127u8, 119u8, 12u8, 90u8, 148u8, 38u8, 33u8, 49u8, 68u8,
                            52u8, 110u8, 85u8, 129u8, 197u8, 77u8, 39u8, 237u8, 43u8, 222u8, 201u8,
                            112u8, 84u8, 215u8, 20u8, 20u8, 223u8, 226u8, 115u8, 24u8, 86u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::ownership_acceptance::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::ownership_acceptance::Param0,
                    >,
                    types::ownership_acceptance::OwnershipAcceptance,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "OwnershipAcceptance",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            21u8, 7u8, 127u8, 119u8, 12u8, 90u8, 148u8, 38u8, 33u8, 49u8, 68u8,
                            52u8, 110u8, 85u8, 129u8, 197u8, 77u8, 39u8, 237u8, 43u8, 222u8, 201u8,
                            112u8, 84u8, 215u8, 20u8, 20u8, 223u8, 226u8, 115u8, 24u8, 86u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account::Account,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Account",
                        (),
                        [
                            236u8, 87u8, 18u8, 218u8, 79u8, 7u8, 207u8, 41u8, 133u8, 104u8, 111u8,
                            147u8, 210u8, 233u8, 167u8, 91u8, 186u8, 29u8, 221u8, 48u8, 19u8, 89u8,
                            146u8, 38u8, 109u8, 101u8, 136u8, 16u8, 78u8, 5u8, 239u8, 44u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account::Param0,
                    >,
                    types::account::Account,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Account",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            236u8, 87u8, 18u8, 218u8, 79u8, 7u8, 207u8, 41u8, 133u8, 104u8, 111u8,
                            147u8, 210u8, 233u8, 167u8, 91u8, 186u8, 29u8, 221u8, 48u8, 19u8, 89u8,
                            146u8, 38u8, 109u8, 101u8, 136u8, 16u8, 78u8, 5u8, 239u8, 44u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_iter2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                    _1: impl ::core::borrow::Borrow<types::account::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::account::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::account::Param1,
                        >,
                    ),
                    types::account::Account,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Account",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            236u8, 87u8, 18u8, 218u8, 79u8, 7u8, 207u8, 41u8, 133u8, 104u8, 111u8,
                            147u8, 210u8, 233u8, 167u8, 91u8, 186u8, 29u8, 221u8, 48u8, 19u8, 89u8,
                            146u8, 38u8, 109u8, 101u8, 136u8, 16u8, 78u8, 5u8, 239u8, 44u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                    _1: impl ::core::borrow::Borrow<types::account::Param1>,
                    _2: impl ::core::borrow::Borrow<types::account::Param2>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::account::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::account::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::account::Param2,
                        >,
                    ),
                    types::account::Account,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Account",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                        ),
                        [
                            236u8, 87u8, 18u8, 218u8, 79u8, 7u8, 207u8, 41u8, 133u8, 104u8, 111u8,
                            147u8, 210u8, 233u8, 167u8, 91u8, 186u8, 29u8, 221u8, 48u8, 19u8, 89u8,
                            146u8, 38u8, 109u8, 101u8, 136u8, 16u8, 78u8, 5u8, 239u8, 44u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn collection_account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collection_account::CollectionAccount,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionAccount",
                        (),
                        [
                            72u8, 163u8, 188u8, 3u8, 180u8, 114u8, 69u8, 180u8, 222u8, 226u8, 84u8,
                            0u8, 200u8, 238u8, 182u8, 205u8, 101u8, 167u8, 121u8, 32u8, 136u8,
                            191u8, 138u8, 172u8, 52u8, 220u8, 175u8, 88u8, 199u8, 57u8, 230u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn collection_account_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::collection_account::Param0,
                    >,
                    types::collection_account::CollectionAccount,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionAccount",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            72u8, 163u8, 188u8, 3u8, 180u8, 114u8, 69u8, 180u8, 222u8, 226u8, 84u8,
                            0u8, 200u8, 238u8, 182u8, 205u8, 101u8, 167u8, 121u8, 32u8, 136u8,
                            191u8, 138u8, 172u8, 52u8, 220u8, 175u8, 88u8, 199u8, 57u8, 230u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn collection_account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_account::Param0>,
                    _1: impl ::core::borrow::Borrow<types::collection_account::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::collection_account::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::collection_account::Param1,
                        >,
                    ),
                    types::collection_account::CollectionAccount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionAccount",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            72u8, 163u8, 188u8, 3u8, 180u8, 114u8, 69u8, 180u8, 222u8, 226u8, 84u8,
                            0u8, 200u8, 238u8, 182u8, 205u8, 101u8, 167u8, 121u8, 32u8, 136u8,
                            191u8, 138u8, 172u8, 52u8, 220u8, 175u8, 88u8, 199u8, 57u8, 230u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                #[doc = " Stores collection roles as per account."]
                pub fn collection_role_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collection_role_of::CollectionRoleOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionRoleOf",
                        (),
                        [
                            9u8, 246u8, 175u8, 219u8, 252u8, 200u8, 118u8, 173u8, 1u8, 47u8, 232u8,
                            178u8, 23u8, 73u8, 167u8, 19u8, 203u8, 179u8, 180u8, 43u8, 150u8, 75u8,
                            212u8, 137u8, 18u8, 98u8, 88u8, 106u8, 196u8, 53u8, 192u8, 17u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                #[doc = " Stores collection roles as per account."]
                pub fn collection_role_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_role_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::collection_role_of::Param0,
                    >,
                    types::collection_role_of::CollectionRoleOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionRoleOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            9u8, 246u8, 175u8, 219u8, 252u8, 200u8, 118u8, 173u8, 1u8, 47u8, 232u8,
                            178u8, 23u8, 73u8, 167u8, 19u8, 203u8, 179u8, 180u8, 43u8, 150u8, 75u8,
                            212u8, 137u8, 18u8, 98u8, 88u8, 106u8, 196u8, 53u8, 192u8, 17u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                #[doc = " Stores collection roles as per account."]
                pub fn collection_role_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_role_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::collection_role_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::collection_role_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::collection_role_of::Param1,
                        >,
                    ),
                    types::collection_role_of::CollectionRoleOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionRoleOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            9u8, 246u8, 175u8, 219u8, 252u8, 200u8, 118u8, 173u8, 1u8, 47u8, 232u8,
                            178u8, 23u8, 73u8, 167u8, 19u8, 203u8, 179u8, 180u8, 43u8, 150u8, 75u8,
                            212u8, 137u8, 18u8, 98u8, 88u8, 106u8, 196u8, 53u8, 192u8, 17u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn item_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::item::Item,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Item",
                        (),
                        [
                            55u8, 74u8, 7u8, 49u8, 230u8, 212u8, 16u8, 65u8, 184u8, 20u8, 15u8,
                            76u8, 93u8, 60u8, 35u8, 12u8, 103u8, 48u8, 14u8, 24u8, 43u8, 82u8, 2u8,
                            6u8, 7u8, 244u8, 181u8, 26u8, 100u8, 255u8, 67u8, 255u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn item_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::item::Param0,
                    >,
                    types::item::Item,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Item",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            55u8, 74u8, 7u8, 49u8, 230u8, 212u8, 16u8, 65u8, 184u8, 20u8, 15u8,
                            76u8, 93u8, 60u8, 35u8, 12u8, 103u8, 48u8, 14u8, 24u8, 43u8, 82u8, 2u8,
                            6u8, 7u8, 244u8, 181u8, 26u8, 100u8, 255u8, 67u8, 255u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn item(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item::Param0>,
                    _1: impl ::core::borrow::Borrow<types::item::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item::Param1,
                        >,
                    ),
                    types::item::Item,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Item",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            55u8, 74u8, 7u8, 49u8, 230u8, 212u8, 16u8, 65u8, 184u8, 20u8, 15u8,
                            76u8, 93u8, 60u8, 35u8, 12u8, 103u8, 48u8, 14u8, 24u8, 43u8, 82u8, 2u8,
                            6u8, 7u8, 244u8, 181u8, 26u8, 100u8, 255u8, 67u8, 255u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn collection_metadata_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collection_metadata_of::CollectionMetadataOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionMetadataOf",
                        (),
                        [
                            185u8, 29u8, 140u8, 209u8, 19u8, 35u8, 172u8, 65u8, 94u8, 189u8, 57u8,
                            121u8, 72u8, 149u8, 183u8, 181u8, 235u8, 19u8, 128u8, 178u8, 135u8,
                            173u8, 63u8, 205u8, 174u8, 141u8, 143u8, 150u8, 243u8, 222u8, 133u8,
                            159u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn collection_metadata_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_metadata_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::collection_metadata_of::Param0,
                    >,
                    types::collection_metadata_of::CollectionMetadataOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionMetadataOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            185u8, 29u8, 140u8, 209u8, 19u8, 35u8, 172u8, 65u8, 94u8, 189u8, 57u8,
                            121u8, 72u8, 149u8, 183u8, 181u8, 235u8, 19u8, 128u8, 178u8, 135u8,
                            173u8, 63u8, 205u8, 174u8, 141u8, 143u8, 150u8, 243u8, 222u8, 133u8,
                            159u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn item_metadata_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::item_metadata_of::ItemMetadataOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemMetadataOf",
                        (),
                        [
                            22u8, 179u8, 101u8, 1u8, 127u8, 156u8, 64u8, 219u8, 235u8, 181u8,
                            216u8, 186u8, 18u8, 98u8, 180u8, 29u8, 123u8, 28u8, 51u8, 80u8, 152u8,
                            97u8, 163u8, 195u8, 24u8, 150u8, 216u8, 110u8, 44u8, 159u8, 196u8, 7u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn item_metadata_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_metadata_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::item_metadata_of::Param0,
                    >,
                    types::item_metadata_of::ItemMetadataOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemMetadataOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            22u8, 179u8, 101u8, 1u8, 127u8, 156u8, 64u8, 219u8, 235u8, 181u8,
                            216u8, 186u8, 18u8, 98u8, 180u8, 29u8, 123u8, 28u8, 51u8, 80u8, 152u8,
                            97u8, 163u8, 195u8, 24u8, 150u8, 216u8, 110u8, 44u8, 159u8, 196u8, 7u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn item_metadata_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_metadata_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::item_metadata_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_metadata_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_metadata_of::Param1,
                        >,
                    ),
                    types::item_metadata_of::ItemMetadataOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemMetadataOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            22u8, 179u8, 101u8, 1u8, 127u8, 156u8, 64u8, 219u8, 235u8, 181u8,
                            216u8, 186u8, 18u8, 98u8, 180u8, 29u8, 123u8, 28u8, 51u8, 80u8, 152u8,
                            97u8, 163u8, 195u8, 24u8, 150u8, 216u8, 110u8, 44u8, 159u8, 196u8, 7u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::attribute::Attribute,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Attribute",
                        (),
                        [
                            124u8, 206u8, 206u8, 84u8, 177u8, 6u8, 54u8, 234u8, 38u8, 150u8, 239u8,
                            144u8, 30u8, 45u8, 204u8, 229u8, 78u8, 43u8, 86u8, 174u8, 125u8, 228u8,
                            106u8, 80u8, 209u8, 72u8, 31u8, 239u8, 130u8, 220u8, 119u8, 225u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::attribute::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::attribute::Param0,
                    >,
                    types::attribute::Attribute,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Attribute",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            124u8, 206u8, 206u8, 84u8, 177u8, 6u8, 54u8, 234u8, 38u8, 150u8, 239u8,
                            144u8, 30u8, 45u8, 204u8, 229u8, 78u8, 43u8, 86u8, 174u8, 125u8, 228u8,
                            106u8, 80u8, 209u8, 72u8, 31u8, 239u8, 130u8, 220u8, 119u8, 225u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_iter2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::attribute::Param0>,
                    _1: impl ::core::borrow::Borrow<types::attribute::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param1,
                        >,
                    ),
                    types::attribute::Attribute,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Attribute",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            124u8, 206u8, 206u8, 84u8, 177u8, 6u8, 54u8, 234u8, 38u8, 150u8, 239u8,
                            144u8, 30u8, 45u8, 204u8, 229u8, 78u8, 43u8, 86u8, 174u8, 125u8, 228u8,
                            106u8, 80u8, 209u8, 72u8, 31u8, 239u8, 130u8, 220u8, 119u8, 225u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_iter3(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::attribute::Param0>,
                    _1: impl ::core::borrow::Borrow<types::attribute::Param1>,
                    _2: impl ::core::borrow::Borrow<types::attribute::Param2>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param2,
                        >,
                    ),
                    types::attribute::Attribute,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Attribute",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                        ),
                        [
                            124u8, 206u8, 206u8, 84u8, 177u8, 6u8, 54u8, 234u8, 38u8, 150u8, 239u8,
                            144u8, 30u8, 45u8, 204u8, 229u8, 78u8, 43u8, 86u8, 174u8, 125u8, 228u8,
                            106u8, 80u8, 209u8, 72u8, 31u8, 239u8, 130u8, 220u8, 119u8, 225u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::attribute::Param0>,
                    _1: impl ::core::borrow::Borrow<types::attribute::Param1>,
                    _2: impl ::core::borrow::Borrow<types::attribute::Param2>,
                    _3: impl ::core::borrow::Borrow<types::attribute::Param3>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param2,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::attribute::Param3,
                        >,
                    ),
                    types::attribute::Attribute,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "Attribute",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _3.borrow(),
                            ),
                        ),
                        [
                            124u8, 206u8, 206u8, 84u8, 177u8, 6u8, 54u8, 234u8, 38u8, 150u8, 239u8,
                            144u8, 30u8, 45u8, 204u8, 229u8, 78u8, 43u8, 86u8, 174u8, 125u8, 228u8,
                            106u8, 80u8, 209u8, 72u8, 31u8, 239u8, 130u8, 220u8, 119u8, 225u8,
                        ],
                    )
                }
                #[doc = " A price of an item."]
                pub fn item_price_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::item_price_of::ItemPriceOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemPriceOf",
                        (),
                        [
                            129u8, 157u8, 0u8, 1u8, 169u8, 142u8, 220u8, 127u8, 71u8, 68u8, 71u8,
                            19u8, 28u8, 30u8, 18u8, 214u8, 8u8, 41u8, 31u8, 180u8, 189u8, 114u8,
                            5u8, 160u8, 169u8, 193u8, 71u8, 25u8, 1u8, 116u8, 89u8, 194u8,
                        ],
                    )
                }
                #[doc = " A price of an item."]
                pub fn item_price_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_price_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::item_price_of::Param0,
                    >,
                    types::item_price_of::ItemPriceOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemPriceOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            129u8, 157u8, 0u8, 1u8, 169u8, 142u8, 220u8, 127u8, 71u8, 68u8, 71u8,
                            19u8, 28u8, 30u8, 18u8, 214u8, 8u8, 41u8, 31u8, 180u8, 189u8, 114u8,
                            5u8, 160u8, 169u8, 193u8, 71u8, 25u8, 1u8, 116u8, 89u8, 194u8,
                        ],
                    )
                }
                #[doc = " A price of an item."]
                pub fn item_price_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_price_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::item_price_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_price_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_price_of::Param1,
                        >,
                    ),
                    types::item_price_of::ItemPriceOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemPriceOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            129u8, 157u8, 0u8, 1u8, 169u8, 142u8, 220u8, 127u8, 71u8, 68u8, 71u8,
                            19u8, 28u8, 30u8, 18u8, 214u8, 8u8, 41u8, 31u8, 180u8, 189u8, 114u8,
                            5u8, 160u8, 169u8, 193u8, 71u8, 25u8, 1u8, 116u8, 89u8, 194u8,
                        ],
                    )
                }
                #[doc = " Item attribute approvals."]
                pub fn item_attributes_approvals_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::item_attributes_approvals_of::ItemAttributesApprovalsOf,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsOf",
                        (),
                        [
                            72u8, 51u8, 156u8, 215u8, 106u8, 210u8, 41u8, 100u8, 105u8, 222u8,
                            69u8, 109u8, 213u8, 103u8, 30u8, 118u8, 136u8, 208u8, 85u8, 161u8,
                            133u8, 194u8, 91u8, 46u8, 48u8, 230u8, 143u8, 191u8, 187u8, 226u8,
                            204u8, 158u8,
                        ],
                    )
                }
                #[doc = " Item attribute approvals."]
                pub fn item_attributes_approvals_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_attributes_approvals_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::item_attributes_approvals_of::Param0,
                    >,
                    types::item_attributes_approvals_of::ItemAttributesApprovalsOf,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            72u8, 51u8, 156u8, 215u8, 106u8, 210u8, 41u8, 100u8, 105u8, 222u8,
                            69u8, 109u8, 213u8, 103u8, 30u8, 118u8, 136u8, 208u8, 85u8, 161u8,
                            133u8, 194u8, 91u8, 46u8, 48u8, 230u8, 143u8, 191u8, 187u8, 226u8,
                            204u8, 158u8,
                        ],
                    )
                }
                #[doc = " Item attribute approvals."]
                pub fn item_attributes_approvals_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_attributes_approvals_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::item_attributes_approvals_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_attributes_approvals_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_attributes_approvals_of::Param1,
                        >,
                    ),
                    types::item_attributes_approvals_of::ItemAttributesApprovalsOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            72u8, 51u8, 156u8, 215u8, 106u8, 210u8, 41u8, 100u8, 105u8, 222u8,
                            69u8, 109u8, 213u8, 103u8, 30u8, 118u8, 136u8, 208u8, 85u8, 161u8,
                            133u8, 194u8, 91u8, 46u8, 48u8, 230u8, 143u8, 191u8, 187u8, 226u8,
                            204u8, 158u8,
                        ],
                    )
                }
                #[doc = " Stores the `CollectionId` that is going to be used for the next collection."]
                #[doc = " This gets incremented whenever a new collection is created."]
                pub fn next_collection_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_collection_id::NextCollectionId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "NextCollectionId",
                        (),
                        [
                            46u8, 116u8, 149u8, 186u8, 188u8, 191u8, 32u8, 97u8, 133u8, 100u8,
                            29u8, 127u8, 90u8, 217u8, 71u8, 26u8, 217u8, 188u8, 237u8, 19u8, 221u8,
                            152u8, 176u8, 122u8, 255u8, 15u8, 167u8, 237u8, 232u8, 90u8, 96u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " Handles all the pending swaps."]
                pub fn pending_swap_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_swap_of::PendingSwapOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "PendingSwapOf",
                        (),
                        [
                            29u8, 74u8, 242u8, 73u8, 81u8, 31u8, 236u8, 241u8, 51u8, 3u8, 233u8,
                            218u8, 155u8, 232u8, 176u8, 86u8, 27u8, 96u8, 233u8, 143u8, 105u8,
                            75u8, 170u8, 167u8, 87u8, 51u8, 222u8, 44u8, 115u8, 61u8, 137u8, 143u8,
                        ],
                    )
                }
                #[doc = " Handles all the pending swaps."]
                pub fn pending_swap_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pending_swap_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::pending_swap_of::Param0,
                    >,
                    types::pending_swap_of::PendingSwapOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "PendingSwapOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            29u8, 74u8, 242u8, 73u8, 81u8, 31u8, 236u8, 241u8, 51u8, 3u8, 233u8,
                            218u8, 155u8, 232u8, 176u8, 86u8, 27u8, 96u8, 233u8, 143u8, 105u8,
                            75u8, 170u8, 167u8, 87u8, 51u8, 222u8, 44u8, 115u8, 61u8, 137u8, 143u8,
                        ],
                    )
                }
                #[doc = " Handles all the pending swaps."]
                pub fn pending_swap_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pending_swap_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::pending_swap_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pending_swap_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pending_swap_of::Param1,
                        >,
                    ),
                    types::pending_swap_of::PendingSwapOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "PendingSwapOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            29u8, 74u8, 242u8, 73u8, 81u8, 31u8, 236u8, 241u8, 51u8, 3u8, 233u8,
                            218u8, 155u8, 232u8, 176u8, 86u8, 27u8, 96u8, 233u8, 143u8, 105u8,
                            75u8, 170u8, 167u8, 87u8, 51u8, 222u8, 44u8, 115u8, 61u8, 137u8, 143u8,
                        ],
                    )
                }
                #[doc = " Config of a collection."]
                pub fn collection_config_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collection_config_of::CollectionConfigOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionConfigOf",
                        (),
                        [
                            191u8, 1u8, 247u8, 139u8, 38u8, 251u8, 193u8, 21u8, 247u8, 25u8, 139u8,
                            204u8, 97u8, 200u8, 21u8, 216u8, 81u8, 25u8, 175u8, 244u8, 85u8, 197u8,
                            103u8, 7u8, 58u8, 150u8, 130u8, 39u8, 147u8, 203u8, 43u8, 131u8,
                        ],
                    )
                }
                #[doc = " Config of a collection."]
                pub fn collection_config_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::collection_config_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::collection_config_of::Param0,
                    >,
                    types::collection_config_of::CollectionConfigOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionConfigOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            191u8, 1u8, 247u8, 139u8, 38u8, 251u8, 193u8, 21u8, 247u8, 25u8, 139u8,
                            204u8, 97u8, 200u8, 21u8, 216u8, 81u8, 25u8, 175u8, 244u8, 85u8, 197u8,
                            103u8, 7u8, 58u8, 150u8, 130u8, 39u8, 147u8, 203u8, 43u8, 131u8,
                        ],
                    )
                }
                #[doc = " Config of an item."]
                pub fn item_config_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::item_config_of::ItemConfigOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemConfigOf",
                        (),
                        [
                            142u8, 233u8, 128u8, 28u8, 194u8, 221u8, 222u8, 192u8, 250u8, 244u8,
                            255u8, 19u8, 173u8, 129u8, 246u8, 247u8, 46u8, 137u8, 120u8, 103u8,
                            26u8, 96u8, 252u8, 86u8, 11u8, 254u8, 155u8, 140u8, 242u8, 69u8, 43u8,
                            35u8,
                        ],
                    )
                }
                #[doc = " Config of an item."]
                pub fn item_config_of_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_config_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::item_config_of::Param0,
                    >,
                    types::item_config_of::ItemConfigOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemConfigOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            142u8, 233u8, 128u8, 28u8, 194u8, 221u8, 222u8, 192u8, 250u8, 244u8,
                            255u8, 19u8, 173u8, 129u8, 246u8, 247u8, 46u8, 137u8, 120u8, 103u8,
                            26u8, 96u8, 252u8, 86u8, 11u8, 254u8, 155u8, 140u8, 242u8, 69u8, 43u8,
                            35u8,
                        ],
                    )
                }
                #[doc = " Config of an item."]
                pub fn item_config_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::item_config_of::Param0>,
                    _1: impl ::core::borrow::Borrow<types::item_config_of::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_config_of::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::item_config_of::Param1,
                        >,
                    ),
                    types::item_config_of::ItemConfigOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemConfigOf",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            142u8, 233u8, 128u8, 28u8, 194u8, 221u8, 222u8, 192u8, 250u8, 244u8,
                            255u8, 19u8, 173u8, 129u8, 246u8, 247u8, 46u8, 137u8, 120u8, 103u8,
                            26u8, 96u8, 252u8, 86u8, 11u8, 254u8, 155u8, 140u8, 242u8, 69u8, 43u8,
                            35u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The basic amount of funds that must be reserved for collection."]
                pub fn collection_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "CollectionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an item."]
                pub fn item_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your item."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding an attribute to an item."]
                pub fn attribute_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "AttributeDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes store in metadata,"]
                #[doc = " either \"normal\" metadata or attribute metadata."]
                pub fn deposit_per_byte(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "DepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of data stored on-chain."]
                pub fn string_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute key."]
                pub fn key_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "KeyLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute value."]
                pub fn value_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "ValueLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum approvals an item could have."]
                pub fn approvals_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "ApprovalsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum attributes approvals an item could have."]
                pub fn item_attributes_approvals_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max number of tips a user could send."]
                pub fn max_tips(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "MaxTips",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max duration in blocks for deadlines."]
                pub fn max_deadline_duration(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "MaxDeadlineDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max number of attributes a user could set per call."]
                pub fn max_attributes_per_call(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "MaxAttributesPerCall",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Disables some of pallet's features."]
                pub fn features(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::pallet_nfts::types::BitFlags1<
                        runtime_types::pallet_nfts::types::PalletFeature,
                    >,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Nfts",
                        "Features",
                        [
                            184u8, 78u8, 161u8, 6u8, 214u8, 205u8, 82u8, 205u8, 126u8, 46u8, 7u8,
                            198u8, 186u8, 10u8, 66u8, 116u8, 191u8, 223u8, 17u8, 246u8, 196u8,
                            190u8, 222u8, 226u8, 62u8, 35u8, 191u8, 127u8, 60u8, 171u8, 85u8,
                            201u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod marketplace {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_marketplace::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_marketplace::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the authority role, granting owner rights."]
                #[doc = ""]
                #[doc = "Only the root origin can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `authority`: The account ID of the administrator to be set as the pallet's authority."]
                #[doc = ""]
                #[doc = "Emits AuthorityUpdated when successful."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::force_set_authority` (defined in the `Config` trait)."]
                pub struct ForceSetAuthority {
                    pub authority: force_set_authority::Authority,
                }
                pub mod force_set_authority {
                    use super::runtime_types;
                    pub type Authority = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetAuthority {
                    const PALLET: &'static str = "Marketplace";
                    const CALL: &'static str = "force_set_authority";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the fee signer address, allowing the designated account that signs fees."]
                #[doc = ""]
                #[doc = "Only an account with the authority role can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `fee_signer`: The account ID of the fee signer to be set."]
                #[doc = ""]
                #[doc = "Emits `FeeSignerAddressUpdate` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::set_fee_signer_address` (defined in the `Config` trait)."]
                pub struct SetFeeSignerAddress {
                    pub fee_signer: set_fee_signer_address::FeeSigner,
                }
                pub mod set_fee_signer_address {
                    use super::runtime_types;
                    pub type FeeSigner = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetFeeSignerAddress {
                    const PALLET: &'static str = "Marketplace";
                    const CALL: &'static str = "set_fee_signer_address";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows the authority account to set the payout address, which receives fee payments from trades."]
                #[doc = ""]
                #[doc = "Only an account with the authority role can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `payout_address`: The account ID of the address to be set as the payout address."]
                #[doc = ""]
                #[doc = "Emits `PayoutAddressUpdated` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::set_payout_address` (defined in the `Config` trait)."]
                pub struct SetPayoutAddress {
                    pub payout_address: set_payout_address::PayoutAddress,
                }
                pub mod set_payout_address {
                    use super::runtime_types;
                    pub type PayoutAddress = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPayoutAddress {
                    const PALLET: &'static str = "Marketplace";
                    const CALL: &'static str = "set_payout_address";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Create an Ask or Bid Order for a specific NFT (collection ID, Item ID)."]
                #[doc = ""]
                #[doc = "Asks:"]
                #[doc = "- An owner of an NFT can create an ask on the item with a price, expiration, and signature."]
                #[doc = "- The signature must come from the feeSigner account."]
                #[doc = "- The expiration must be above `MinOrderDuration`."]
                #[doc = "- After the ask is created, the NFT is locked so it can't be transferred."]
                #[doc = ""]
                #[doc = "Bids:"]
                #[doc = "- A bid can be created on an existing item, with a price to pay, a fee, and expiration."]
                #[doc = "- The signature must come from the feeSigner account."]
                #[doc = "- The amount the bidder is willing to pay is locked from the user's Balance."]
                #[doc = ""]
                #[doc = "Match Exists:"]
                #[doc = "- If a match between an Ask and Bid exists, the trade is triggered."]
                #[doc = "- The seller receives the funds, and the bidder receives the unlocked item."]
                #[doc = "- Fees go to payoutAddress."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `order`: The details of the order to be created (including type, collection, item, price, expiration, fee, and signature)."]
                #[doc = "- `execution`: Execution mode to indicate whether order creation should proceed if a valid match exists."]
                #[doc = ""]
                #[doc = "Emits `OrderCreated` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::create_order` (defined in the `Config` trait)."]
                pub struct CreateOrder {
                    pub order: create_order::Order,
                    pub execution: create_order::Execution,
                }
                pub mod create_order {
                    use super::runtime_types;
                    pub type Order = runtime_types::pallet_marketplace::types::Order<
                        runtime_types::runtime_common::IncrementableU256,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                        runtime_types::account::EthereumSignature,
                        runtime_types::account::AccountId20,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                    pub type Execution = runtime_types::pallet_marketplace::types::Execution;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreateOrder {
                    const PALLET: &'static str = "Marketplace";
                    const CALL: &'static str = "create_order";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancellation of an Ask or Bid order."]
                #[doc = ""]
                #[doc = "Callable by either the authority or the order creator."]
                #[doc = ""]
                #[doc = "If the order is an Ask, the item is unlocked."]
                #[doc = "If the order is a Bid, the bidder's balance is unlocked."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `order_type`: The type of the order to be canceled (Ask or Bid)."]
                #[doc = "- `collection`: The collection ID of the NFT associated with the order."]
                #[doc = "- `item`: The item ID of the NFT associated with the order."]
                #[doc = "- `price`: The price associated with the order (used for Bid orders)."]
                #[doc = ""]
                #[doc = "Emits `OrderCanceled` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::cancel_order` (defined in the `Config` trait)."]
                pub struct CancelOrder {
                    pub order_type: cancel_order::OrderType,
                    pub collection: cancel_order::Collection,
                    pub item: cancel_order::Item,
                    pub price: cancel_order::Price,
                }
                pub mod cancel_order {
                    use super::runtime_types;
                    pub type OrderType = runtime_types::pallet_marketplace::types::OrderType;
                    pub type Collection = runtime_types::runtime_common::IncrementableU256;
                    pub type Item = ::core::primitive::u128;
                    pub type Price = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelOrder {
                    const PALLET: &'static str = "Marketplace";
                    const CALL: &'static str = "cancel_order";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the authority role, granting owner rights."]
                #[doc = ""]
                #[doc = "Only the root origin can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `authority`: The account ID of the administrator to be set as the pallet's authority."]
                #[doc = ""]
                #[doc = "Emits AuthorityUpdated when successful."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::force_set_authority` (defined in the `Config` trait)."]
                pub fn force_set_authority(
                    &self,
                    authority: types::force_set_authority::Authority,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetAuthority>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Marketplace",
                        "force_set_authority",
                        types::ForceSetAuthority { authority },
                        [
                            210u8, 35u8, 59u8, 134u8, 144u8, 231u8, 218u8, 237u8, 224u8, 16u8,
                            27u8, 37u8, 23u8, 120u8, 214u8, 208u8, 158u8, 58u8, 37u8, 163u8, 186u8,
                            96u8, 238u8, 61u8, 101u8, 210u8, 183u8, 82u8, 160u8, 117u8, 229u8,
                            40u8,
                        ],
                    )
                }
                #[doc = "Sets the fee signer address, allowing the designated account that signs fees."]
                #[doc = ""]
                #[doc = "Only an account with the authority role can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `fee_signer`: The account ID of the fee signer to be set."]
                #[doc = ""]
                #[doc = "Emits `FeeSignerAddressUpdate` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::set_fee_signer_address` (defined in the `Config` trait)."]
                pub fn set_fee_signer_address(
                    &self,
                    fee_signer: types::set_fee_signer_address::FeeSigner,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetFeeSignerAddress>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Marketplace",
                        "set_fee_signer_address",
                        types::SetFeeSignerAddress { fee_signer },
                        [
                            46u8, 236u8, 250u8, 141u8, 225u8, 181u8, 55u8, 202u8, 77u8, 160u8,
                            101u8, 12u8, 118u8, 109u8, 32u8, 200u8, 50u8, 250u8, 152u8, 38u8, 29u8,
                            195u8, 187u8, 142u8, 10u8, 224u8, 159u8, 93u8, 36u8, 208u8, 61u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "Allows the authority account to set the payout address, which receives fee payments from trades."]
                #[doc = ""]
                #[doc = "Only an account with the authority role can execute this function."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `payout_address`: The account ID of the address to be set as the payout address."]
                #[doc = ""]
                #[doc = "Emits `PayoutAddressUpdated` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::set_payout_address` (defined in the `Config` trait)."]
                pub fn set_payout_address(
                    &self,
                    payout_address: types::set_payout_address::PayoutAddress,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPayoutAddress>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Marketplace",
                        "set_payout_address",
                        types::SetPayoutAddress { payout_address },
                        [
                            235u8, 191u8, 118u8, 19u8, 40u8, 83u8, 21u8, 244u8, 33u8, 227u8, 62u8,
                            0u8, 148u8, 176u8, 38u8, 27u8, 228u8, 176u8, 15u8, 157u8, 126u8, 140u8,
                            167u8, 93u8, 130u8, 19u8, 20u8, 27u8, 219u8, 77u8, 241u8, 151u8,
                        ],
                    )
                }
                #[doc = "Create an Ask or Bid Order for a specific NFT (collection ID, Item ID)."]
                #[doc = ""]
                #[doc = "Asks:"]
                #[doc = "- An owner of an NFT can create an ask on the item with a price, expiration, and signature."]
                #[doc = "- The signature must come from the feeSigner account."]
                #[doc = "- The expiration must be above `MinOrderDuration`."]
                #[doc = "- After the ask is created, the NFT is locked so it can't be transferred."]
                #[doc = ""]
                #[doc = "Bids:"]
                #[doc = "- A bid can be created on an existing item, with a price to pay, a fee, and expiration."]
                #[doc = "- The signature must come from the feeSigner account."]
                #[doc = "- The amount the bidder is willing to pay is locked from the user's Balance."]
                #[doc = ""]
                #[doc = "Match Exists:"]
                #[doc = "- If a match between an Ask and Bid exists, the trade is triggered."]
                #[doc = "- The seller receives the funds, and the bidder receives the unlocked item."]
                #[doc = "- Fees go to payoutAddress."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `order`: The details of the order to be created (including type, collection, item, price, expiration, fee, and signature)."]
                #[doc = "- `execution`: Execution mode to indicate whether order creation should proceed if a valid match exists."]
                #[doc = ""]
                #[doc = "Emits `OrderCreated` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::create_order` (defined in the `Config` trait)."]
                pub fn create_order(
                    &self,
                    order: types::create_order::Order,
                    execution: types::create_order::Execution,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreateOrder>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Marketplace",
                        "create_order",
                        types::CreateOrder { order, execution },
                        [
                            220u8, 191u8, 204u8, 72u8, 156u8, 127u8, 240u8, 18u8, 110u8, 99u8,
                            100u8, 31u8, 94u8, 47u8, 64u8, 78u8, 58u8, 27u8, 96u8, 184u8, 56u8,
                            112u8, 52u8, 204u8, 80u8, 35u8, 212u8, 111u8, 120u8, 131u8, 77u8,
                            215u8,
                        ],
                    )
                }
                #[doc = "Cancellation of an Ask or Bid order."]
                #[doc = ""]
                #[doc = "Callable by either the authority or the order creator."]
                #[doc = ""]
                #[doc = "If the order is an Ask, the item is unlocked."]
                #[doc = "If the order is a Bid, the bidder's balance is unlocked."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `order_type`: The type of the order to be canceled (Ask or Bid)."]
                #[doc = "- `collection`: The collection ID of the NFT associated with the order."]
                #[doc = "- `item`: The item ID of the NFT associated with the order."]
                #[doc = "- `price`: The price associated with the order (used for Bid orders)."]
                #[doc = ""]
                #[doc = "Emits `OrderCanceled` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::cancel_order` (defined in the `Config` trait)."]
                pub fn cancel_order(
                    &self,
                    order_type: types::cancel_order::OrderType,
                    collection: types::cancel_order::Collection,
                    item: types::cancel_order::Item,
                    price: types::cancel_order::Price,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelOrder>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Marketplace",
                        "cancel_order",
                        types::CancelOrder {
                            order_type,
                            collection,
                            item,
                            price,
                        },
                        [
                            168u8, 251u8, 10u8, 79u8, 40u8, 57u8, 225u8, 150u8, 238u8, 198u8,
                            240u8, 64u8, 2u8, 70u8, 218u8, 104u8, 57u8, 213u8, 136u8, 157u8, 239u8,
                            27u8, 5u8, 178u8, 12u8, 199u8, 80u8, 99u8, 132u8, 18u8, 163u8, 14u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_marketplace::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The pallet's authority was updated."]
            pub struct AuthorityUpdated {
                pub authority: authority_updated::Authority,
            }
            pub mod authority_updated {
                use super::runtime_types;
                pub type Authority = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AuthorityUpdated {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "AuthorityUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The fee signer account was updated."]
            pub struct FeeSignerAddressUpdate {
                pub fee_signer: fee_signer_address_update::FeeSigner,
            }
            pub mod fee_signer_address_update {
                use super::runtime_types;
                pub type FeeSigner = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for FeeSignerAddressUpdate {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "FeeSignerAddressUpdate";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The payout address account was updated."]
            pub struct PayoutAddressUpdated {
                pub payout_address: payout_address_updated::PayoutAddress,
            }
            pub mod payout_address_updated {
                use super::runtime_types;
                pub type PayoutAddress = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PayoutAddressUpdated {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "PayoutAddressUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An Ask/Bid order was created."]
            pub struct OrderCreated {
                pub who: order_created::Who,
                pub order_type: order_created::OrderType,
                pub collection: order_created::Collection,
                pub item: order_created::Item,
                pub price: order_created::Price,
                pub expires_at: order_created::ExpiresAt,
                pub fee: order_created::Fee,
            }
            pub mod order_created {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type OrderType = runtime_types::pallet_marketplace::types::OrderType;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Price = ::core::primitive::u128;
                pub type ExpiresAt = ::core::primitive::u64;
                pub type Fee = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OrderCreated {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "OrderCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A trade of Ask and Bid was executed."]
            pub struct OrderExecuted {
                pub collection: order_executed::Collection,
                pub item: order_executed::Item,
                pub seller: order_executed::Seller,
                pub buyer: order_executed::Buyer,
                pub price: order_executed::Price,
                pub seller_fee: order_executed::SellerFee,
                pub buyer_fee: order_executed::BuyerFee,
            }
            pub mod order_executed {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Seller = runtime_types::account::AccountId20;
                pub type Buyer = runtime_types::account::AccountId20;
                pub type Price = ::core::primitive::u128;
                pub type SellerFee = ::core::primitive::u128;
                pub type BuyerFee = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OrderExecuted {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "OrderExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The order was canceled by the order creator or the pallet's authority."]
            pub struct OrderCanceled {
                pub collection: order_canceled::Collection,
                pub item: order_canceled::Item,
                pub who: order_canceled::Who,
            }
            pub mod order_canceled {
                use super::runtime_types;
                pub type Collection = runtime_types::runtime_common::IncrementableU256;
                pub type Item = ::core::primitive::u128;
                pub type Who = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OrderCanceled {
                const PALLET: &'static str = "Marketplace";
                const EVENT: &'static str = "OrderCanceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authority {
                    use super::runtime_types;
                    pub type Authority = runtime_types::account::AccountId20;
                }
                pub mod fee_signer {
                    use super::runtime_types;
                    pub type FeeSigner = runtime_types::account::AccountId20;
                }
                pub mod nonces {
                    use super::runtime_types;
                    pub type Nonces = ::core::primitive::bool;
                    pub type Param0 = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                pub mod payout_address {
                    use super::runtime_types;
                    pub type PayoutAddress = runtime_types::account::AccountId20;
                }
                pub mod asks {
                    use super::runtime_types;
                    pub type Asks = runtime_types::pallet_marketplace::types::Ask<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                        runtime_types::account::AccountId20,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod bids {
                    use super::runtime_types;
                    pub type Bids = runtime_types::pallet_marketplace::types::Bid<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                    pub type Param0 = runtime_types::runtime_common::IncrementableU256;
                    pub type Param1 = ::core::primitive::u128;
                    pub type Param2 = ::core::primitive::u128;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority account for the pallet."]
                pub fn authority(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authority::Authority,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Authority",
                        (),
                        [
                            44u8, 242u8, 137u8, 234u8, 168u8, 112u8, 23u8, 71u8, 104u8, 220u8,
                            128u8, 26u8, 97u8, 20u8, 180u8, 175u8, 43u8, 78u8, 107u8, 224u8, 179u8,
                            172u8, 212u8, 97u8, 97u8, 106u8, 132u8, 208u8, 56u8, 80u8, 90u8, 68u8,
                        ],
                    )
                }
                #[doc = " The account responsible for signing fee-related operations."]
                #[doc = ""]
                #[doc = " This account is expected to provide valid signatures for operations"]
                #[doc = " requiring authentication related to transaction fees."]
                pub fn fee_signer(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::fee_signer::FeeSigner,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "FeeSigner",
                        (),
                        [
                            52u8, 147u8, 187u8, 22u8, 3u8, 203u8, 185u8, 185u8, 157u8, 152u8,
                            194u8, 170u8, 112u8, 203u8, 90u8, 0u8, 209u8, 87u8, 244u8, 162u8, 14u8,
                            86u8, 106u8, 185u8, 212u8, 1u8, 184u8, 108u8, 141u8, 208u8, 234u8,
                            172u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores the state of nonces used for preventing replay attacks."]
                pub fn nonces_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::nonces::Nonces,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Nonces",
                        (),
                        [
                            75u8, 238u8, 230u8, 161u8, 88u8, 143u8, 104u8, 161u8, 72u8, 180u8,
                            249u8, 177u8, 208u8, 84u8, 116u8, 237u8, 150u8, 87u8, 183u8, 233u8,
                            5u8, 61u8, 200u8, 6u8, 37u8, 128u8, 17u8, 203u8, 147u8, 11u8, 113u8,
                            214u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores the state of nonces used for preventing replay attacks."]
                pub fn nonces(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::nonces::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::nonces::Param0,
                    >,
                    types::nonces::Nonces,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Nonces",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            75u8, 238u8, 230u8, 161u8, 88u8, 143u8, 104u8, 161u8, 72u8, 180u8,
                            249u8, 177u8, 208u8, 84u8, 116u8, 237u8, 150u8, 87u8, 183u8, 233u8,
                            5u8, 61u8, 200u8, 6u8, 37u8, 128u8, 17u8, 203u8, 147u8, 11u8, 113u8,
                            214u8,
                        ],
                    )
                }
                #[doc = " The account where marketplace payouts will be sent."]
                pub fn payout_address(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::payout_address::PayoutAddress,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "PayoutAddress",
                        (),
                        [
                            90u8, 167u8, 216u8, 26u8, 22u8, 37u8, 191u8, 40u8, 156u8, 229u8, 158u8,
                            60u8, 37u8, 114u8, 43u8, 47u8, 83u8, 42u8, 92u8, 179u8, 41u8, 158u8,
                            151u8, 215u8, 12u8, 196u8, 151u8, 33u8, 165u8, 83u8, 127u8, 188u8,
                        ],
                    )
                }
                #[doc = " A mapping of active Ask orders in the marketplace."]
                pub fn asks_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::asks::Asks,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Asks",
                        (),
                        [
                            67u8, 79u8, 161u8, 45u8, 141u8, 203u8, 224u8, 245u8, 237u8, 188u8,
                            30u8, 190u8, 50u8, 52u8, 191u8, 172u8, 91u8, 113u8, 127u8, 16u8, 86u8,
                            248u8, 70u8, 115u8, 165u8, 15u8, 213u8, 2u8, 12u8, 113u8, 38u8, 72u8,
                        ],
                    )
                }
                #[doc = " A mapping of active Ask orders in the marketplace."]
                pub fn asks_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::asks::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::asks::Param0,
                    >,
                    types::asks::Asks,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Asks",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            67u8, 79u8, 161u8, 45u8, 141u8, 203u8, 224u8, 245u8, 237u8, 188u8,
                            30u8, 190u8, 50u8, 52u8, 191u8, 172u8, 91u8, 113u8, 127u8, 16u8, 86u8,
                            248u8, 70u8, 115u8, 165u8, 15u8, 213u8, 2u8, 12u8, 113u8, 38u8, 72u8,
                        ],
                    )
                }
                #[doc = " A mapping of active Ask orders in the marketplace."]
                pub fn asks(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::asks::Param0>,
                    _1: impl ::core::borrow::Borrow<types::asks::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::asks::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::asks::Param1,
                        >,
                    ),
                    types::asks::Asks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Asks",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            67u8, 79u8, 161u8, 45u8, 141u8, 203u8, 224u8, 245u8, 237u8, 188u8,
                            30u8, 190u8, 50u8, 52u8, 191u8, 172u8, 91u8, 113u8, 127u8, 16u8, 86u8,
                            248u8, 70u8, 115u8, 165u8, 15u8, 213u8, 2u8, 12u8, 113u8, 38u8, 72u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores active Bid orders in the marketplace."]
                pub fn bids_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::bids::Bids,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Bids",
                        (),
                        [
                            135u8, 38u8, 181u8, 61u8, 12u8, 5u8, 0u8, 222u8, 100u8, 176u8, 65u8,
                            69u8, 237u8, 186u8, 184u8, 78u8, 223u8, 101u8, 52u8, 155u8, 97u8,
                            182u8, 30u8, 226u8, 106u8, 130u8, 137u8, 229u8, 201u8, 176u8, 166u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores active Bid orders in the marketplace."]
                pub fn bids_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::bids::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::bids::Param0,
                    >,
                    types::bids::Bids,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Bids",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            135u8, 38u8, 181u8, 61u8, 12u8, 5u8, 0u8, 222u8, 100u8, 176u8, 65u8,
                            69u8, 237u8, 186u8, 184u8, 78u8, 223u8, 101u8, 52u8, 155u8, 97u8,
                            182u8, 30u8, 226u8, 106u8, 130u8, 137u8, 229u8, 201u8, 176u8, 166u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores active Bid orders in the marketplace."]
                pub fn bids_iter2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::bids::Param0>,
                    _1: impl ::core::borrow::Borrow<types::bids::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::bids::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::bids::Param1,
                        >,
                    ),
                    types::bids::Bids,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Bids",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            135u8, 38u8, 181u8, 61u8, 12u8, 5u8, 0u8, 222u8, 100u8, 176u8, 65u8,
                            69u8, 237u8, 186u8, 184u8, 78u8, 223u8, 101u8, 52u8, 155u8, 97u8,
                            182u8, 30u8, 226u8, 106u8, 130u8, 137u8, 229u8, 201u8, 176u8, 166u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " A mapping that stores active Bid orders in the marketplace."]
                pub fn bids(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::bids::Param0>,
                    _1: impl ::core::borrow::Borrow<types::bids::Param1>,
                    _2: impl ::core::borrow::Borrow<types::bids::Param2>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::bids::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::bids::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::bids::Param2,
                        >,
                    ),
                    types::bids::Bids,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Marketplace",
                        "Bids",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                        ),
                        [
                            135u8, 38u8, 181u8, 61u8, 12u8, 5u8, 0u8, 222u8, 100u8, 176u8, 65u8,
                            69u8, 237u8, 186u8, 184u8, 78u8, 223u8, 101u8, 52u8, 155u8, 97u8,
                            182u8, 30u8, 226u8, 106u8, 130u8, 137u8, 229u8, 201u8, 176u8, 166u8,
                            32u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount of time for an ask duration."]
                pub fn min_order_duration(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u64,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Marketplace",
                        "MinOrderDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Size of nonce StorageValue"]
                pub fn nonce_string_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Marketplace",
                        "NonceStringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multibatching {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_multibatching::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_multibatching::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute multiple calls from multiple callers in a single batch."]
                #[doc = ""]
                #[doc = "If one of the calls fails, the whole batch reverts."]
                #[doc = ""]
                #[doc = "This utility is primarily intended to support cases where the calls"]
                #[doc = "are interdependent - think a trade operation where Alice intends"]
                #[doc = "to transfer an nft item X to Bob if and only if Bob sends an nft"]
                #[doc = "item Y to Alice. For that reason it is designed in such a way"]
                #[doc = "that every caller must sign the batch as a whole instead of only"]
                #[doc = "their own calls. This has a pleasant side effect of reducing the"]
                #[doc = "execution cost compared to signing each call separately, as only"]
                #[doc = "one signature is required per each unique caller."]
                #[doc = ""]
                #[doc = "As the data signed by callers is a well-formed call, this allows"]
                #[doc = "users to validate what they're signing by just decoding the data"]
                #[doc = "using a third-party tool before signing them, e.g. by just going"]
                #[doc = "to the decode tab on the official Parachain Explorer"]
                #[doc = "<https://polkadot.js.org/apps/#/extrinsics/decode>."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = ""]
                #[doc = "- `domain` - the domain of this operation that must be unique per"]
                #[doc = "pallet instance across networks."]
                #[doc = "- `sender` - must be the same as the sender of the transaction"]
                #[doc = "- `bias` - an arbitrary 32 byte array that can be used to avoid"]
                #[doc = "hash collisions."]
                #[doc = "- `calls` - a sequence of calls to execute on behalf of their"]
                #[doc = "respective callers."]
                #[doc = "- `approvals` - a set of signatures, one signature per a unique"]
                #[doc = "caller."]
                #[doc = ""]
                #[doc = "# Usage"]
                #[doc = ""]
                #[doc = "- Prepare a complete `batch()` call with empty vec for `approvals`"]
                #[doc = "parameter."]
                #[doc = "- Encode the call into scale-encoded bytes."]
                #[doc = "- Form the `approvals` array by having every caller that has"]
                #[doc = "calls in the batch sign these bytes, one signature per caller."]
                #[doc = "- Send the `batch()` call with the same data and the collected"]
                #[doc = "approvals."]
                #[doc = ""]
                pub struct Batch {
                    pub domain: batch::Domain,
                    pub sender: batch::Sender,
                    pub bias: batch::Bias,
                    pub expires_at: batch::ExpiresAt,
                    pub calls: batch::Calls,
                    pub approvals: batch::Approvals,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Domain = [::core::primitive::u8; 8usize];
                    pub type Sender = runtime_types::account::AccountId20;
                    pub type Bias = [::core::primitive::u8; 32usize];
                    pub type ExpiresAt = ::core::primitive::u64;
                    pub type Calls = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_multibatching::pallet::BatchedCall,
                    >;
                    pub type Approvals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::Approval,
                        >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Multibatching";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute multiple calls from multiple callers in a single batch."]
                #[doc = ""]
                #[doc = "If one of the calls fails, the whole batch reverts."]
                #[doc = ""]
                #[doc = "This function works the same as [Pallet::batch], but the bytes signed by"]
                #[doc = "approvers must be wrapped in between <Bytes> ... </Bytes>."]
                #[doc = "This is how the rawSign is currently implemented in modern substrate clients."]
                #[doc = ""]
                pub struct BatchV2 {
                    pub domain: batch_v2::Domain,
                    pub sender: batch_v2::Sender,
                    pub bias: batch_v2::Bias,
                    pub expires_at: batch_v2::ExpiresAt,
                    pub calls: batch_v2::Calls,
                    pub approvals: batch_v2::Approvals,
                }
                pub mod batch_v2 {
                    use super::runtime_types;
                    pub type Domain = [::core::primitive::u8; 8usize];
                    pub type Sender = runtime_types::account::AccountId20;
                    pub type Bias = [::core::primitive::u8; 32usize];
                    pub type ExpiresAt = ::core::primitive::u64;
                    pub type Calls = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_multibatching::pallet::BatchedCall,
                    >;
                    pub type Approvals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::Approval,
                        >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BatchV2 {
                    const PALLET: &'static str = "Multibatching";
                    const CALL: &'static str = "batch_v2";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Execute multiple calls from multiple callers in a single batch."]
                #[doc = ""]
                #[doc = "If one of the calls fails, the whole batch reverts."]
                #[doc = ""]
                #[doc = "This utility is primarily intended to support cases where the calls"]
                #[doc = "are interdependent - think a trade operation where Alice intends"]
                #[doc = "to transfer an nft item X to Bob if and only if Bob sends an nft"]
                #[doc = "item Y to Alice. For that reason it is designed in such a way"]
                #[doc = "that every caller must sign the batch as a whole instead of only"]
                #[doc = "their own calls. This has a pleasant side effect of reducing the"]
                #[doc = "execution cost compared to signing each call separately, as only"]
                #[doc = "one signature is required per each unique caller."]
                #[doc = ""]
                #[doc = "As the data signed by callers is a well-formed call, this allows"]
                #[doc = "users to validate what they're signing by just decoding the data"]
                #[doc = "using a third-party tool before signing them, e.g. by just going"]
                #[doc = "to the decode tab on the official Parachain Explorer"]
                #[doc = "<https://polkadot.js.org/apps/#/extrinsics/decode>."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = ""]
                #[doc = "- `domain` - the domain of this operation that must be unique per"]
                #[doc = "pallet instance across networks."]
                #[doc = "- `sender` - must be the same as the sender of the transaction"]
                #[doc = "- `bias` - an arbitrary 32 byte array that can be used to avoid"]
                #[doc = "hash collisions."]
                #[doc = "- `calls` - a sequence of calls to execute on behalf of their"]
                #[doc = "respective callers."]
                #[doc = "- `approvals` - a set of signatures, one signature per a unique"]
                #[doc = "caller."]
                #[doc = ""]
                #[doc = "# Usage"]
                #[doc = ""]
                #[doc = "- Prepare a complete `batch()` call with empty vec for `approvals`"]
                #[doc = "parameter."]
                #[doc = "- Encode the call into scale-encoded bytes."]
                #[doc = "- Form the `approvals` array by having every caller that has"]
                #[doc = "calls in the batch sign these bytes, one signature per caller."]
                #[doc = "- Send the `batch()` call with the same data and the collected"]
                #[doc = "approvals."]
                #[doc = ""]
                pub fn batch(
                    &self,
                    domain: types::batch::Domain,
                    sender: types::batch::Sender,
                    bias: types::batch::Bias,
                    expires_at: types::batch::ExpiresAt,
                    calls: types::batch::Calls,
                    approvals: types::batch::Approvals,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Batch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multibatching",
                        "batch",
                        types::Batch {
                            domain,
                            sender,
                            bias,
                            expires_at,
                            calls,
                            approvals,
                        },
                        [
                            134u8, 231u8, 137u8, 186u8, 107u8, 4u8, 12u8, 232u8, 181u8, 214u8,
                            221u8, 25u8, 161u8, 170u8, 95u8, 22u8, 8u8, 87u8, 20u8, 194u8, 81u8,
                            87u8, 99u8, 120u8, 36u8, 93u8, 43u8, 220u8, 211u8, 145u8, 233u8, 23u8,
                        ],
                    )
                }
                #[doc = "Execute multiple calls from multiple callers in a single batch."]
                #[doc = ""]
                #[doc = "If one of the calls fails, the whole batch reverts."]
                #[doc = ""]
                #[doc = "This function works the same as [Pallet::batch], but the bytes signed by"]
                #[doc = "approvers must be wrapped in between <Bytes> ... </Bytes>."]
                #[doc = "This is how the rawSign is currently implemented in modern substrate clients."]
                #[doc = ""]
                pub fn batch_v2(
                    &self,
                    domain: types::batch_v2::Domain,
                    sender: types::batch_v2::Sender,
                    bias: types::batch_v2::Bias,
                    expires_at: types::batch_v2::ExpiresAt,
                    calls: types::batch_v2::Calls,
                    approvals: types::batch_v2::Approvals,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BatchV2>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Multibatching",
                        "batch_v2",
                        types::BatchV2 {
                            domain,
                            sender,
                            bias,
                            expires_at,
                            calls,
                            approvals,
                        },
                        [
                            176u8, 91u8, 97u8, 196u8, 218u8, 16u8, 242u8, 159u8, 238u8, 35u8,
                            104u8, 139u8, 28u8, 167u8, 227u8, 34u8, 79u8, 83u8, 148u8, 76u8, 179u8,
                            81u8, 217u8, 171u8, 229u8, 253u8, 106u8, 1u8, 208u8, 35u8, 1u8, 194u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_multibatching::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct BatchApplied {
                pub hash: batch_applied::Hash,
            }
            pub mod batch_applied {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchApplied {
                const PALLET: &'static str = "Multibatching";
                const EVENT: &'static str = "BatchApplied";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod applied {
                    use super::runtime_types;
                    pub type Applied = ();
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn applied_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::applied::Applied,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Multibatching",
                        "Applied",
                        (),
                        [
                            254u8, 76u8, 27u8, 53u8, 250u8, 111u8, 251u8, 167u8, 167u8, 10u8,
                            149u8, 14u8, 15u8, 86u8, 61u8, 5u8, 139u8, 200u8, 203u8, 61u8, 175u8,
                            241u8, 206u8, 87u8, 194u8, 45u8, 146u8, 56u8, 204u8, 54u8, 227u8, 61u8,
                        ],
                    )
                }
                pub fn applied(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::applied::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::applied::Param0,
                    >,
                    types::applied::Applied,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Multibatching",
                        "Applied",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            254u8, 76u8, 27u8, 53u8, 250u8, 111u8, 251u8, 167u8, 167u8, 10u8,
                            149u8, 14u8, 15u8, 86u8, 61u8, 5u8, 139u8, 200u8, 203u8, 61u8, 175u8,
                            241u8, 206u8, 87u8, 194u8, 45u8, 146u8, 56u8, 204u8, 54u8, 227u8, 61u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_calls(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Multibatching",
                        "MaxCalls",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn domain(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    [::core::primitive::u8; 8usize],
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Multibatching",
                        "Domain",
                        [
                            157u8, 118u8, 79u8, 88u8, 241u8, 22u8, 185u8, 37u8, 42u8, 20u8, 133u8,
                            240u8, 11u8, 25u8, 66u8, 154u8, 84u8, 163u8, 78u8, 92u8, 171u8, 82u8,
                            248u8, 76u8, 189u8, 70u8, 142u8, 249u8, 153u8, 84u8, 180u8, 60u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet."]
        pub type Error = runtime_types::pallet_sudo::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_sudo::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                pub struct Sudo {
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct SudoUncheckedWeight {
                    pub call:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                pub struct SetKey {
                    pub new: set_key::New,
                }
                pub mod set_key {
                    use super::runtime_types;
                    pub type New = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct SudoAs {
                    pub who: sudo_as::Who,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_as::Call>,
                }
                pub mod sudo_as {
                    use super::runtime_types;
                    pub type Who = runtime_types::account::AccountId20;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Permanently removes the sudo key."]
                #[doc = ""]
                #[doc = "**This cannot be un-done.**"]
                pub struct RemoveKey;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "remove_key";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                pub fn sudo(
                    &self,
                    call: types::sudo::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Sudo>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            169u8, 99u8, 242u8, 195u8, 186u8, 251u8, 44u8, 236u8, 204u8, 72u8,
                            136u8, 25u8, 12u8, 251u8, 99u8, 44u8, 143u8, 28u8, 157u8, 44u8, 66u8,
                            222u8, 252u8, 238u8, 120u8, 207u8, 239u8, 93u8, 119u8, 31u8, 189u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoUncheckedWeight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            weight,
                        },
                        [
                            228u8, 117u8, 238u8, 32u8, 196u8, 88u8, 246u8, 247u8, 168u8, 229u8,
                            99u8, 145u8, 78u8, 65u8, 90u8, 194u8, 227u8, 53u8, 30u8, 175u8, 127u8,
                            151u8, 239u8, 110u8, 1u8, 66u8, 54u8, 128u8, 220u8, 255u8, 247u8,
                            136u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                pub fn set_key(
                    &self,
                    new: types::set_key::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKey>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            238u8, 140u8, 16u8, 19u8, 56u8, 31u8, 53u8, 0u8, 211u8, 184u8, 54u8,
                            107u8, 73u8, 23u8, 54u8, 134u8, 135u8, 54u8, 143u8, 89u8, 157u8, 179u8,
                            185u8, 168u8, 31u8, 167u8, 173u8, 125u8, 104u8, 145u8, 239u8, 219u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn sudo_as(
                    &self,
                    who: types::sudo_as::Who,
                    call: types::sudo_as::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoAs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            246u8, 97u8, 59u8, 82u8, 4u8, 34u8, 90u8, 178u8, 100u8, 138u8, 82u8,
                            190u8, 127u8, 75u8, 120u8, 131u8, 255u8, 40u8, 26u8, 112u8, 10u8, 11u8,
                            26u8, 139u8, 67u8, 154u8, 11u8, 77u8, 78u8, 97u8, 30u8, 142u8,
                        ],
                    )
                }
                #[doc = "Permanently removes the sudo key."]
                #[doc = ""]
                #[doc = "**This cannot be un-done.**"]
                pub fn remove_key(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveKey>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "remove_key",
                        types::RemoveKey {},
                        [
                            133u8, 253u8, 54u8, 175u8, 202u8, 239u8, 5u8, 198u8, 180u8, 138u8,
                            25u8, 28u8, 109u8, 40u8, 30u8, 56u8, 126u8, 100u8, 52u8, 205u8, 250u8,
                            191u8, 61u8, 195u8, 172u8, 142u8, 184u8, 239u8, 247u8, 10u8, 211u8,
                            79u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sudo call just took place."]
            pub struct Sudid {
                pub sudo_result: sudid::SudoResult,
            }
            pub mod sudid {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The sudo key has been updated."]
            pub struct KeyChanged {
                pub old: key_changed::Old,
                pub new: key_changed::New,
            }
            pub mod key_changed {
                use super::runtime_types;
                pub type Old = ::core::option::Option<runtime_types::account::AccountId20>;
                pub type New = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The key was permanently removed."]
            pub struct KeyRemoved;
            impl ::subxt::ext::subxt_core::events::StaticEvent for KeyRemoved {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A [sudo_as](Pallet::sudo_as) call just took place."]
            pub struct SudoAsDone {
                pub sudo_result: sudo_as_done::SudoResult,
            }
            pub mod sudo_as_done {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod key {
                    use super::runtime_types;
                    pub type Key = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::key::Key,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Sudo",
                        "Key",
                        (),
                        [
                            158u8, 215u8, 223u8, 217u8, 35u8, 56u8, 30u8, 236u8, 175u8, 210u8,
                            217u8, 34u8, 129u8, 233u8, 209u8, 131u8, 102u8, 70u8, 130u8, 55u8,
                            115u8, 41u8, 33u8, 30u8, 22u8, 39u8, 135u8, 150u8, 173u8, 228u8, 222u8,
                            164u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collective::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub struct SetMembers {
                    pub new_members: set_members::NewMembers,
                    pub prime: set_members::Prime,
                    pub old_count: set_members::OldCount,
                }
                pub mod set_members {
                    use super::runtime_types;
                    pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Prime = ::core::option::Option<runtime_types::account::AccountId20>;
                    pub type OldCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub struct Execute {
                    pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Proposal>,
                    #[codec(compact)]
                    pub length_bound: execute::LengthBound,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: propose::Threshold,
                    pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<propose::Proposal>,
                    #[codec(compact)]
                    pub length_bound: propose::LengthBound,
                }
                pub mod propose {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u32;
                    pub type Proposal = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub struct Vote {
                    pub proposal: vote::Proposal,
                    #[codec(compact)]
                    pub index: vote::Index,
                    pub approve: vote::Approve,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type Proposal = ::subxt::ext::subxt_core::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type Approve = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub struct DisapproveProposal {
                    pub proposal_hash: disapprove_proposal::ProposalHash,
                }
                pub mod disapprove_proposal {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub struct Close {
                    pub proposal_hash: close::ProposalHash,
                    #[codec(compact)]
                    pub index: close::Index,
                    pub proposal_weight_bound: close::ProposalWeightBound,
                    #[codec(compact)]
                    pub length_bound: close::LengthBound,
                }
                pub mod close {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "close";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disapprove the proposal and burn the cost held for storing this proposal."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: must be the `KillOrigin`."]
                #[doc = "- `proposal_hash`: The hash of the proposal that should be killed."]
                #[doc = ""]
                #[doc = "Emits `Killed` and `ProposalCostBurned` if any cost was held for a given proposal."]
                pub struct Kill {
                    pub proposal_hash: kill::ProposalHash,
                }
                pub mod kill {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Kill {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "kill";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Release the cost held for storing a proposal once the given proposal is completed."]
                #[doc = ""]
                #[doc = "If there is no associated cost for the given proposal, this call will have no effect."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: must be `Signed` or `Root`."]
                #[doc = "- `proposal_hash`: The hash of the proposal."]
                #[doc = ""]
                #[doc = "Emits `ProposalCostReleased` if any cost held for a given proposal."]
                pub struct ReleaseProposalCost {
                    pub proposal_hash: release_proposal_cost::ProposalHash,
                }
                pub mod release_proposal_cost {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReleaseProposalCost {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "release_proposal_cost";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: types::set_members::NewMembers,
                    prime: types::set_members::Prime,
                    old_count: types::set_members::OldCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: types::execute::Proposal,
                    length_bound: types::execute::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "execute",
                        types::Execute {
                            proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            8u8, 163u8, 145u8, 150u8, 248u8, 188u8, 2u8, 250u8, 198u8, 216u8, 19u8,
                            71u8, 28u8, 98u8, 44u8, 72u8, 60u8, 106u8, 18u8, 85u8, 198u8, 48u8,
                            191u8, 234u8, 158u8, 77u8, 30u8, 66u8, 30u8, 73u8, 63u8, 231u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: types::propose::Threshold,
                    proposal: types::propose::Proposal,
                    length_bound: types::propose::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            61u8, 17u8, 56u8, 114u8, 149u8, 230u8, 31u8, 66u8, 84u8, 235u8, 115u8,
                            71u8, 80u8, 242u8, 212u8, 211u8, 190u8, 92u8, 33u8, 48u8, 134u8, 65u8,
                            194u8, 148u8, 33u8, 138u8, 234u8, 72u8, 9u8, 202u8, 39u8, 23u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: types::vote::Proposal,
                    index: types::vote::Index,
                    approve: types::vote::Approve,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: types::disapprove_proposal::ProposalHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DisapproveProposal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: types::close::ProposalHash,
                    index: types::close::Index,
                    proposal_weight_bound: types::close::ProposalWeightBound,
                    length_bound: types::close::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Close>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
                #[doc = "Disapprove the proposal and burn the cost held for storing this proposal."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: must be the `KillOrigin`."]
                #[doc = "- `proposal_hash`: The hash of the proposal that should be killed."]
                #[doc = ""]
                #[doc = "Emits `Killed` and `ProposalCostBurned` if any cost was held for a given proposal."]
                pub fn kill(
                    &self,
                    proposal_hash: types::kill::ProposalHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Kill>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "kill",
                        types::Kill { proposal_hash },
                        [
                            190u8, 209u8, 250u8, 180u8, 66u8, 156u8, 159u8, 253u8, 174u8, 70u8,
                            121u8, 156u8, 70u8, 240u8, 46u8, 219u8, 85u8, 172u8, 136u8, 193u8,
                            225u8, 172u8, 157u8, 22u8, 195u8, 10u8, 101u8, 40u8, 57u8, 34u8, 108u8,
                            206u8,
                        ],
                    )
                }
                #[doc = "Release the cost held for storing a proposal once the given proposal is completed."]
                #[doc = ""]
                #[doc = "If there is no associated cost for the given proposal, this call will have no effect."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: must be `Signed` or `Root`."]
                #[doc = "- `proposal_hash`: The hash of the proposal."]
                #[doc = ""]
                #[doc = "Emits `ProposalCostReleased` if any cost held for a given proposal."]
                pub fn release_proposal_cost(
                    &self,
                    proposal_hash: types::release_proposal_cost::ProposalHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ReleaseProposalCost>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "release_proposal_cost",
                        types::ReleaseProposalCost { proposal_hash },
                        [
                            66u8, 154u8, 93u8, 101u8, 111u8, 62u8, 246u8, 128u8, 240u8, 32u8,
                            120u8, 79u8, 20u8, 151u8, 136u8, 144u8, 106u8, 8u8, 114u8, 204u8,
                            163u8, 80u8, 129u8, 124u8, 50u8, 49u8, 61u8, 159u8, 79u8, 221u8, 199u8,
                            220u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: proposed::Account,
                pub proposal_index: proposed::ProposalIndex,
                pub proposal_hash: proposed::ProposalHash,
                pub threshold: proposed::Threshold,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Threshold = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: voted::Account,
                pub proposal_hash: voted::ProposalHash,
                pub voted: voted::Voted,
                pub yes: voted::Yes,
                pub no: voted::No,
            }
            pub mod voted {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Voted = ::core::primitive::bool;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: approved::ProposalHash,
            }
            pub mod approved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: disapproved::ProposalHash,
            }
            pub mod disapproved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: executed::ProposalHash,
                pub result: executed::Result,
            }
            pub mod executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: member_executed::ProposalHash,
                pub result: member_executed::Result,
            }
            pub mod member_executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: closed::ProposalHash,
                pub yes: closed::Yes,
                pub no: closed::No,
            }
            pub mod closed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal was killed."]
            pub struct Killed {
                pub proposal_hash: killed::ProposalHash,
            }
            pub mod killed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Killed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Killed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some cost for storing a proposal was burned."]
            pub struct ProposalCostBurned {
                pub proposal_hash: proposal_cost_burned::ProposalHash,
                pub who: proposal_cost_burned::Who,
            }
            pub mod proposal_cost_burned {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Who = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProposalCostBurned {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "ProposalCostBurned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some cost for storing a proposal was released."]
            pub struct ProposalCostReleased {
                pub proposal_hash: proposal_cost_released::ProposalHash,
                pub who: proposal_cost_released::Who,
            }
            pub mod proposal_cost_released {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Who = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProposalCostReleased {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "ProposalCostReleased";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::ext::subxt_core::utils::H256,
                        >;
                }
                pub mod proposal_of {
                    use super::runtime_types;
                    pub type ProposalOf = runtime_types::mainnet_runtime::RuntimeCall;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod cost_of {
                    use super::runtime_types;
                    pub type CostOf = (runtime_types::account::AccountId20, ());
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod voting {
                    use super::runtime_types;
                    pub type Voting = runtime_types::pallet_collective::Votes<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod members {
                    use super::runtime_types;
                    pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposals::Proposals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Proposals",
                        (),
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_of::ProposalOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalOf",
                        (),
                        [
                            11u8, 254u8, 242u8, 33u8, 28u8, 162u8, 147u8, 166u8, 250u8, 59u8, 67u8,
                            241u8, 111u8, 31u8, 184u8, 160u8, 135u8, 239u8, 23u8, 44u8, 212u8, 9u8,
                            72u8, 253u8, 233u8, 34u8, 134u8, 213u8, 120u8, 182u8, 216u8, 212u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proposal_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proposal_of::Param0,
                    >,
                    types::proposal_of::ProposalOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            11u8, 254u8, 242u8, 33u8, 28u8, 162u8, 147u8, 166u8, 250u8, 59u8, 67u8,
                            241u8, 111u8, 31u8, 184u8, 160u8, 135u8, 239u8, 23u8, 44u8, 212u8, 9u8,
                            72u8, 253u8, 233u8, 34u8, 134u8, 213u8, 120u8, 182u8, 216u8, 212u8,
                        ],
                    )
                }
                #[doc = " Consideration cost created for publishing and storing a proposal."]
                #[doc = ""]
                #[doc = " Determined by [Config::Consideration] and may be not present for certain proposals (e.g. if"]
                #[doc = " the proposal count at the time of creation was below threshold N)."]
                pub fn cost_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::cost_of::CostOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "CostOf",
                        (),
                        [
                            255u8, 162u8, 78u8, 65u8, 121u8, 100u8, 226u8, 225u8, 86u8, 204u8,
                            96u8, 204u8, 122u8, 103u8, 195u8, 38u8, 126u8, 75u8, 19u8, 170u8, 1u8,
                            120u8, 122u8, 104u8, 8u8, 206u8, 214u8, 89u8, 71u8, 86u8, 3u8, 237u8,
                        ],
                    )
                }
                #[doc = " Consideration cost created for publishing and storing a proposal."]
                #[doc = ""]
                #[doc = " Determined by [Config::Consideration] and may be not present for certain proposals (e.g. if"]
                #[doc = " the proposal count at the time of creation was below threshold N)."]
                pub fn cost_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::cost_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::cost_of::Param0,
                    >,
                    types::cost_of::CostOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "CostOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            255u8, 162u8, 78u8, 65u8, 121u8, 100u8, 226u8, 225u8, 86u8, 204u8,
                            96u8, 204u8, 122u8, 103u8, 195u8, 38u8, 126u8, 75u8, 19u8, 170u8, 1u8,
                            120u8, 122u8, 104u8, 8u8, 206u8, 214u8, 89u8, 71u8, 86u8, 3u8, 237u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::voting::Voting,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Voting",
                        (),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::voting::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::voting::Param0,
                    >,
                    types::voting::Voting,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Voting",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_count::ProposalCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalCount",
                        (),
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::members::Members,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Members",
                        (),
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of abstentions."]
                pub fn prime(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::prime::Prime,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Prime",
                        (),
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_weights::weight_v2::Weight,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Council",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod democracy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_democracy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_democracy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Propose a sensitive action to be taken."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                #[doc = "have funds to cover the deposit."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                #[doc = ""]
                #[doc = "Emits `Proposed`."]
                pub struct Propose {
                    pub proposal: propose::Proposal,
                    #[codec(compact)]
                    pub value: propose::Value,
                }
                pub mod propose {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::mainnet_runtime::RuntimeCall,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Signals agreement with a particular proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                #[doc = ""]
                #[doc = "- `proposal`: The index of the proposal to second."]
                pub struct Second {
                    #[codec(compact)]
                    pub proposal: second::Proposal,
                }
                pub mod second {
                    use super::runtime_types;
                    pub type Proposal = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Second {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "second";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                pub struct Vote {
                    #[codec(compact)]
                    pub ref_index: vote::RefIndex,
                    pub vote: vote::Vote,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type RefIndex = ::core::primitive::u32;
                    pub type Vote =
                        runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                #[doc = ""]
                #[doc = "-`ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub struct EmergencyCancel {
                    pub ref_index: emergency_cancel::RefIndex,
                }
                pub mod emergency_cancel {
                    use super::runtime_types;
                    pub type RefIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for EmergencyCancel {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "emergency_cancel";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                pub struct ExternalPropose {
                    pub proposal: external_propose::Proposal,
                }
                pub mod external_propose {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::mainnet_runtime::RuntimeCall,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalPropose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                #[doc = "an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ExternalProposeMajority {
                    pub proposal: external_propose_majority::Proposal,
                }
                pub mod external_propose_majority {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::mainnet_runtime::RuntimeCall,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalProposeMajority {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_majority";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                #[doc = "schedule an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct ExternalProposeDefault {
                    pub proposal: external_propose_default::Proposal,
                }
                pub mod external_propose_default {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::mainnet_runtime::RuntimeCall,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExternalProposeDefault {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_default";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                #[doc = "but it is not a majority-carries referendum then it fails."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                #[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
                #[doc = "\tMust be always greater than zero."]
                #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                #[doc = "  enacted. This doesn't have a minimum amount."]
                #[doc = ""]
                #[doc = "Emits `Started`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub struct FastTrack {
                    pub proposal_hash: fast_track::ProposalHash,
                    pub voting_period: fast_track::VotingPeriod,
                    pub delay: fast_track::Delay,
                }
                pub mod fast_track {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type VotingPeriod = ::core::primitive::u32;
                    pub type Delay = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FastTrack {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "fast_track";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Veto and blacklist the external proposal hash."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                #[doc = ""]
                #[doc = "Emits `Vetoed`."]
                #[doc = ""]
                #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                pub struct VetoExternal {
                    pub proposal_hash: veto_external::ProposalHash,
                }
                pub mod veto_external {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VetoExternal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "veto_external";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "# Weight: `O(1)`."]
                pub struct CancelReferendum {
                    #[codec(compact)]
                    pub ref_index: cancel_referendum::RefIndex,
                }
                pub mod cancel_referendum {
                    use super::runtime_types;
                    pub type RefIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelReferendum {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_referendum";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub struct Delegate {
                    pub to: delegate::To,
                    pub conviction: delegate::Conviction,
                    pub balance: delegate::Balance,
                }
                pub mod delegate {
                    use super::runtime_types;
                    pub type To = runtime_types::account::AccountId20;
                    pub type Conviction = runtime_types::pallet_democracy::conviction::Conviction;
                    pub type Balance = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Undelegate the voting power of the sending account."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub struct Undelegate;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Undelegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "undelegate";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clears all public proposals."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub struct ClearPublicProposals;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPublicProposals {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "clear_public_proposals";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unlock tokens that have an expired lock."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub struct Unlock {
                    pub target: unlock::Target,
                }
                pub mod unlock {
                    use super::runtime_types;
                    pub type Target = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the referendum was cancelled, or"]
                #[doc = "- the referendum is ongoing, or"]
                #[doc = "- the referendum has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the referendum has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for referendum `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub struct RemoveVote {
                    pub index: remove_vote::Index,
                }
                pub mod remove_vote {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_vote";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                #[doc = "  referendum `index`."]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub struct RemoveOtherVote {
                    pub target: remove_other_vote::Target,
                    pub index: remove_other_vote::Index,
                }
                pub mod remove_other_vote {
                    use super::runtime_types;
                    pub type Target = runtime_types::account::AccountId20;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveOtherVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_other_vote";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                #[doc = "proposed again."]
                #[doc = ""]
                #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                #[doc = "then it will be cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                #[doc = "cancelled."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                #[doc = "  reasonable value)."]
                pub struct Blacklist {
                    pub proposal_hash: blacklist::ProposalHash,
                    pub maybe_ref_index: blacklist::MaybeRefIndex,
                }
                pub mod blacklist {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type MaybeRefIndex = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Blacklist {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "blacklist";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                #[doc = ""]
                #[doc = "- `prop_index`: The index of the proposal to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                pub struct CancelProposal {
                    #[codec(compact)]
                    pub prop_index: cancel_proposal::PropIndex,
                }
                pub mod cancel_proposal {
                    use super::runtime_types;
                    pub type PropIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelProposal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_proposal";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set or clear a metadata of a proposal or a referendum."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
                #[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
                #[doc = "      threshold."]
                #[doc = "    - `Signed` by a creator for a public proposal."]
                #[doc = "    - `Signed` to clear a metadata for a finished referendum."]
                #[doc = "    - `Root` to set a metadata for an ongoing referendum."]
                #[doc = "- `owner`: an identifier of a metadata owner."]
                #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                pub struct SetMetadata {
                    pub owner: set_metadata::Owner,
                    pub maybe_hash: set_metadata::MaybeHash,
                }
                pub mod set_metadata {
                    use super::runtime_types;
                    pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
                    pub type MaybeHash =
                        ::core::option::Option<::subxt::ext::subxt_core::utils::H256>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose a sensitive action to be taken."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                #[doc = "have funds to cover the deposit."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                #[doc = ""]
                #[doc = "Emits `Proposed`."]
                pub fn propose(
                    &self,
                    proposal: types::propose::Proposal,
                    value: types::propose::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "propose",
                        types::Propose { proposal, value },
                        [
                            164u8, 45u8, 183u8, 137u8, 222u8, 27u8, 138u8, 45u8, 20u8, 18u8, 234u8,
                            211u8, 52u8, 184u8, 234u8, 222u8, 193u8, 9u8, 160u8, 58u8, 198u8,
                            106u8, 236u8, 210u8, 172u8, 34u8, 194u8, 107u8, 135u8, 83u8, 22u8,
                            238u8,
                        ],
                    )
                }
                #[doc = "Signals agreement with a particular proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                #[doc = ""]
                #[doc = "- `proposal`: The index of the proposal to second."]
                pub fn second(
                    &self,
                    proposal: types::second::Proposal,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Second>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "second",
                        types::Second { proposal },
                        [
                            195u8, 55u8, 178u8, 55u8, 129u8, 64u8, 10u8, 131u8, 217u8, 79u8, 1u8,
                            187u8, 73u8, 126u8, 191u8, 221u8, 110u8, 10u8, 13u8, 65u8, 190u8,
                            107u8, 21u8, 236u8, 175u8, 130u8, 227u8, 179u8, 173u8, 39u8, 32u8,
                            147u8,
                        ],
                    )
                }
                #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                #[doc = "otherwise it is a vote to keep the status quo."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to vote for."]
                #[doc = "- `vote`: The vote configuration."]
                pub fn vote(
                    &self,
                    ref_index: types::vote::RefIndex,
                    vote: types::vote::Vote,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "vote",
                        types::Vote { ref_index, vote },
                        [
                            106u8, 195u8, 229u8, 44u8, 217u8, 214u8, 8u8, 234u8, 175u8, 62u8, 97u8,
                            83u8, 193u8, 180u8, 103u8, 26u8, 174u8, 8u8, 2u8, 158u8, 25u8, 122u8,
                            203u8, 122u8, 32u8, 14u8, 107u8, 169u8, 43u8, 240u8, 143u8, 103u8,
                        ],
                    )
                }
                #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                #[doc = ""]
                #[doc = "-`ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn emergency_cancel(
                    &self,
                    ref_index: types::emergency_cancel::RefIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::EmergencyCancel>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "emergency_cancel",
                        types::EmergencyCancel { ref_index },
                        [
                            82u8, 232u8, 19u8, 158u8, 88u8, 69u8, 96u8, 225u8, 106u8, 253u8, 6u8,
                            136u8, 87u8, 0u8, 68u8, 128u8, 122u8, 16u8, 107u8, 76u8, 209u8, 14u8,
                            230u8, 49u8, 228u8, 100u8, 187u8, 10u8, 76u8, 71u8, 197u8, 72u8,
                        ],
                    )
                }
                #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                #[doc = "referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                pub fn external_propose(
                    &self,
                    proposal: types::external_propose::Proposal,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ExternalPropose>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "external_propose",
                        types::ExternalPropose { proposal },
                        [
                            99u8, 120u8, 61u8, 124u8, 244u8, 68u8, 12u8, 240u8, 11u8, 168u8, 4u8,
                            50u8, 19u8, 152u8, 255u8, 97u8, 20u8, 195u8, 141u8, 199u8, 31u8, 250u8,
                            222u8, 136u8, 47u8, 162u8, 0u8, 32u8, 215u8, 110u8, 94u8, 109u8,
                        ],
                    )
                }
                #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                #[doc = "an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_majority(
                    &self,
                    proposal: types::external_propose_majority::Proposal,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExternalProposeMajority,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "external_propose_majority",
                        types::ExternalProposeMajority { proposal },
                        [
                            35u8, 61u8, 130u8, 81u8, 81u8, 180u8, 127u8, 202u8, 67u8, 84u8, 105u8,
                            113u8, 112u8, 210u8, 1u8, 191u8, 10u8, 39u8, 157u8, 164u8, 9u8, 231u8,
                            75u8, 25u8, 17u8, 175u8, 128u8, 180u8, 238u8, 58u8, 236u8, 214u8,
                        ],
                    )
                }
                #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                #[doc = "schedule an external referendum."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                #[doc = ""]
                #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                #[doc = "pre-scheduled `external_propose` call."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn external_propose_default(
                    &self,
                    proposal: types::external_propose_default::Proposal,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExternalProposeDefault,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "external_propose_default",
                        types::ExternalProposeDefault { proposal },
                        [
                            136u8, 199u8, 244u8, 69u8, 5u8, 174u8, 166u8, 251u8, 102u8, 196u8,
                            25u8, 6u8, 33u8, 216u8, 141u8, 78u8, 118u8, 125u8, 128u8, 218u8, 120u8,
                            170u8, 166u8, 15u8, 124u8, 216u8, 128u8, 178u8, 5u8, 74u8, 170u8, 25u8,
                        ],
                    )
                }
                #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                #[doc = "but it is not a majority-carries referendum then it fails."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                #[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
                #[doc = "\tMust be always greater than zero."]
                #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                #[doc = "  enacted. This doesn't have a minimum amount."]
                #[doc = ""]
                #[doc = "Emits `Started`."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`"]
                pub fn fast_track(
                    &self,
                    proposal_hash: types::fast_track::ProposalHash,
                    voting_period: types::fast_track::VotingPeriod,
                    delay: types::fast_track::Delay,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FastTrack>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "fast_track",
                        types::FastTrack {
                            proposal_hash,
                            voting_period,
                            delay,
                        },
                        [
                            96u8, 201u8, 216u8, 109u8, 4u8, 244u8, 52u8, 237u8, 120u8, 234u8, 30u8,
                            102u8, 186u8, 132u8, 214u8, 22u8, 40u8, 75u8, 118u8, 23u8, 56u8, 68u8,
                            192u8, 129u8, 74u8, 61u8, 247u8, 98u8, 103u8, 127u8, 200u8, 171u8,
                        ],
                    )
                }
                #[doc = "Veto and blacklist the external proposal hash."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                #[doc = ""]
                #[doc = "Emits `Vetoed`."]
                #[doc = ""]
                #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                pub fn veto_external(
                    &self,
                    proposal_hash: types::veto_external::ProposalHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VetoExternal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "veto_external",
                        types::VetoExternal { proposal_hash },
                        [
                            121u8, 217u8, 249u8, 134u8, 45u8, 19u8, 126u8, 166u8, 218u8, 223u8,
                            165u8, 124u8, 162u8, 59u8, 56u8, 200u8, 227u8, 125u8, 23u8, 133u8,
                            196u8, 93u8, 210u8, 15u8, 39u8, 26u8, 58u8, 236u8, 9u8, 101u8, 202u8,
                            168u8,
                        ],
                    )
                }
                #[doc = "Remove a referendum."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `ref_index`: The index of the referendum to cancel."]
                #[doc = ""]
                #[doc = "# Weight: `O(1)`."]
                pub fn cancel_referendum(
                    &self,
                    ref_index: types::cancel_referendum::RefIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelReferendum>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "cancel_referendum",
                        types::CancelReferendum { ref_index },
                        [
                            149u8, 120u8, 70u8, 20u8, 126u8, 21u8, 30u8, 33u8, 82u8, 124u8, 229u8,
                            179u8, 169u8, 243u8, 173u8, 146u8, 140u8, 22u8, 124u8, 154u8, 228u8,
                            117u8, 109u8, 88u8, 11u8, 100u8, 235u8, 243u8, 118u8, 99u8, 250u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                #[doc = ""]
                #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                #[doc = "time appropriate for the conviction's lock period."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                #[doc = "  - be delegating already; or"]
                #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                #[doc = "    through `reap_vote` or `unvote`)."]
                #[doc = ""]
                #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                #[doc = "  be more than the account's current balance."]
                #[doc = ""]
                #[doc = "Emits `Delegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn delegate(
                    &self,
                    to: types::delegate::To,
                    conviction: types::delegate::Conviction,
                    balance: types::delegate::Balance,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Delegate>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "delegate",
                        types::Delegate {
                            to,
                            conviction,
                            balance,
                        },
                        [
                            41u8, 59u8, 244u8, 124u8, 221u8, 138u8, 66u8, 47u8, 44u8, 176u8, 249u8,
                            61u8, 51u8, 78u8, 131u8, 239u8, 186u8, 41u8, 234u8, 108u8, 251u8,
                            110u8, 246u8, 177u8, 55u8, 234u8, 228u8, 14u8, 220u8, 109u8, 126u8,
                            78u8,
                        ],
                    )
                }
                #[doc = "Undelegate the voting power of the sending account."]
                #[doc = ""]
                #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                #[doc = "of the conviction with which the delegation was issued."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                #[doc = "currently delegating."]
                #[doc = ""]
                #[doc = "Emits `Undelegated`."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                #[doc = "  voted on. Weight is charged as if maximum votes."]
                pub fn undelegate(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Undelegate>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "undelegate",
                        types::Undelegate {},
                        [
                            225u8, 156u8, 102u8, 1u8, 172u8, 145u8, 88u8, 12u8, 89u8, 32u8, 51u8,
                            83u8, 25u8, 149u8, 132u8, 203u8, 246u8, 98u8, 155u8, 36u8, 165u8,
                            206u8, 233u8, 169u8, 91u8, 85u8, 105u8, 67u8, 46u8, 134u8, 244u8,
                            250u8,
                        ],
                    )
                }
                #[doc = "Clears all public proposals."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Root_."]
                #[doc = ""]
                #[doc = "Weight: `O(1)`."]
                pub fn clear_public_proposals(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPublicProposals>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "clear_public_proposals",
                        types::ClearPublicProposals {},
                        [
                            116u8, 160u8, 246u8, 216u8, 23u8, 188u8, 144u8, 63u8, 97u8, 198u8,
                            11u8, 243u8, 165u8, 84u8, 159u8, 153u8, 235u8, 169u8, 166u8, 15u8,
                            23u8, 116u8, 30u8, 56u8, 133u8, 31u8, 158u8, 114u8, 158u8, 86u8, 106u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "Unlock tokens that have an expired lock."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account to remove the lock on."]
                #[doc = ""]
                #[doc = "Weight: `O(R)` with R number of vote of target."]
                pub fn unlock(
                    &self,
                    target: types::unlock::Target,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unlock>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "unlock",
                        types::Unlock { target },
                        [
                            229u8, 214u8, 212u8, 192u8, 101u8, 156u8, 149u8, 255u8, 156u8, 231u8,
                            66u8, 108u8, 203u8, 69u8, 140u8, 167u8, 54u8, 166u8, 72u8, 103u8,
                            154u8, 58u8, 43u8, 21u8, 28u8, 121u8, 34u8, 99u8, 21u8, 203u8, 106u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If:"]
                #[doc = "- the referendum was cancelled, or"]
                #[doc = "- the referendum is ongoing, or"]
                #[doc = "- the referendum has ended such that"]
                #[doc = "  - the vote of the account was in opposition to the result; or"]
                #[doc = "  - there was no conviction to the account's vote; or"]
                #[doc = "  - the account made a split vote"]
                #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                #[doc = "funds being available."]
                #[doc = ""]
                #[doc = "If, however, the referendum has ended and:"]
                #[doc = "- it finished corresponding to the vote of the account, and"]
                #[doc = "- the account made a standard vote with conviction, and"]
                #[doc = "- the lock period of the conviction is not over"]
                #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                #[doc = "of both the amount locked and the time is it locked for)."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                #[doc = "registered for referendum `index`."]
                #[doc = ""]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_vote(
                    &self,
                    index: types::remove_vote::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveVote>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "remove_vote",
                        types::RemoveVote { index },
                        [
                            98u8, 146u8, 215u8, 63u8, 222u8, 70u8, 61u8, 186u8, 90u8, 34u8, 63u8,
                            25u8, 195u8, 119u8, 228u8, 189u8, 38u8, 163u8, 58u8, 210u8, 216u8,
                            156u8, 20u8, 204u8, 136u8, 192u8, 33u8, 210u8, 124u8, 65u8, 153u8,
                            105u8,
                        ],
                    )
                }
                #[doc = "Remove a vote for a referendum."]
                #[doc = ""]
                #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                #[doc = "because the conviction period is over."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                #[doc = "  referendum `index`."]
                #[doc = "- `index`: The index of referendum of the vote to be removed."]
                #[doc = ""]
                #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                #[doc = "  Weight is calculated for the maximum number of vote."]
                pub fn remove_other_vote(
                    &self,
                    target: types::remove_other_vote::Target,
                    index: types::remove_other_vote::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveOtherVote>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "remove_other_vote",
                        types::RemoveOtherVote { target, index },
                        [
                            142u8, 22u8, 60u8, 72u8, 113u8, 255u8, 191u8, 106u8, 83u8, 93u8, 40u8,
                            130u8, 89u8, 38u8, 147u8, 250u8, 43u8, 246u8, 40u8, 247u8, 129u8, 69u8,
                            99u8, 246u8, 114u8, 117u8, 134u8, 35u8, 165u8, 178u8, 205u8, 235u8,
                        ],
                    )
                }
                #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                #[doc = "proposed again."]
                #[doc = ""]
                #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                #[doc = "then it will be cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                #[doc = ""]
                #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                #[doc = "cancelled."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                #[doc = "  reasonable value)."]
                pub fn blacklist(
                    &self,
                    proposal_hash: types::blacklist::ProposalHash,
                    maybe_ref_index: types::blacklist::MaybeRefIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Blacklist>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "blacklist",
                        types::Blacklist {
                            proposal_hash,
                            maybe_ref_index,
                        },
                        [
                            227u8, 200u8, 88u8, 154u8, 134u8, 121u8, 131u8, 177u8, 94u8, 119u8,
                            12u8, 129u8, 150u8, 59u8, 108u8, 103u8, 109u8, 55u8, 220u8, 211u8,
                            250u8, 103u8, 160u8, 170u8, 63u8, 142u8, 112u8, 244u8, 29u8, 238u8,
                            101u8, 24u8,
                        ],
                    )
                }
                #[doc = "Remove a proposal."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                #[doc = ""]
                #[doc = "- `prop_index`: The index of the proposal to cancel."]
                #[doc = ""]
                #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                pub fn cancel_proposal(
                    &self,
                    prop_index: types::cancel_proposal::PropIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelProposal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "cancel_proposal",
                        types::CancelProposal { prop_index },
                        [
                            213u8, 5u8, 215u8, 209u8, 71u8, 229u8, 66u8, 38u8, 171u8, 38u8, 14u8,
                            103u8, 248u8, 176u8, 217u8, 143u8, 234u8, 89u8, 110u8, 250u8, 3u8,
                            190u8, 151u8, 74u8, 55u8, 58u8, 249u8, 138u8, 25u8, 191u8, 55u8, 142u8,
                        ],
                    )
                }
                #[doc = "Set or clear a metadata of a proposal or a referendum."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
                #[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
                #[doc = "      threshold."]
                #[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
                #[doc = "      threshold."]
                #[doc = "    - `Signed` by a creator for a public proposal."]
                #[doc = "    - `Signed` to clear a metadata for a finished referendum."]
                #[doc = "    - `Root` to set a metadata for an ongoing referendum."]
                #[doc = "- `owner`: an identifier of a metadata owner."]
                #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                pub fn set_metadata(
                    &self,
                    owner: types::set_metadata::Owner,
                    maybe_hash: types::set_metadata::MaybeHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMetadata>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Democracy",
                        "set_metadata",
                        types::SetMetadata { owner, maybe_hash },
                        [
                            191u8, 200u8, 139u8, 27u8, 167u8, 250u8, 72u8, 78u8, 18u8, 98u8, 108u8,
                            1u8, 122u8, 120u8, 47u8, 77u8, 174u8, 60u8, 247u8, 69u8, 228u8, 196u8,
                            149u8, 107u8, 239u8, 45u8, 47u8, 118u8, 87u8, 233u8, 79u8, 29u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion has been proposed by a public account."]
            pub struct Proposed {
                pub proposal_index: proposed::ProposalIndex,
                pub deposit: proposed::Deposit,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A public proposal has been tabled for referendum vote."]
            pub struct Tabled {
                pub proposal_index: tabled::ProposalIndex,
                pub deposit: tabled::Deposit,
            }
            pub mod tabled {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An external proposal has been tabled."]
            pub struct ExternalTabled;
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A referendum has begun."]
            pub struct Started {
                pub ref_index: started::RefIndex,
                pub threshold: started::Threshold,
            }
            pub mod started {
                use super::runtime_types;
                pub type RefIndex = ::core::primitive::u32;
                pub type Threshold = runtime_types::pallet_democracy::vote_threshold::VoteThreshold;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal has been approved by referendum."]
            pub struct Passed {
                pub ref_index: passed::RefIndex,
            }
            pub mod passed {
                use super::runtime_types;
                pub type RefIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct NotPassed {
                pub ref_index: not_passed::RefIndex,
            }
            pub mod not_passed {
                use super::runtime_types;
                pub type RefIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub ref_index: cancelled::RefIndex,
            }
            pub mod cancelled {
                use super::runtime_types;
                pub type RefIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account has delegated their vote to another account."]
            pub struct Delegated {
                pub who: delegated::Who,
                pub target: delegated::Target,
            }
            pub mod delegated {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type Target = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account has cancelled a previous delegation operation."]
            pub struct Undelegated {
                pub account: undelegated::Account,
            }
            pub mod undelegated {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An external proposal has been vetoed."]
            pub struct Vetoed {
                pub who: vetoed::Who,
                pub proposal_hash: vetoed::ProposalHash,
                pub until: vetoed::Until,
            }
            pub mod vetoed {
                use super::runtime_types;
                pub type Who = runtime_types::account::AccountId20;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Until = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal_hash has been blacklisted permanently."]
            pub struct Blacklisted {
                pub proposal_hash: blacklisted::ProposalHash,
            }
            pub mod blacklisted {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account has voted in a referendum"]
            pub struct Voted {
                pub voter: voted::Voter,
                pub ref_index: voted::RefIndex,
                pub vote: voted::Vote,
            }
            pub mod voted {
                use super::runtime_types;
                pub type Voter = runtime_types::account::AccountId20;
                pub type RefIndex = ::core::primitive::u32;
                pub type Vote =
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account has seconded a proposal"]
            pub struct Seconded {
                pub seconder: seconded::Seconder,
                pub prop_index: seconded::PropIndex,
            }
            pub mod seconded {
                use super::runtime_types;
                pub type Seconder = runtime_types::account::AccountId20;
                pub type PropIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal got canceled."]
            pub struct ProposalCanceled {
                pub prop_index: proposal_canceled::PropIndex,
            }
            pub mod proposal_canceled {
                use super::runtime_types;
                pub type PropIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been set."]
            pub struct MetadataSet {
                pub owner: metadata_set::Owner,
                pub hash: metadata_set::Hash,
            }
            pub mod metadata_set {
                use super::runtime_types;
                pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been cleared."]
            pub struct MetadataCleared {
                pub owner: metadata_cleared::Owner,
                pub hash: metadata_cleared::Hash,
            }
            pub mod metadata_cleared {
                use super::runtime_types;
                pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Metadata has been transferred to new owner."]
            pub struct MetadataTransferred {
                pub prev_owner: metadata_transferred::PrevOwner,
                pub owner: metadata_transferred::Owner,
                pub hash: metadata_transferred::Hash,
            }
            pub mod metadata_transferred {
                use super::runtime_types;
                pub type PrevOwner = runtime_types::pallet_democracy::types::MetadataOwner;
                pub type Owner = runtime_types::pallet_democracy::types::MetadataOwner;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataTransferred {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod public_prop_count {
                    use super::runtime_types;
                    pub type PublicPropCount = ::core::primitive::u32;
                }
                pub mod public_props {
                    use super::runtime_types;
                    pub type PublicProps =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u32,
                            runtime_types::frame_support::traits::preimages::Bounded<
                                runtime_types::mainnet_runtime::RuntimeCall,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                            runtime_types::account::AccountId20,
                        )>;
                }
                pub mod deposit_of {
                    use super::runtime_types;
                    pub type DepositOf = (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                        ::core::primitive::u128,
                    );
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod referendum_count {
                    use super::runtime_types;
                    pub type ReferendumCount = ::core::primitive::u32;
                }
                pub mod lowest_unbaked {
                    use super::runtime_types;
                    pub type LowestUnbaked = ::core::primitive::u32;
                }
                pub mod referendum_info_of {
                    use super::runtime_types;
                    pub type ReferendumInfoOf =
                        runtime_types::pallet_democracy::types::ReferendumInfo<
                            ::core::primitive::u32,
                            runtime_types::frame_support::traits::preimages::Bounded<
                                runtime_types::mainnet_runtime::RuntimeCall,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod voting_of {
                    use super::runtime_types;
                    pub type VotingOf = runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod last_tabled_was_external {
                    use super::runtime_types;
                    pub type LastTabledWasExternal = ::core::primitive::bool;
                }
                pub mod next_external {
                    use super::runtime_types;
                    pub type NextExternal = (
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::mainnet_runtime::RuntimeCall,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    );
                }
                pub mod blacklist {
                    use super::runtime_types;
                    pub type Blacklist = (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >,
                    );
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod cancellations {
                    use super::runtime_types;
                    pub type Cancellations = ::core::primitive::bool;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod metadata_of {
                    use super::runtime_types;
                    pub type MetadataOf = ::subxt::ext::subxt_core::utils::H256;
                    pub type Param0 = runtime_types::pallet_democracy::types::MetadataOwner;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of (public) proposals that have been made so far."]
                pub fn public_prop_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::public_prop_count::PublicPropCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "PublicPropCount",
                        (),
                        [
                            51u8, 175u8, 184u8, 94u8, 91u8, 212u8, 100u8, 108u8, 127u8, 162u8,
                            233u8, 137u8, 12u8, 209u8, 29u8, 130u8, 125u8, 179u8, 208u8, 160u8,
                            173u8, 149u8, 12u8, 111u8, 1u8, 82u8, 196u8, 137u8, 51u8, 204u8, 153u8,
                            198u8,
                        ],
                    )
                }
                #[doc = " The public proposals. Unsorted. The second item is the proposal."]
                pub fn public_props(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::public_props::PublicProps,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "PublicProps",
                        (),
                        [
                            32u8, 60u8, 72u8, 89u8, 218u8, 126u8, 165u8, 16u8, 46u8, 40u8, 247u8,
                            171u8, 28u8, 199u8, 94u8, 166u8, 219u8, 140u8, 20u8, 13u8, 110u8,
                            179u8, 239u8, 24u8, 114u8, 113u8, 39u8, 224u8, 139u8, 180u8, 202u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::deposit_of::DepositOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "DepositOf",
                        (),
                        [
                            241u8, 252u8, 135u8, 12u8, 16u8, 82u8, 14u8, 13u8, 70u8, 211u8, 193u8,
                            154u8, 30u8, 152u8, 139u8, 119u8, 160u8, 81u8, 6u8, 229u8, 31u8, 150u8,
                            208u8, 177u8, 40u8, 176u8, 28u8, 48u8, 84u8, 102u8, 142u8, 94u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::deposit_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::deposit_of::Param0,
                    >,
                    types::deposit_of::DepositOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "DepositOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            241u8, 252u8, 135u8, 12u8, 16u8, 82u8, 14u8, 13u8, 70u8, 211u8, 193u8,
                            154u8, 30u8, 152u8, 139u8, 119u8, 160u8, 81u8, 6u8, 229u8, 31u8, 150u8,
                            208u8, 177u8, 40u8, 176u8, 28u8, 48u8, 84u8, 102u8, 142u8, 94u8,
                        ],
                    )
                }
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::referendum_count::ReferendumCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "ReferendumCount",
                        (),
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
                #[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
                pub fn lowest_unbaked(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::lowest_unbaked::LowestUnbaked,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "LowestUnbaked",
                        (),
                        [
                            237u8, 222u8, 144u8, 214u8, 0u8, 186u8, 81u8, 176u8, 51u8, 14u8, 204u8,
                            184u8, 147u8, 97u8, 187u8, 84u8, 40u8, 8u8, 86u8, 241u8, 16u8, 157u8,
                            202u8, 44u8, 185u8, 111u8, 70u8, 114u8, 40u8, 135u8, 1u8, 155u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::referendum_info_of::ReferendumInfoOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        (),
                        [
                            245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
                            119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
                            186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
                            234u8, 206u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::referendum_info_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::referendum_info_of::Param0,
                    >,
                    types::referendum_info_of::ReferendumInfoOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            245u8, 152u8, 149u8, 236u8, 59u8, 164u8, 120u8, 142u8, 130u8, 25u8,
                            119u8, 158u8, 103u8, 140u8, 203u8, 213u8, 110u8, 151u8, 137u8, 226u8,
                            186u8, 130u8, 233u8, 245u8, 145u8, 145u8, 140u8, 54u8, 222u8, 219u8,
                            234u8, 206u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::voting_of::VotingOf,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "VotingOf",
                        (),
                        [
                            68u8, 92u8, 13u8, 178u8, 204u8, 38u8, 12u8, 166u8, 34u8, 195u8, 93u8,
                            124u8, 239u8, 191u8, 121u8, 80u8, 119u8, 25u8, 161u8, 36u8, 222u8,
                            104u8, 89u8, 4u8, 137u8, 23u8, 240u8, 14u8, 119u8, 67u8, 77u8, 33u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::voting_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::voting_of::Param0,
                    >,
                    types::voting_of::VotingOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "VotingOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            68u8, 92u8, 13u8, 178u8, 204u8, 38u8, 12u8, 166u8, 34u8, 195u8, 93u8,
                            124u8, 239u8, 191u8, 121u8, 80u8, 119u8, 25u8, 161u8, 36u8, 222u8,
                            104u8, 89u8, 4u8, 137u8, 23u8, 240u8, 14u8, 119u8, 67u8, 77u8, 33u8,
                        ],
                    )
                }
                #[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
                #[doc = " proposal."]
                pub fn last_tabled_was_external(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_tabled_was_external::LastTabledWasExternal,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "LastTabledWasExternal",
                        (),
                        [
                            162u8, 201u8, 72u8, 9u8, 78u8, 49u8, 72u8, 62u8, 240u8, 69u8, 20u8,
                            135u8, 26u8, 59u8, 71u8, 46u8, 19u8, 25u8, 195u8, 11u8, 99u8, 31u8,
                            104u8, 4u8, 24u8, 129u8, 47u8, 69u8, 219u8, 178u8, 104u8, 190u8,
                        ],
                    )
                }
                #[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
                #[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
                #[doc = " - `LastTabledWasExternal` is `false`; or"]
                #[doc = " - `PublicProps` is empty."]
                pub fn next_external(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_external::NextExternal,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "NextExternal",
                        (),
                        [
                            240u8, 58u8, 238u8, 86u8, 35u8, 48u8, 192u8, 51u8, 91u8, 4u8, 47u8,
                            202u8, 21u8, 74u8, 158u8, 64u8, 107u8, 247u8, 248u8, 240u8, 122u8,
                            109u8, 204u8, 180u8, 103u8, 239u8, 156u8, 68u8, 141u8, 253u8, 131u8,
                            239u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::blacklist::Blacklist,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "Blacklist",
                        (),
                        [
                            161u8, 38u8, 138u8, 52u8, 86u8, 221u8, 74u8, 102u8, 111u8, 62u8, 130u8,
                            49u8, 2u8, 223u8, 120u8, 127u8, 190u8, 106u8, 158u8, 228u8, 75u8,
                            131u8, 233u8, 81u8, 157u8, 39u8, 21u8, 26u8, 216u8, 12u8, 59u8, 221u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::blacklist::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::blacklist::Param0,
                    >,
                    types::blacklist::Blacklist,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "Blacklist",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            161u8, 38u8, 138u8, 52u8, 86u8, 221u8, 74u8, 102u8, 111u8, 62u8, 130u8,
                            49u8, 2u8, 223u8, 120u8, 127u8, 190u8, 106u8, 158u8, 228u8, 75u8,
                            131u8, 233u8, 81u8, 157u8, 39u8, 21u8, 26u8, 216u8, 12u8, 59u8, 221u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::cancellations::Cancellations,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "Cancellations",
                        (),
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::cancellations::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::cancellations::Param0,
                    >,
                    types::cancellations::Cancellations,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "Cancellations",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::metadata_of::MetadataOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "MetadataOf",
                        (),
                        [
                            52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
                            102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
                            147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::metadata_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::metadata_of::Param0,
                    >,
                    types::metadata_of::MetadataOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Democracy",
                        "MetadataOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            52u8, 151u8, 124u8, 110u8, 85u8, 173u8, 181u8, 86u8, 174u8, 183u8,
                            102u8, 22u8, 8u8, 36u8, 224u8, 114u8, 98u8, 0u8, 220u8, 215u8, 19u8,
                            147u8, 32u8, 238u8, 242u8, 187u8, 235u8, 163u8, 183u8, 235u8, 9u8,
                            180u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The period between a proposal being approved and enacted."]
                #[doc = ""]
                #[doc = " It should generally be a little more than the unstake period to ensure that"]
                #[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
                #[doc = " where they are on the losing side of a vote."]
                pub fn enactment_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) new public referenda are launched."]
                pub fn launch_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) to check for new votes."]
                pub fn voting_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn minimum_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
                #[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
                #[doc = " as an upgrade having happened recently."]
                pub fn instant_allowed(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::bool,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " Minimum voting period allowed for a fast-track referendum."]
                pub fn fast_track_voting_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
                pub fn cooloff_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of votes for an account."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly big value can"]
                #[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
                pub fn max_votes(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of public proposals that can exist at any time."]
                pub fn max_proposals(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of deposits a public proposal may have at any time."]
                pub fn max_deposits(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "MaxDeposits",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of items which can be blacklisted."]
                pub fn max_blacklisted(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Democracy",
                        "MaxBlacklisted",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the treasury pallet."]
        pub type Error = runtime_types::pallet_treasury::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_treasury::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                #[doc = ""]
                #[doc = "### Details"]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::SpendApproved`] if successful."]
                pub struct SpendLocal {
                    #[codec(compact)]
                    pub amount: spend_local::Amount,
                    pub beneficiary: spend_local::Beneficiary,
                }
                pub mod spend_local {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                    pub type Beneficiary = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SpendLocal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend_local";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(A) where `A` is the number of approvals"]
                #[doc = ""]
                #[doc = "### Errors"]
                #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                #[doc = "  in the first place."]
                pub struct RemoveApproval {
                    #[codec(compact)]
                    pub proposal_id: remove_approval::ProposalId,
                }
                pub mod remove_approval {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveApproval {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "remove_approval";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                #[doc = "the [`Config::PayoutPeriod`]."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The beneficiary of the spend."]
                #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                #[doc = "  the past if the resulting spend has not yet expired according to the"]
                #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                #[doc = "  approval."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                pub struct Spend {
                    pub asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box<spend::AssetKind>,
                    #[codec(compact)]
                    pub amount: spend::Amount,
                    pub beneficiary:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<spend::Beneficiary>,
                    pub valid_from: spend::ValidFrom,
                }
                pub mod spend {
                    use super::runtime_types;
                    pub type AssetKind = ();
                    pub type Amount = ::core::primitive::u128;
                    pub type Beneficiary = runtime_types::account::AccountId20;
                    pub type ValidFrom = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Spend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claim a spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed"]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                #[doc = "dispatchable before retrying with the current function."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Paid`] if successful."]
                pub struct Payout {
                    pub index: payout::Index,
                }
                pub mod payout {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Payout {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "payout";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Check the status of the spend and remove it from the storage if processed."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The status check is a prerequisite for retrying a failed payout."]
                #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                #[doc = "function. In such instances, transaction fees are refunded."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                pub struct CheckStatus {
                    pub index: check_status::Index,
                }
                pub mod check_status {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CheckStatus {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "check_status";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Void previously approved spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                pub struct VoidSpend {
                    pub index: void_spend::Index,
                }
                pub mod void_spend {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VoidSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "void_spend";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                #[doc = ""]
                #[doc = "### Details"]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::SpendApproved`] if successful."]
                pub fn spend_local(
                    &self,
                    amount: types::spend_local::Amount,
                    beneficiary: types::spend_local::Beneficiary,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SpendLocal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "spend_local",
                        types::SpendLocal {
                            amount,
                            beneficiary,
                        },
                        [
                            133u8, 109u8, 18u8, 64u8, 165u8, 25u8, 70u8, 238u8, 11u8, 209u8, 132u8,
                            222u8, 91u8, 216u8, 234u8, 176u8, 130u8, 187u8, 189u8, 134u8, 125u8,
                            144u8, 203u8, 80u8, 238u8, 53u8, 198u8, 219u8, 81u8, 235u8, 81u8,
                            232u8,
                        ],
                    )
                }
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(A) where `A` is the number of approvals"]
                #[doc = ""]
                #[doc = "### Errors"]
                #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                #[doc = "  in the first place."]
                pub fn remove_approval(
                    &self,
                    proposal_id: types::remove_approval::ProposalId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveApproval>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "remove_approval",
                        types::RemoveApproval { proposal_id },
                        [
                            180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
                            197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
                            250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
                            196u8, 100u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                #[doc = "the [`Config::PayoutPeriod`]."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The beneficiary of the spend."]
                #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                #[doc = "  the past if the resulting spend has not yet expired according to the"]
                #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                #[doc = "  approval."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                pub fn spend(
                    &self,
                    asset_kind: types::spend::AssetKind,
                    amount: types::spend::Amount,
                    beneficiary: types::spend::Beneficiary,
                    valid_from: types::spend::ValidFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Spend>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "spend",
                        types::Spend {
                            asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                asset_kind,
                            ),
                            amount,
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            valid_from,
                        },
                        [
                            48u8, 219u8, 135u8, 215u8, 229u8, 56u8, 57u8, 160u8, 51u8, 202u8, 13u8,
                            252u8, 148u8, 125u8, 209u8, 136u8, 50u8, 204u8, 252u8, 21u8, 183u8,
                            243u8, 197u8, 184u8, 163u8, 241u8, 162u8, 207u8, 98u8, 121u8, 105u8,
                            58u8,
                        ],
                    )
                }
                #[doc = "Claim a spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed"]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                #[doc = "dispatchable before retrying with the current function."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Paid`] if successful."]
                pub fn payout(
                    &self,
                    index: types::payout::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Payout>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "payout",
                        types::Payout { index },
                        [
                            179u8, 254u8, 82u8, 94u8, 248u8, 26u8, 6u8, 34u8, 93u8, 244u8, 186u8,
                            199u8, 163u8, 32u8, 110u8, 220u8, 78u8, 11u8, 168u8, 182u8, 169u8,
                            56u8, 53u8, 194u8, 168u8, 218u8, 131u8, 38u8, 46u8, 156u8, 93u8, 234u8,
                        ],
                    )
                }
                #[doc = "Check the status of the spend and remove it from the storage if processed."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The status check is a prerequisite for retrying a failed payout."]
                #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                #[doc = "function. In such instances, transaction fees are refunded."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                pub fn check_status(
                    &self,
                    index: types::check_status::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CheckStatus>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "check_status",
                        types::CheckStatus { index },
                        [
                            164u8, 111u8, 10u8, 11u8, 104u8, 237u8, 112u8, 240u8, 104u8, 130u8,
                            179u8, 221u8, 54u8, 18u8, 8u8, 172u8, 148u8, 245u8, 110u8, 174u8, 75u8,
                            38u8, 46u8, 143u8, 101u8, 232u8, 65u8, 252u8, 36u8, 152u8, 29u8, 209u8,
                        ],
                    )
                }
                #[doc = "Void previously approved spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                pub fn void_spend(
                    &self,
                    index: types::void_spend::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VoidSpend>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "void_spend",
                        types::VoidSpend { index },
                        [
                            9u8, 212u8, 174u8, 92u8, 43u8, 102u8, 224u8, 124u8, 247u8, 239u8,
                            196u8, 68u8, 132u8, 171u8, 116u8, 206u8, 52u8, 23u8, 92u8, 31u8, 156u8,
                            160u8, 25u8, 16u8, 125u8, 60u8, 9u8, 109u8, 145u8, 139u8, 102u8, 224u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: spending::BudgetRemaining,
            }
            pub mod spending {
                use super::runtime_types;
                pub type BudgetRemaining = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: awarded::ProposalIndex,
                pub award: awarded::Award,
                pub account: awarded::Account,
            }
            pub mod awarded {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Award = ::core::primitive::u128;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: burnt::BurntFunds,
            }
            pub mod burnt {
                use super::runtime_types;
                pub type BurntFunds = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: rollover::RolloverBalance,
            }
            pub mod rollover {
                use super::runtime_types;
                pub type RolloverBalance = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: deposit::Value,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Value = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: spend_approved::ProposalIndex,
                pub amount: spend_approved::Amount,
                pub beneficiary: spend_approved::Beneficiary,
            }
            pub mod spend_approved {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
                pub type Beneficiary = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The inactive funds of the pallet have been updated."]
            pub struct UpdatedInactive {
                pub reactivated: updated_inactive::Reactivated,
                pub deactivated: updated_inactive::Deactivated,
            }
            pub mod updated_inactive {
                use super::runtime_types;
                pub type Reactivated = ::core::primitive::u128;
                pub type Deactivated = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new asset spend proposal has been approved."]
            pub struct AssetSpendApproved {
                pub index: asset_spend_approved::Index,
                pub asset_kind: asset_spend_approved::AssetKind,
                pub amount: asset_spend_approved::Amount,
                pub beneficiary: asset_spend_approved::Beneficiary,
                pub valid_from: asset_spend_approved::ValidFrom,
                pub expire_at: asset_spend_approved::ExpireAt,
            }
            pub mod asset_spend_approved {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type AssetKind = ();
                pub type Amount = ::core::primitive::u128;
                pub type Beneficiary = runtime_types::account::AccountId20;
                pub type ValidFrom = ::core::primitive::u32;
                pub type ExpireAt = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetSpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "AssetSpendApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An approved spend was voided."]
            pub struct AssetSpendVoided {
                pub index: asset_spend_voided::Index,
            }
            pub mod asset_spend_voided {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetSpendVoided {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "AssetSpendVoided";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A payment happened."]
            pub struct Paid {
                pub index: paid::Index,
                pub payment_id: paid::PaymentId,
            }
            pub mod paid {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type PaymentId = ();
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Paid {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Paid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A payment failed and can be retried."]
            pub struct PaymentFailed {
                pub index: payment_failed::Index,
                pub payment_id: payment_failed::PaymentId,
            }
            pub mod payment_failed {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type PaymentId = ();
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PaymentFailed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "PaymentFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A spend was processed and removed from the storage. It might have been successfully"]
            #[doc = "paid or it may have expired."]
            pub struct SpendProcessed {
                pub index: spend_processed::Index,
            }
            pub mod spend_processed {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SpendProcessed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendProcessed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals = runtime_types::pallet_treasury::Proposal<
                        runtime_types::account::AccountId20,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod deactivated {
                    use super::runtime_types;
                    pub type Deactivated = ::core::primitive::u128;
                }
                pub mod approvals {
                    use super::runtime_types;
                    pub type Approvals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u32,
                        >;
                }
                pub mod spend_count {
                    use super::runtime_types;
                    pub type SpendCount = ::core::primitive::u32;
                }
                pub mod spends {
                    use super::runtime_types;
                    pub type Spends = runtime_types::pallet_treasury::SpendStatus<
                        (),
                        ::core::primitive::u128,
                        runtime_types::account::AccountId20,
                        ::core::primitive::u32,
                        (),
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod last_spend_period {
                    use super::runtime_types;
                    pub type LastSpendPeriod = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " DEPRECATED: associated with `spend_local` call and will be removed in May 2025."]
                #[doc = " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`."]
                #[doc = ""]
                #[doc = " Number of proposals that have been made."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_count::ProposalCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "ProposalCount",
                        (),
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " DEPRECATED: associated with `spend_local` call and will be removed in May 2025."]
                #[doc = " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`."]
                #[doc = ""]
                #[doc = " Proposals that have been made."]
                pub fn proposals_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposals::Proposals,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Proposals",
                        (),
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " DEPRECATED: associated with `spend_local` call and will be removed in May 2025."]
                #[doc = " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`."]
                #[doc = ""]
                #[doc = " Proposals that have been made."]
                pub fn proposals(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proposals::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proposals::Param0,
                    >,
                    types::proposals::Proposals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Proposals",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " The amount which has been reported as inactive to Currency."]
                pub fn deactivated(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::deactivated::Deactivated,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Deactivated",
                        (),
                        [
                            120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
                            170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
                            208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " DEPRECATED: associated with `spend_local` call and will be removed in May 2025."]
                #[doc = " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`."]
                #[doc = ""]
                #[doc = " Proposal indices that have been approved but not yet awarded."]
                pub fn approvals(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::approvals::Approvals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Approvals",
                        (),
                        [
                            78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
                            14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
                            187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
                        ],
                    )
                }
                #[doc = " The count of spends that have been made."]
                pub fn spend_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::spend_count::SpendCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "SpendCount",
                        (),
                        [
                            220u8, 74u8, 248u8, 52u8, 243u8, 209u8, 42u8, 236u8, 27u8, 98u8, 76u8,
                            153u8, 129u8, 176u8, 34u8, 177u8, 33u8, 132u8, 21u8, 71u8, 206u8,
                            146u8, 222u8, 44u8, 232u8, 246u8, 205u8, 92u8, 240u8, 136u8, 182u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " Spends that have been approved and being processed."]
                pub fn spends_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::spends::Spends,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Spends",
                        (),
                        [
                            247u8, 98u8, 3u8, 65u8, 246u8, 169u8, 206u8, 96u8, 126u8, 60u8, 63u8,
                            234u8, 245u8, 142u8, 56u8, 170u8, 56u8, 88u8, 236u8, 161u8, 47u8,
                            177u8, 47u8, 105u8, 22u8, 255u8, 204u8, 65u8, 108u8, 208u8, 242u8,
                            95u8,
                        ],
                    )
                }
                #[doc = " Spends that have been approved and being processed."]
                pub fn spends(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::spends::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::spends::Param0,
                    >,
                    types::spends::Spends,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Spends",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            247u8, 98u8, 3u8, 65u8, 246u8, 169u8, 206u8, 96u8, 126u8, 60u8, 63u8,
                            234u8, 245u8, 142u8, 56u8, 170u8, 56u8, 88u8, 236u8, 161u8, 47u8,
                            177u8, 47u8, 105u8, 22u8, 255u8, 204u8, 65u8, 108u8, 208u8, 242u8,
                            95u8,
                        ],
                    )
                }
                #[doc = " The blocknumber for the last triggered spend period."]
                pub fn last_spend_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_spend_period::LastSpendPeriod,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "LastSpendPeriod",
                        (),
                        [
                            6u8, 200u8, 107u8, 132u8, 60u8, 31u8, 24u8, 196u8, 108u8, 227u8, 5u8,
                            63u8, 249u8, 139u8, 82u8, 140u8, 169u8, 242u8, 118u8, 93u8, 83u8,
                            155u8, 120u8, 175u8, 224u8, 227u8, 39u8, 39u8, 255u8, 247u8, 79u8,
                            30u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Period between successive spends."]
                pub fn spend_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Permill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "Burn",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_support::PalletId,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " DEPRECATED: associated with `spend_local` call and will be removed in May 2025."]
                #[doc = " Refer to <https://github.com/paritytech/polkadot-sdk/pull/5961> for migration to `spend`."]
                #[doc = ""]
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The period during which an approved treasury spend has to be claimed."]
                pub fn payout_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "PayoutPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod author {
                    use super::runtime_types;
                    pub type Author = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::author::Author,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Authorship",
                        "Author",
                        (),
                        [
                            7u8, 127u8, 74u8, 91u8, 81u8, 221u8, 194u8, 231u8, 235u8, 168u8, 73u8,
                            46u8, 213u8, 97u8, 197u8, 227u8, 72u8, 89u8, 2u8, 221u8, 28u8, 38u8,
                            77u8, 172u8, 153u8, 20u8, 189u8, 249u8, 101u8, 225u8, 183u8, 139u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod collator_staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collator_staking::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collator_staking::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the list of invulnerable (fixed) collators. These collators must:"]
                #[doc = "  - Have registered session keys."]
                #[doc = "  - Not currently be collator candidates (the call will fail if an entry is already a candidate)."]
                #[doc = ""]
                #[doc = "If the provided list is empty, it also ensures that the total number of eligible collators"]
                #[doc = "does not fall below the configured minimum."]
                #[doc = ""]
                #[doc = "This call does not inherently maintain mutual exclusivity with `Candidates`, but in practice,"]
                #[doc = "accounts that are already candidates will be rejected. If you need to convert a candidate"]
                #[doc = "to be invulnerable, remove them from the set of candidates first, then call this function."]
                #[doc = ""]
                #[doc = "Must be called by the `UpdateOrigin`."]
                pub struct SetInvulnerables {
                    pub new: set_invulnerables::New,
                }
                pub mod set_invulnerables {
                    use super::runtime_types;
                    pub type New = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetInvulnerables {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_invulnerables";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the ideal number of collators. If lowering this number, then the"]
                #[doc = "number of running collators could be higher than this figure. Aside from that edge case,"]
                #[doc = "there should be no other way to have more candidates than the desired number."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct SetDesiredCandidates {
                    pub max: set_desired_candidates::Max,
                }
                pub mod set_desired_candidates {
                    use super::runtime_types;
                    pub type Max = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetDesiredCandidates {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_desired_candidates";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the candidacy bond amount, which represents the required amount to reserve for an"]
                #[doc = "account to become a candidate. The candidacy bond does not count as stake."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct SetMinCandidacyBond {
                    pub bond: set_min_candidacy_bond::Bond,
                }
                pub mod set_min_candidacy_bond {
                    use super::runtime_types;
                    pub type Bond = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMinCandidacyBond {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_min_candidacy_bond";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register this account as a collator candidate. The account must (a) already have"]
                #[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
                #[doc = "The `CandidacyBond` amount is automatically reserved from the balance of the caller."]
                #[doc = ""]
                #[doc = "This call is not available to `Invulnerable` collators."]
                pub struct RegisterAsCandidate {
                    pub bond: register_as_candidate::Bond,
                }
                pub mod register_as_candidate {
                    use super::runtime_types;
                    pub type Bond = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterAsCandidate {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "register_as_candidate";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Deregister `origin` as a collator candidate. No rewards will be delivered to this"]
                #[doc = "candidate and its stakers after this moment."]
                #[doc = ""]
                #[doc = "This call will fail if the total number of candidates would drop below `MinEligibleCollators`."]
                pub struct LeaveIntent;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LeaveIntent {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "leave_intent";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add a new account `who` to the list of `Invulnerables` collators. `who` must have"]
                #[doc = "registered session keys. If `who` is a candidate, the operation will be aborted."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct AddInvulnerable {
                    pub who: add_invulnerable::Who,
                }
                pub mod add_invulnerable {
                    use super::runtime_types;
                    pub type Who = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddInvulnerable {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "add_invulnerable";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must"]
                #[doc = "be sorted."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct RemoveInvulnerable {
                    pub who: remove_invulnerable::Who,
                }
                pub mod remove_invulnerable {
                    use super::runtime_types;
                    pub type Who = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveInvulnerable {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "remove_invulnerable";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows a user to stake on a set of collator candidates."]
                #[doc = ""]
                #[doc = "The call will fail if:"]
                #[doc = "    - `origin` does not have the at least [`MinStake`] deposited in the candidate."]
                #[doc = "    - one of the `targets` is not in the [`Candidates`] map."]
                #[doc = "    - the user does not have sufficient locked balance to stake."]
                #[doc = "    - zero targets are passed."]
                pub struct Stake {
                    pub targets: stake::Targets,
                }
                pub mod stake {
                    use super::runtime_types;
                    pub type Targets = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_collator_staking::pallet::StakeTarget<
                            runtime_types::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Stake {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "stake";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes stake from a collator candidate."]
                #[doc = ""]
                #[doc = "The amount unstaked will remain locked if the stake was removed from a candidate."]
                pub struct UnstakeFrom {
                    pub account: unstake_from::Account,
                }
                pub mod unstake_from {
                    use super::runtime_types;
                    pub type Account = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnstakeFrom {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "unstake_from";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes all stake of a user from all candidates."]
                #[doc = ""]
                #[doc = "The amount unstaked from candidates will remain locked."]
                pub struct UnstakeAll;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnstakeAll {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "unstake_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Releases all pending [`ReleaseRequest`] and candidacy bond for a given account."]
                #[doc = ""]
                #[doc = "This will unlock all funds in [`ReleaseRequest`] that have already expired."]
                pub struct Release;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Release {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "release";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the percentage of rewards that should be auto-compounded."]
                #[doc = ""]
                #[doc = "This operation will also claim all pending rewards."]
                #[doc = "Rewards will be autocompounded when calling the `claim_rewards` extrinsic."]
                pub struct SetAutocompoundPercentage {
                    pub percent: set_autocompound_percentage::Percent,
                }
                pub mod set_autocompound_percentage {
                    use super::runtime_types;
                    pub type Percent = runtime_types::sp_arithmetic::per_things::Percent;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetAutocompoundPercentage {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_autocompound_percentage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the percentage of rewards that collators will take for producing blocks."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct SetCollatorRewardPercentage {
                    pub percent: set_collator_reward_percentage::Percent,
                }
                pub mod set_collator_reward_percentage {
                    use super::runtime_types;
                    pub type Percent = runtime_types::sp_arithmetic::per_things::Percent;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCollatorRewardPercentage {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_collator_reward_percentage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the extra rewards for producing blocks. Once the session finishes, the provided amount times"]
                #[doc = "the total number of blocks produced during the session will be transferred from the given account"]
                #[doc = "to the pallet's pot account to be distributed as rewards."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct SetExtraReward {
                    pub extra_reward: set_extra_reward::ExtraReward,
                }
                pub mod set_extra_reward {
                    use super::runtime_types;
                    pub type ExtraReward = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetExtraReward {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_extra_reward";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets minimum amount that can be staked on a candidate."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct SetMinimumStake {
                    pub new_min_stake: set_minimum_stake::NewMinStake,
                }
                pub mod set_minimum_stake {
                    use super::runtime_types;
                    pub type NewMinStake = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMinimumStake {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "set_minimum_stake";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Stops the extra rewards."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub struct StopExtraReward;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for StopExtraReward {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "stop_extra_reward";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfers funds to the extra reward pot account for distribution."]
                #[doc = ""]
                #[doc = "**Parameters**:"]
                #[doc = "- `origin`: Signed account initiating the transfer."]
                #[doc = "- `amount`: Amount to transfer."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                pub struct TopUpExtraRewards {
                    pub amount: top_up_extra_rewards::Amount,
                }
                pub mod top_up_extra_rewards {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TopUpExtraRewards {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "top_up_extra_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Locks free balance from the caller to be used for staking."]
                #[doc = ""]
                #[doc = "**Parameters**:"]
                #[doc = "- `origin`: Signed account initiating the lock."]
                #[doc = "- `amount`: Amount to lock."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                pub struct Lock {
                    pub amount: lock::Amount,
                }
                pub mod lock {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Lock {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "lock";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Adds staked funds to the [`ReleaseRequest`] queue."]
                #[doc = ""]
                #[doc = "Funds will actually be released after [`StakeUnlockDelay`]."]
                pub struct Unlock {
                    pub maybe_amount: unlock::MaybeAmount,
                }
                pub mod unlock {
                    use super::runtime_types;
                    pub type MaybeAmount = ::core::option::Option<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Updates the candidacy bond for this candidate."]
                #[doc = ""]
                #[doc = "For this operation to succeed, the caller must:"]
                #[doc = "  - Be a candidate."]
                #[doc = "  - Have sufficient free balance to be locked."]
                pub struct UpdateCandidacyBond {
                    pub amount: update_candidacy_bond::Amount,
                }
                pub mod update_candidacy_bond {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateCandidacyBond {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "update_candidacy_bond";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claims all pending rewards for stakers and candidates."]
                #[doc = ""]
                #[doc = "Distributes rewards accumulated over previous sessions"]
                #[doc = "and ensures that rewards are only claimable for sessions where the"]
                #[doc = "caller has participated. Rewards for the current session cannot be claimed."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::NoPendingClaim`: Caller has no rewards to claim."]
                pub struct ClaimRewards;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimRewards {
                    const PALLET: &'static str = "CollatorStaking";
                    const CALL: &'static str = "claim_rewards";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the list of invulnerable (fixed) collators. These collators must:"]
                #[doc = "  - Have registered session keys."]
                #[doc = "  - Not currently be collator candidates (the call will fail if an entry is already a candidate)."]
                #[doc = ""]
                #[doc = "If the provided list is empty, it also ensures that the total number of eligible collators"]
                #[doc = "does not fall below the configured minimum."]
                #[doc = ""]
                #[doc = "This call does not inherently maintain mutual exclusivity with `Candidates`, but in practice,"]
                #[doc = "accounts that are already candidates will be rejected. If you need to convert a candidate"]
                #[doc = "to be invulnerable, remove them from the set of candidates first, then call this function."]
                #[doc = ""]
                #[doc = "Must be called by the `UpdateOrigin`."]
                pub fn set_invulnerables(
                    &self,
                    new: types::set_invulnerables::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetInvulnerables>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_invulnerables",
                        types::SetInvulnerables { new },
                        [
                            160u8, 166u8, 205u8, 232u8, 120u8, 238u8, 107u8, 183u8, 188u8, 151u8,
                            215u8, 182u8, 174u8, 20u8, 12u8, 193u8, 46u8, 187u8, 61u8, 124u8,
                            192u8, 86u8, 213u8, 206u8, 210u8, 69u8, 66u8, 66u8, 159u8, 60u8, 145u8,
                            249u8,
                        ],
                    )
                }
                #[doc = "Set the ideal number of collators. If lowering this number, then the"]
                #[doc = "number of running collators could be higher than this figure. Aside from that edge case,"]
                #[doc = "there should be no other way to have more candidates than the desired number."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn set_desired_candidates(
                    &self,
                    max: types::set_desired_candidates::Max,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetDesiredCandidates>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_desired_candidates",
                        types::SetDesiredCandidates { max },
                        [
                            174u8, 44u8, 232u8, 155u8, 228u8, 219u8, 239u8, 75u8, 86u8, 150u8,
                            135u8, 214u8, 58u8, 9u8, 25u8, 133u8, 245u8, 101u8, 85u8, 246u8, 15u8,
                            248u8, 165u8, 87u8, 88u8, 28u8, 10u8, 196u8, 86u8, 89u8, 28u8, 165u8,
                        ],
                    )
                }
                #[doc = "Set the candidacy bond amount, which represents the required amount to reserve for an"]
                #[doc = "account to become a candidate. The candidacy bond does not count as stake."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn set_min_candidacy_bond(
                    &self,
                    bond: types::set_min_candidacy_bond::Bond,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMinCandidacyBond>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_min_candidacy_bond",
                        types::SetMinCandidacyBond { bond },
                        [
                            204u8, 253u8, 174u8, 147u8, 127u8, 43u8, 214u8, 170u8, 49u8, 168u8,
                            145u8, 201u8, 16u8, 211u8, 117u8, 211u8, 178u8, 110u8, 112u8, 40u8,
                            75u8, 224u8, 65u8, 121u8, 72u8, 38u8, 78u8, 83u8, 27u8, 238u8, 92u8,
                            196u8,
                        ],
                    )
                }
                #[doc = "Register this account as a collator candidate. The account must (a) already have"]
                #[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
                #[doc = "The `CandidacyBond` amount is automatically reserved from the balance of the caller."]
                #[doc = ""]
                #[doc = "This call is not available to `Invulnerable` collators."]
                pub fn register_as_candidate(
                    &self,
                    bond: types::register_as_candidate::Bond,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterAsCandidate>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "register_as_candidate",
                        types::RegisterAsCandidate { bond },
                        [
                            254u8, 249u8, 63u8, 154u8, 46u8, 99u8, 171u8, 127u8, 133u8, 119u8,
                            73u8, 47u8, 43u8, 33u8, 112u8, 171u8, 196u8, 136u8, 236u8, 183u8,
                            211u8, 185u8, 250u8, 205u8, 112u8, 10u8, 43u8, 61u8, 105u8, 186u8,
                            245u8, 229u8,
                        ],
                    )
                }
                #[doc = "Deregister `origin` as a collator candidate. No rewards will be delivered to this"]
                #[doc = "candidate and its stakers after this moment."]
                #[doc = ""]
                #[doc = "This call will fail if the total number of candidates would drop below `MinEligibleCollators`."]
                pub fn leave_intent(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::LeaveIntent>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "leave_intent",
                        types::LeaveIntent {},
                        [
                            126u8, 57u8, 10u8, 67u8, 120u8, 229u8, 70u8, 23u8, 154u8, 215u8, 226u8,
                            178u8, 203u8, 152u8, 195u8, 177u8, 157u8, 158u8, 40u8, 17u8, 93u8,
                            225u8, 253u8, 217u8, 48u8, 165u8, 55u8, 79u8, 43u8, 123u8, 193u8,
                            147u8,
                        ],
                    )
                }
                #[doc = "Add a new account `who` to the list of `Invulnerables` collators. `who` must have"]
                #[doc = "registered session keys. If `who` is a candidate, the operation will be aborted."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn add_invulnerable(
                    &self,
                    who: types::add_invulnerable::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddInvulnerable>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "add_invulnerable",
                        types::AddInvulnerable { who },
                        [
                            144u8, 3u8, 63u8, 180u8, 179u8, 182u8, 34u8, 197u8, 144u8, 230u8,
                            233u8, 105u8, 204u8, 152u8, 51u8, 203u8, 101u8, 19u8, 239u8, 192u8,
                            69u8, 53u8, 206u8, 174u8, 88u8, 106u8, 216u8, 157u8, 225u8, 126u8,
                            12u8, 214u8,
                        ],
                    )
                }
                #[doc = "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must"]
                #[doc = "be sorted."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn remove_invulnerable(
                    &self,
                    who: types::remove_invulnerable::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveInvulnerable>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "remove_invulnerable",
                        types::RemoveInvulnerable { who },
                        [
                            190u8, 140u8, 28u8, 35u8, 228u8, 180u8, 34u8, 71u8, 225u8, 222u8,
                            254u8, 79u8, 182u8, 222u8, 95u8, 125u8, 3u8, 237u8, 250u8, 39u8, 52u8,
                            66u8, 96u8, 245u8, 47u8, 154u8, 68u8, 226u8, 35u8, 125u8, 176u8, 195u8,
                        ],
                    )
                }
                #[doc = "Allows a user to stake on a set of collator candidates."]
                #[doc = ""]
                #[doc = "The call will fail if:"]
                #[doc = "    - `origin` does not have the at least [`MinStake`] deposited in the candidate."]
                #[doc = "    - one of the `targets` is not in the [`Candidates`] map."]
                #[doc = "    - the user does not have sufficient locked balance to stake."]
                #[doc = "    - zero targets are passed."]
                pub fn stake(
                    &self,
                    targets: types::stake::Targets,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Stake>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "stake",
                        types::Stake { targets },
                        [
                            166u8, 102u8, 32u8, 118u8, 167u8, 23u8, 197u8, 254u8, 174u8, 76u8,
                            40u8, 22u8, 56u8, 115u8, 8u8, 137u8, 88u8, 118u8, 243u8, 102u8, 95u8,
                            179u8, 143u8, 166u8, 198u8, 156u8, 186u8, 31u8, 129u8, 92u8, 93u8,
                            98u8,
                        ],
                    )
                }
                #[doc = "Removes stake from a collator candidate."]
                #[doc = ""]
                #[doc = "The amount unstaked will remain locked if the stake was removed from a candidate."]
                pub fn unstake_from(
                    &self,
                    account: types::unstake_from::Account,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnstakeFrom>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "unstake_from",
                        types::UnstakeFrom { account },
                        [
                            130u8, 158u8, 159u8, 220u8, 171u8, 217u8, 67u8, 121u8, 178u8, 16u8,
                            194u8, 252u8, 250u8, 73u8, 238u8, 120u8, 190u8, 32u8, 213u8, 145u8,
                            68u8, 177u8, 203u8, 203u8, 40u8, 63u8, 45u8, 115u8, 115u8, 61u8, 159u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "Removes all stake of a user from all candidates."]
                #[doc = ""]
                #[doc = "The amount unstaked from candidates will remain locked."]
                pub fn unstake_all(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnstakeAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "unstake_all",
                        types::UnstakeAll {},
                        [
                            194u8, 24u8, 254u8, 221u8, 242u8, 146u8, 169u8, 131u8, 89u8, 126u8,
                            63u8, 71u8, 149u8, 200u8, 75u8, 168u8, 115u8, 195u8, 232u8, 189u8,
                            55u8, 252u8, 104u8, 158u8, 200u8, 92u8, 195u8, 231u8, 179u8, 174u8,
                            86u8, 52u8,
                        ],
                    )
                }
                #[doc = "Releases all pending [`ReleaseRequest`] and candidacy bond for a given account."]
                #[doc = ""]
                #[doc = "This will unlock all funds in [`ReleaseRequest`] that have already expired."]
                pub fn release(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Release>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "release",
                        types::Release {},
                        [
                            39u8, 5u8, 89u8, 242u8, 42u8, 56u8, 104u8, 27u8, 220u8, 175u8, 226u8,
                            105u8, 74u8, 34u8, 233u8, 131u8, 91u8, 70u8, 42u8, 59u8, 198u8, 30u8,
                            176u8, 142u8, 173u8, 128u8, 16u8, 161u8, 216u8, 28u8, 161u8, 164u8,
                        ],
                    )
                }
                #[doc = "Sets the percentage of rewards that should be auto-compounded."]
                #[doc = ""]
                #[doc = "This operation will also claim all pending rewards."]
                #[doc = "Rewards will be autocompounded when calling the `claim_rewards` extrinsic."]
                pub fn set_autocompound_percentage(
                    &self,
                    percent: types::set_autocompound_percentage::Percent,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetAutocompoundPercentage,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_autocompound_percentage",
                        types::SetAutocompoundPercentage { percent },
                        [
                            92u8, 164u8, 104u8, 254u8, 107u8, 46u8, 57u8, 156u8, 205u8, 147u8,
                            201u8, 22u8, 113u8, 184u8, 127u8, 139u8, 77u8, 133u8, 198u8, 96u8,
                            103u8, 17u8, 117u8, 213u8, 125u8, 132u8, 56u8, 254u8, 181u8, 28u8,
                            31u8, 50u8,
                        ],
                    )
                }
                #[doc = "Sets the percentage of rewards that collators will take for producing blocks."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn set_collator_reward_percentage(
                    &self,
                    percent: types::set_collator_reward_percentage::Percent,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetCollatorRewardPercentage,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_collator_reward_percentage",
                        types::SetCollatorRewardPercentage { percent },
                        [
                            74u8, 136u8, 213u8, 253u8, 27u8, 249u8, 127u8, 74u8, 99u8, 76u8, 2u8,
                            48u8, 214u8, 25u8, 78u8, 162u8, 133u8, 78u8, 178u8, 189u8, 80u8, 197u8,
                            59u8, 104u8, 221u8, 231u8, 241u8, 181u8, 228u8, 127u8, 96u8, 190u8,
                        ],
                    )
                }
                #[doc = "Sets the extra rewards for producing blocks. Once the session finishes, the provided amount times"]
                #[doc = "the total number of blocks produced during the session will be transferred from the given account"]
                #[doc = "to the pallet's pot account to be distributed as rewards."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn set_extra_reward(
                    &self,
                    extra_reward: types::set_extra_reward::ExtraReward,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetExtraReward>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_extra_reward",
                        types::SetExtraReward { extra_reward },
                        [
                            45u8, 54u8, 232u8, 117u8, 223u8, 110u8, 23u8, 136u8, 38u8, 35u8, 218u8,
                            44u8, 237u8, 106u8, 89u8, 167u8, 80u8, 218u8, 204u8, 219u8, 236u8,
                            162u8, 157u8, 55u8, 173u8, 22u8, 114u8, 167u8, 29u8, 176u8, 21u8, 48u8,
                        ],
                    )
                }
                #[doc = "Sets minimum amount that can be staked on a candidate."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn set_minimum_stake(
                    &self,
                    new_min_stake: types::set_minimum_stake::NewMinStake,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMinimumStake>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "set_minimum_stake",
                        types::SetMinimumStake { new_min_stake },
                        [
                            221u8, 77u8, 117u8, 29u8, 198u8, 135u8, 222u8, 207u8, 146u8, 74u8,
                            185u8, 65u8, 69u8, 89u8, 219u8, 95u8, 245u8, 61u8, 90u8, 107u8, 94u8,
                            85u8, 175u8, 223u8, 198u8, 166u8, 39u8, 201u8, 68u8, 199u8, 144u8,
                            110u8,
                        ],
                    )
                }
                #[doc = "Stops the extra rewards."]
                #[doc = ""]
                #[doc = "The origin for this call must be the `UpdateOrigin`."]
                pub fn stop_extra_reward(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::StopExtraReward>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "stop_extra_reward",
                        types::StopExtraReward {},
                        [
                            136u8, 12u8, 26u8, 215u8, 153u8, 150u8, 198u8, 177u8, 9u8, 121u8,
                            139u8, 203u8, 56u8, 136u8, 108u8, 148u8, 145u8, 216u8, 36u8, 156u8,
                            163u8, 76u8, 202u8, 69u8, 236u8, 230u8, 32u8, 148u8, 157u8, 203u8,
                            40u8, 216u8,
                        ],
                    )
                }
                #[doc = "Transfers funds to the extra reward pot account for distribution."]
                #[doc = ""]
                #[doc = "**Parameters**:"]
                #[doc = "- `origin`: Signed account initiating the transfer."]
                #[doc = "- `amount`: Amount to transfer."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                pub fn top_up_extra_rewards(
                    &self,
                    amount: types::top_up_extra_rewards::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TopUpExtraRewards>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "top_up_extra_rewards",
                        types::TopUpExtraRewards { amount },
                        [
                            150u8, 46u8, 92u8, 121u8, 77u8, 130u8, 64u8, 232u8, 37u8, 254u8, 170u8,
                            108u8, 58u8, 13u8, 192u8, 49u8, 156u8, 211u8, 47u8, 106u8, 29u8, 35u8,
                            170u8, 86u8, 206u8, 177u8, 10u8, 211u8, 186u8, 101u8, 255u8, 75u8,
                        ],
                    )
                }
                #[doc = "Locks free balance from the caller to be used for staking."]
                #[doc = ""]
                #[doc = "**Parameters**:"]
                #[doc = "- `origin`: Signed account initiating the lock."]
                #[doc = "- `amount`: Amount to lock."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                pub fn lock(
                    &self,
                    amount: types::lock::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Lock>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "lock",
                        types::Lock { amount },
                        [
                            108u8, 16u8, 139u8, 67u8, 151u8, 11u8, 62u8, 212u8, 65u8, 212u8, 85u8,
                            251u8, 253u8, 72u8, 153u8, 168u8, 209u8, 35u8, 167u8, 78u8, 47u8, 1u8,
                            235u8, 231u8, 175u8, 185u8, 202u8, 1u8, 156u8, 150u8, 118u8, 96u8,
                        ],
                    )
                }
                #[doc = "Adds staked funds to the [`ReleaseRequest`] queue."]
                #[doc = ""]
                #[doc = "Funds will actually be released after [`StakeUnlockDelay`]."]
                pub fn unlock(
                    &self,
                    maybe_amount: types::unlock::MaybeAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unlock>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "unlock",
                        types::Unlock { maybe_amount },
                        [
                            96u8, 124u8, 132u8, 136u8, 20u8, 47u8, 130u8, 59u8, 182u8, 208u8,
                            132u8, 102u8, 151u8, 160u8, 36u8, 156u8, 56u8, 13u8, 132u8, 177u8,
                            60u8, 248u8, 149u8, 24u8, 141u8, 103u8, 155u8, 222u8, 232u8, 71u8,
                            175u8, 11u8,
                        ],
                    )
                }
                #[doc = "Updates the candidacy bond for this candidate."]
                #[doc = ""]
                #[doc = "For this operation to succeed, the caller must:"]
                #[doc = "  - Be a candidate."]
                #[doc = "  - Have sufficient free balance to be locked."]
                pub fn update_candidacy_bond(
                    &self,
                    amount: types::update_candidacy_bond::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateCandidacyBond>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "update_candidacy_bond",
                        types::UpdateCandidacyBond { amount },
                        [
                            35u8, 105u8, 119u8, 7u8, 69u8, 68u8, 119u8, 100u8, 45u8, 113u8, 191u8,
                            254u8, 214u8, 188u8, 1u8, 31u8, 153u8, 62u8, 84u8, 145u8, 94u8, 168u8,
                            195u8, 230u8, 132u8, 80u8, 203u8, 81u8, 23u8, 75u8, 218u8, 19u8,
                        ],
                    )
                }
                #[doc = "Claims all pending rewards for stakers and candidates."]
                #[doc = ""]
                #[doc = "Distributes rewards accumulated over previous sessions"]
                #[doc = "and ensures that rewards are only claimable for sessions where the"]
                #[doc = "caller has participated. Rewards for the current session cannot be claimed."]
                #[doc = ""]
                #[doc = "**Errors**:"]
                #[doc = "- `Error::<T>::NoPendingClaim`: Caller has no rewards to claim."]
                pub fn claim_rewards(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimRewards>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "CollatorStaking",
                        "claim_rewards",
                        types::ClaimRewards {},
                        [
                            134u8, 109u8, 165u8, 210u8, 85u8, 196u8, 38u8, 101u8, 68u8, 129u8,
                            45u8, 196u8, 175u8, 20u8, 34u8, 241u8, 182u8, 240u8, 156u8, 43u8,
                            247u8, 79u8, 96u8, 120u8, 69u8, 177u8, 170u8, 178u8, 39u8, 211u8,
                            239u8, 171u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collator_staking::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New Invulnerables were set."]
            pub struct NewInvulnerables {
                pub invulnerables: new_invulnerables::Invulnerables,
            }
            pub mod new_invulnerables {
                use super::runtime_types;
                pub type Invulnerables =
                    ::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewInvulnerables {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "NewInvulnerables";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new Invulnerable was added."]
            pub struct InvulnerableAdded {
                pub account: invulnerable_added::Account,
            }
            pub mod invulnerable_added {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvulnerableAdded {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "InvulnerableAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An Invulnerable was removed."]
            pub struct InvulnerableRemoved {
                pub account_id: invulnerable_removed::AccountId,
            }
            pub mod invulnerable_removed {
                use super::runtime_types;
                pub type AccountId = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvulnerableRemoved {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "InvulnerableRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The number of desired candidates was set."]
            pub struct NewDesiredCandidates {
                pub desired_candidates: new_desired_candidates::DesiredCandidates,
            }
            pub mod new_desired_candidates {
                use super::runtime_types;
                pub type DesiredCandidates = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewDesiredCandidates {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "NewDesiredCandidates";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The minimum candidacy bond was set."]
            pub struct NewMinCandidacyBond {
                pub bond_amount: new_min_candidacy_bond::BondAmount,
            }
            pub mod new_min_candidacy_bond {
                use super::runtime_types;
                pub type BondAmount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewMinCandidacyBond {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "NewMinCandidacyBond";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new candidate joined."]
            pub struct CandidateAdded {
                pub account: candidate_added::Account,
                pub deposit: candidate_added::Deposit,
            }
            pub mod candidate_added {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateAdded {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "CandidateAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A candidate was removed."]
            pub struct CandidateRemoved {
                pub account: candidate_removed::Account,
            }
            pub mod candidate_removed {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateRemoved {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "CandidateRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was unable to be added to the Invulnerables because they did not have keys"]
            #[doc = "registered. Other Invulnerables may have been set."]
            pub struct InvalidInvulnerableSkipped {
                pub account: invalid_invulnerable_skipped::Account,
            }
            pub mod invalid_invulnerable_skipped {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidInvulnerableSkipped {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "InvalidInvulnerableSkipped";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A staker added stake to a candidate."]
            pub struct StakeAdded {
                pub account: stake_added::Account,
                pub candidate: stake_added::Candidate,
                pub amount: stake_added::Amount,
            }
            pub mod stake_added {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Candidate = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeAdded {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "StakeAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Stake was claimed after a penalty period."]
            pub struct StakeReleased {
                pub account: stake_released::Account,
                pub amount: stake_released::Amount,
            }
            pub mod stake_released {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeReleased {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "StakeReleased";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An unstake request was created."]
            pub struct ReleaseRequestCreated {
                pub account: release_request_created::Account,
                pub amount: release_request_created::Amount,
                pub block: release_request_created::Block,
            }
            pub mod release_request_created {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
                pub type Block = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ReleaseRequestCreated {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "ReleaseRequestCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A staker removed stake from a candidate"]
            pub struct StakeRemoved {
                pub account: stake_removed::Account,
                pub candidate: stake_removed::Candidate,
                pub amount: stake_removed::Amount,
            }
            pub mod stake_removed {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Candidate = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeRemoved {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "StakeRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A staking reward was delivered."]
            pub struct StakingRewardReceived {
                pub account: staking_reward_received::Account,
                pub amount: staking_reward_received::Amount,
            }
            pub mod staking_reward_received {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakingRewardReceived {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "StakingRewardReceived";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Autocompound percentage was set."]
            pub struct AutoCompoundPercentageSet {
                pub account: auto_compound_percentage_set::Account,
                pub percentage: auto_compound_percentage_set::Percentage,
            }
            pub mod auto_compound_percentage_set {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Percentage = runtime_types::sp_arithmetic::per_things::Percent;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AutoCompoundPercentageSet {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "AutoCompoundPercentageSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Autocompounding was disabled."]
            pub struct AutoCompoundDisabled {
                pub account: auto_compound_disabled::Account,
            }
            pub mod auto_compound_disabled {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AutoCompoundDisabled {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "AutoCompoundDisabled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Collator reward percentage was set."]
            pub struct CollatorRewardPercentageSet {
                pub percentage: collator_reward_percentage_set::Percentage,
            }
            pub mod collator_reward_percentage_set {
                use super::runtime_types;
                pub type Percentage = runtime_types::sp_arithmetic::per_things::Percent;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollatorRewardPercentageSet {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "CollatorRewardPercentageSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The extra reward was set."]
            pub struct ExtraRewardSet {
                pub amount: extra_reward_set::Amount,
            }
            pub mod extra_reward_set {
                use super::runtime_types;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtraRewardSet {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "ExtraRewardSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The extra reward was removed."]
            pub struct ExtraRewardRemoved {
                pub amount_left: extra_reward_removed::AmountLeft,
                pub receiver: extra_reward_removed::Receiver,
            }
            pub mod extra_reward_removed {
                use super::runtime_types;
                pub type AmountLeft = ::core::primitive::u128;
                pub type Receiver = ::core::option::Option<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtraRewardRemoved {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "ExtraRewardRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The minimum amount to stake was changed."]
            pub struct NewMinStake {
                pub min_stake: new_min_stake::MinStake,
            }
            pub mod new_min_stake {
                use super::runtime_types;
                pub type MinStake = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewMinStake {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "NewMinStake";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A session just ended."]
            pub struct SessionEnded {
                pub index: session_ended::Index,
                pub rewards: session_ended::Rewards,
            }
            pub mod session_ended {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Rewards = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SessionEnded {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "SessionEnded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The extra reward pot account was funded."]
            pub struct ExtraRewardPotFunded {
                pub pot: extra_reward_pot_funded::Pot,
                pub amount: extra_reward_pot_funded::Amount,
            }
            pub mod extra_reward_pot_funded {
                use super::runtime_types;
                pub type Pot = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtraRewardPotFunded {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "ExtraRewardPotFunded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The staking locked amount got extended."]
            pub struct LockExtended {
                pub account: lock_extended::Account,
                pub amount: lock_extended::Amount,
            }
            pub mod lock_extended {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LockExtended {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "LockExtended";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A candidate's candidacy bond got updated."]
            pub struct CandidacyBondUpdated {
                pub candidate: candidacy_bond_updated::Candidate,
                pub new_bond: candidacy_bond_updated::NewBond,
            }
            pub mod candidacy_bond_updated {
                use super::runtime_types;
                pub type Candidate = runtime_types::account::AccountId20;
                pub type NewBond = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidacyBondUpdated {
                const PALLET: &'static str = "CollatorStaking";
                const EVENT: &'static str = "CandidacyBondUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod invulnerables {
                    use super::runtime_types;
                    pub type Invulnerables =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::account::AccountId20,
                        >;
                }
                pub mod candidates {
                    use super::runtime_types;
                    pub type Candidates =
                        runtime_types::pallet_collator_staking::pallet::CandidateInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod counter_for_candidates {
                    use super::runtime_types;
                    pub type CounterForCandidates = ::core::primitive::u32;
                }
                pub mod session_removed_candidates {
                    use super::runtime_types;
                    pub type SessionRemovedCandidates =
                        runtime_types::pallet_collator_staking::pallet::CandidateInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod last_authored_block {
                    use super::runtime_types;
                    pub type LastAuthoredBlock = ::core::primitive::u32;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod desired_candidates {
                    use super::runtime_types;
                    pub type DesiredCandidates = ::core::primitive::u32;
                }
                pub mod min_candidacy_bond {
                    use super::runtime_types;
                    pub type MinCandidacyBond = ::core::primitive::u128;
                }
                pub mod min_stake {
                    use super::runtime_types;
                    pub type MinStake = ::core::primitive::u128;
                }
                pub mod candidate_stake {
                    use super::runtime_types;
                    pub type CandidateStake =
                        runtime_types::pallet_collator_staking::pallet::CandidateStakeInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::account::AccountId20;
                }
                pub mod user_stake {
                    use super::runtime_types;
                    pub type UserStake =
                        runtime_types::pallet_collator_staking::pallet::UserStakeInfo<
                            runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                                runtime_types::account::AccountId20,
                            >,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod release_queues {
                    use super::runtime_types;
                    pub type ReleaseQueues =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_collator_staking::pallet::ReleaseRequest<
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                            >,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod collator_reward_percentage {
                    use super::runtime_types;
                    pub type CollatorRewardPercentage =
                        runtime_types::sp_arithmetic::per_things::Percent;
                }
                pub mod extra_reward {
                    use super::runtime_types;
                    pub type ExtraReward = ::core::primitive::u128;
                }
                pub mod total_blocks {
                    use super::runtime_types;
                    pub type TotalBlocks = (::core::primitive::u32, ::core::primitive::u32);
                }
                pub mod produced_blocks {
                    use super::runtime_types;
                    pub type ProducedBlocks = ::core::primitive::u32;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod current_session {
                    use super::runtime_types;
                    pub type CurrentSession = ::core::primitive::u32;
                }
                pub mod claimable_rewards {
                    use super::runtime_types;
                    pub type ClaimableRewards = ::core::primitive::u128;
                }
                pub mod per_session_rewards {
                    use super::runtime_types;
                    pub type PerSessionRewards =
                        runtime_types::pallet_collator_staking::pallet::SessionInfo<
                            runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                                runtime_types::account::AccountId20,
                                (::core::primitive::u128, ::core::primitive::u128),
                            >,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod counter_for_per_session_rewards {
                    use super::runtime_types;
                    pub type CounterForPerSessionRewards = ::core::primitive::u32;
                }
                pub mod auto_compound {
                    use super::runtime_types;
                    pub type AutoCompound = runtime_types::sp_arithmetic::per_things::Percent;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod candidacy_bond_releases {
                    use super::runtime_types;
                    pub type CandidacyBondReleases =
                        runtime_types::pallet_collator_staking::pallet::CandidacyBondRelease<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The invulnerable, permissioned collators. This list must be sorted."]
                pub fn invulnerables(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::invulnerables::Invulnerables,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "Invulnerables",
                        (),
                        [
                            76u8, 237u8, 75u8, 238u8, 145u8, 199u8, 150u8, 83u8, 106u8, 8u8, 138u8,
                            73u8, 67u8, 191u8, 84u8, 125u8, 86u8, 107u8, 5u8, 52u8, 186u8, 97u8,
                            215u8, 138u8, 59u8, 175u8, 226u8, 46u8, 94u8, 39u8, 51u8, 220u8,
                        ],
                    )
                }
                #[doc = " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be"]
                #[doc = " mutually exclusive."]
                #[doc = ""]
                #[doc = " This list is sorted in ascending order by total stake and when the stake amounts are equal, the least"]
                #[doc = " recently updated is considered greater."]
                pub fn candidates_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidates::Candidates,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "Candidates",
                        (),
                        [
                            19u8, 23u8, 157u8, 175u8, 220u8, 164u8, 124u8, 157u8, 118u8, 147u8,
                            73u8, 100u8, 95u8, 7u8, 126u8, 109u8, 152u8, 118u8, 211u8, 156u8, 15u8,
                            56u8, 16u8, 88u8, 105u8, 113u8, 34u8, 113u8, 216u8, 3u8, 0u8, 189u8,
                        ],
                    )
                }
                #[doc = " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be"]
                #[doc = " mutually exclusive."]
                #[doc = ""]
                #[doc = " This list is sorted in ascending order by total stake and when the stake amounts are equal, the least"]
                #[doc = " recently updated is considered greater."]
                pub fn candidates(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::candidates::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::candidates::Param0,
                    >,
                    types::candidates::Candidates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "Candidates",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            19u8, 23u8, 157u8, 175u8, 220u8, 164u8, 124u8, 157u8, 118u8, 147u8,
                            73u8, 100u8, 95u8, 7u8, 126u8, 109u8, 152u8, 118u8, 211u8, 156u8, 15u8,
                            56u8, 16u8, 88u8, 105u8, 113u8, 34u8, 113u8, 216u8, 3u8, 0u8, 189u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::counter_for_candidates::CounterForCandidates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CounterForCandidates",
                        (),
                        [
                            224u8, 194u8, 252u8, 216u8, 240u8, 88u8, 174u8, 254u8, 22u8, 41u8,
                            100u8, 205u8, 217u8, 134u8, 107u8, 182u8, 253u8, 56u8, 182u8, 119u8,
                            107u8, 77u8, 116u8, 78u8, 174u8, 66u8, 2u8, 103u8, 25u8, 139u8, 31u8,
                            226u8,
                        ],
                    )
                }
                #[doc = " Map of Candidates that have been removed in the current session."]
                pub fn session_removed_candidates_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::session_removed_candidates::SessionRemovedCandidates,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "SessionRemovedCandidates",
                        (),
                        [
                            243u8, 199u8, 66u8, 221u8, 107u8, 171u8, 227u8, 238u8, 74u8, 10u8,
                            30u8, 145u8, 67u8, 137u8, 119u8, 169u8, 201u8, 169u8, 88u8, 233u8,
                            126u8, 208u8, 160u8, 62u8, 127u8, 112u8, 191u8, 232u8, 133u8, 186u8,
                            177u8, 93u8,
                        ],
                    )
                }
                #[doc = " Map of Candidates that have been removed in the current session."]
                pub fn session_removed_candidates(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::session_removed_candidates::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::session_removed_candidates::Param0,
                    >,
                    types::session_removed_candidates::SessionRemovedCandidates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "SessionRemovedCandidates",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            243u8, 199u8, 66u8, 221u8, 107u8, 171u8, 227u8, 238u8, 74u8, 10u8,
                            30u8, 145u8, 67u8, 137u8, 119u8, 169u8, 201u8, 169u8, 88u8, 233u8,
                            126u8, 208u8, 160u8, 62u8, 127u8, 112u8, 191u8, 232u8, 133u8, 186u8,
                            177u8, 93u8,
                        ],
                    )
                }
                #[doc = " Last block authored by a collator."]
                pub fn last_authored_block_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_authored_block::LastAuthoredBlock,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "LastAuthoredBlock",
                        (),
                        [
                            171u8, 153u8, 200u8, 196u8, 82u8, 62u8, 124u8, 74u8, 97u8, 208u8,
                            147u8, 144u8, 131u8, 12u8, 132u8, 125u8, 44u8, 179u8, 63u8, 218u8,
                            57u8, 189u8, 235u8, 235u8, 143u8, 199u8, 147u8, 220u8, 36u8, 172u8,
                            168u8, 248u8,
                        ],
                    )
                }
                #[doc = " Last block authored by a collator."]
                pub fn last_authored_block(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::last_authored_block::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::last_authored_block::Param0,
                    >,
                    types::last_authored_block::LastAuthoredBlock,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "LastAuthoredBlock",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            171u8, 153u8, 200u8, 196u8, 82u8, 62u8, 124u8, 74u8, 97u8, 208u8,
                            147u8, 144u8, 131u8, 12u8, 132u8, 125u8, 44u8, 179u8, 63u8, 218u8,
                            57u8, 189u8, 235u8, 235u8, 143u8, 199u8, 147u8, 220u8, 36u8, 172u8,
                            168u8, 248u8,
                        ],
                    )
                }
                #[doc = " Desired number of candidates."]
                #[doc = ""]
                #[doc = " This should always be less than [`Config::MaxCandidates`] for weights to be correct."]
                pub fn desired_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::desired_candidates::DesiredCandidates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "DesiredCandidates",
                        (),
                        [
                            69u8, 199u8, 130u8, 132u8, 10u8, 127u8, 204u8, 220u8, 59u8, 107u8,
                            96u8, 180u8, 42u8, 235u8, 14u8, 126u8, 231u8, 242u8, 162u8, 126u8,
                            63u8, 223u8, 15u8, 250u8, 22u8, 210u8, 54u8, 34u8, 235u8, 191u8, 250u8,
                            21u8,
                        ],
                    )
                }
                #[doc = " Minimum amount to become a collator."]
                pub fn min_candidacy_bond(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::min_candidacy_bond::MinCandidacyBond,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MinCandidacyBond",
                        (),
                        [
                            10u8, 93u8, 79u8, 37u8, 110u8, 80u8, 212u8, 240u8, 245u8, 64u8, 213u8,
                            19u8, 56u8, 196u8, 180u8, 225u8, 136u8, 14u8, 195u8, 112u8, 11u8, 31u8,
                            5u8, 71u8, 85u8, 173u8, 189u8, 134u8, 224u8, 182u8, 103u8, 80u8,
                        ],
                    )
                }
                #[doc = " Minimum amount a user can stake."]
                pub fn min_stake(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::min_stake::MinStake,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MinStake",
                        (),
                        [
                            73u8, 79u8, 74u8, 129u8, 21u8, 98u8, 113u8, 48u8, 116u8, 106u8, 43u8,
                            9u8, 166u8, 246u8, 77u8, 226u8, 12u8, 21u8, 120u8, 100u8, 147u8, 166u8,
                            36u8, 238u8, 254u8, 162u8, 182u8, 51u8, 96u8, 225u8, 126u8, 167u8,
                        ],
                    )
                }
                #[doc = " Amount staked by users per candidate."]
                #[doc = ""]
                #[doc = " First key is the candidate, and second one is the staker."]
                pub fn candidate_stake_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidate_stake::CandidateStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CandidateStake",
                        (),
                        [
                            123u8, 119u8, 129u8, 72u8, 28u8, 201u8, 223u8, 185u8, 116u8, 41u8,
                            226u8, 112u8, 62u8, 150u8, 18u8, 230u8, 136u8, 239u8, 221u8, 148u8,
                            65u8, 30u8, 237u8, 213u8, 90u8, 114u8, 232u8, 0u8, 218u8, 206u8, 177u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Amount staked by users per candidate."]
                #[doc = ""]
                #[doc = " First key is the candidate, and second one is the staker."]
                pub fn candidate_stake_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::candidate_stake::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::candidate_stake::Param0,
                    >,
                    types::candidate_stake::CandidateStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CandidateStake",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            123u8, 119u8, 129u8, 72u8, 28u8, 201u8, 223u8, 185u8, 116u8, 41u8,
                            226u8, 112u8, 62u8, 150u8, 18u8, 230u8, 136u8, 239u8, 221u8, 148u8,
                            65u8, 30u8, 237u8, 213u8, 90u8, 114u8, 232u8, 0u8, 218u8, 206u8, 177u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Amount staked by users per candidate."]
                #[doc = ""]
                #[doc = " First key is the candidate, and second one is the staker."]
                pub fn candidate_stake(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::candidate_stake::Param0>,
                    _1: impl ::core::borrow::Borrow<types::candidate_stake::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::candidate_stake::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::candidate_stake::Param1,
                        >,
                    ),
                    types::candidate_stake::CandidateStake,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CandidateStake",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            123u8, 119u8, 129u8, 72u8, 28u8, 201u8, 223u8, 185u8, 116u8, 41u8,
                            226u8, 112u8, 62u8, 150u8, 18u8, 230u8, 136u8, 239u8, 221u8, 148u8,
                            65u8, 30u8, 237u8, 213u8, 90u8, 114u8, 232u8, 0u8, 218u8, 206u8, 177u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Number of candidates staked on by a user."]
                #[doc = ""]
                #[doc = " Cannot be higher than `MaxStakedCandidates`."]
                pub fn user_stake_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::user_stake::UserStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "UserStake",
                        (),
                        [
                            211u8, 229u8, 214u8, 158u8, 181u8, 72u8, 56u8, 21u8, 134u8, 28u8, 43u8,
                            170u8, 198u8, 139u8, 210u8, 8u8, 99u8, 210u8, 115u8, 178u8, 194u8,
                            151u8, 96u8, 254u8, 243u8, 1u8, 209u8, 254u8, 47u8, 221u8, 87u8, 136u8,
                        ],
                    )
                }
                #[doc = " Number of candidates staked on by a user."]
                #[doc = ""]
                #[doc = " Cannot be higher than `MaxStakedCandidates`."]
                pub fn user_stake(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::user_stake::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::user_stake::Param0,
                    >,
                    types::user_stake::UserStake,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "UserStake",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            211u8, 229u8, 214u8, 158u8, 181u8, 72u8, 56u8, 21u8, 134u8, 28u8, 43u8,
                            170u8, 198u8, 139u8, 210u8, 8u8, 99u8, 210u8, 115u8, 178u8, 194u8,
                            151u8, 96u8, 254u8, 243u8, 1u8, 209u8, 254u8, 47u8, 221u8, 87u8, 136u8,
                        ],
                    )
                }
                #[doc = " Release requests for an account."]
                #[doc = ""]
                #[doc = " They can be actually released by calling the [`release`] extrinsic, after the relevant delay."]
                pub fn release_queues_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::release_queues::ReleaseQueues,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ReleaseQueues",
                        (),
                        [
                            228u8, 101u8, 146u8, 18u8, 58u8, 84u8, 128u8, 173u8, 164u8, 1u8, 30u8,
                            10u8, 203u8, 133u8, 134u8, 152u8, 192u8, 67u8, 135u8, 195u8, 8u8, 15u8,
                            141u8, 11u8, 0u8, 178u8, 0u8, 76u8, 122u8, 99u8, 43u8, 140u8,
                        ],
                    )
                }
                #[doc = " Release requests for an account."]
                #[doc = ""]
                #[doc = " They can be actually released by calling the [`release`] extrinsic, after the relevant delay."]
                pub fn release_queues(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::release_queues::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::release_queues::Param0,
                    >,
                    types::release_queues::ReleaseQueues,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ReleaseQueues",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            228u8, 101u8, 146u8, 18u8, 58u8, 84u8, 128u8, 173u8, 164u8, 1u8, 30u8,
                            10u8, 203u8, 133u8, 134u8, 152u8, 192u8, 67u8, 135u8, 195u8, 8u8, 15u8,
                            141u8, 11u8, 0u8, 178u8, 0u8, 76u8, 122u8, 99u8, 43u8, 140u8,
                        ],
                    )
                }
                #[doc = " Percentage of rewards that would go for collators."]
                pub fn collator_reward_percentage(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collator_reward_percentage::CollatorRewardPercentage,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CollatorRewardPercentage",
                        (),
                        [
                            98u8, 70u8, 108u8, 234u8, 211u8, 115u8, 235u8, 165u8, 22u8, 62u8,
                            148u8, 104u8, 178u8, 110u8, 155u8, 183u8, 55u8, 237u8, 108u8, 39u8,
                            80u8, 171u8, 143u8, 52u8, 87u8, 152u8, 205u8, 122u8, 47u8, 17u8, 87u8,
                            203u8,
                        ],
                    )
                }
                #[doc = " Per-block extra reward."]
                pub fn extra_reward(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::extra_reward::ExtraReward,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ExtraReward",
                        (),
                        [
                            65u8, 217u8, 70u8, 174u8, 0u8, 69u8, 93u8, 40u8, 41u8, 219u8, 244u8,
                            190u8, 154u8, 88u8, 140u8, 90u8, 176u8, 228u8, 182u8, 215u8, 108u8,
                            233u8, 76u8, 200u8, 244u8, 216u8, 100u8, 246u8, 35u8, 99u8, 77u8, 82u8,
                        ],
                    )
                }
                #[doc = " Blocks produced in the current session. First value is the total,"]
                #[doc = " and second is blocks produced by candidates only (not invulnerables)."]
                pub fn total_blocks(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_blocks::TotalBlocks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "TotalBlocks",
                        (),
                        [
                            162u8, 27u8, 36u8, 67u8, 143u8, 46u8, 36u8, 246u8, 188u8, 213u8, 8u8,
                            41u8, 104u8, 27u8, 174u8, 198u8, 49u8, 138u8, 108u8, 58u8, 19u8, 11u8,
                            216u8, 251u8, 66u8, 235u8, 101u8, 132u8, 15u8, 23u8, 149u8, 34u8,
                        ],
                    )
                }
                #[doc = " Mapping of blocks and their authors."]
                pub fn produced_blocks_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::produced_blocks::ProducedBlocks,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ProducedBlocks",
                        (),
                        [
                            16u8, 185u8, 229u8, 36u8, 99u8, 180u8, 129u8, 2u8, 47u8, 196u8, 12u8,
                            143u8, 117u8, 43u8, 92u8, 124u8, 214u8, 187u8, 127u8, 187u8, 110u8,
                            30u8, 117u8, 194u8, 86u8, 97u8, 1u8, 84u8, 246u8, 122u8, 5u8, 166u8,
                        ],
                    )
                }
                #[doc = " Mapping of blocks and their authors."]
                pub fn produced_blocks(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::produced_blocks::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::produced_blocks::Param0,
                    >,
                    types::produced_blocks::ProducedBlocks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ProducedBlocks",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            16u8, 185u8, 229u8, 36u8, 99u8, 180u8, 129u8, 2u8, 47u8, 196u8, 12u8,
                            143u8, 117u8, 43u8, 92u8, 124u8, 214u8, 187u8, 127u8, 187u8, 110u8,
                            30u8, 117u8, 194u8, 86u8, 97u8, 1u8, 84u8, 246u8, 122u8, 5u8, 166u8,
                        ],
                    )
                }
                #[doc = " Current session index."]
                pub fn current_session(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_session::CurrentSession,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CurrentSession",
                        (),
                        [
                            206u8, 79u8, 91u8, 17u8, 25u8, 230u8, 101u8, 217u8, 216u8, 213u8,
                            118u8, 134u8, 133u8, 128u8, 245u8, 237u8, 131u8, 145u8, 7u8, 117u8,
                            157u8, 228u8, 42u8, 119u8, 177u8, 124u8, 188u8, 251u8, 135u8, 118u8,
                            23u8, 4u8,
                        ],
                    )
                }
                #[doc = " Claimable rewards."]
                pub fn claimable_rewards(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::claimable_rewards::ClaimableRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ClaimableRewards",
                        (),
                        [
                            72u8, 80u8, 46u8, 17u8, 121u8, 130u8, 163u8, 11u8, 25u8, 144u8, 161u8,
                            55u8, 177u8, 77u8, 61u8, 23u8, 183u8, 75u8, 2u8, 144u8, 169u8, 95u8,
                            28u8, 134u8, 202u8, 85u8, 246u8, 237u8, 44u8, 143u8, 58u8, 145u8,
                        ],
                    )
                }
                #[doc = " Per-session rewards."]
                pub fn per_session_rewards_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::per_session_rewards::PerSessionRewards,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "PerSessionRewards",
                        (),
                        [
                            196u8, 107u8, 27u8, 113u8, 169u8, 78u8, 143u8, 74u8, 221u8, 49u8,
                            181u8, 60u8, 183u8, 170u8, 212u8, 181u8, 134u8, 16u8, 164u8, 91u8,
                            50u8, 14u8, 159u8, 6u8, 241u8, 72u8, 24u8, 205u8, 176u8, 146u8, 77u8,
                            194u8,
                        ],
                    )
                }
                #[doc = " Per-session rewards."]
                pub fn per_session_rewards(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::per_session_rewards::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::per_session_rewards::Param0,
                    >,
                    types::per_session_rewards::PerSessionRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "PerSessionRewards",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            196u8, 107u8, 27u8, 113u8, 169u8, 78u8, 143u8, 74u8, 221u8, 49u8,
                            181u8, 60u8, 183u8, 170u8, 212u8, 181u8, 134u8, 16u8, 164u8, 91u8,
                            50u8, 14u8, 159u8, 6u8, 241u8, 72u8, 24u8, 205u8, 176u8, 146u8, 77u8,
                            194u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_per_session_rewards(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::counter_for_per_session_rewards::CounterForPerSessionRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CounterForPerSessionRewards",
                        (),
                        [
                            32u8, 189u8, 209u8, 44u8, 148u8, 133u8, 121u8, 157u8, 120u8, 36u8,
                            196u8, 38u8, 146u8, 151u8, 10u8, 219u8, 89u8, 179u8, 108u8, 227u8,
                            180u8, 231u8, 143u8, 249u8, 234u8, 184u8, 214u8, 155u8, 192u8, 77u8,
                            231u8, 183u8,
                        ],
                    )
                }
                #[doc = " Percentage of reward to be re-invested in collators."]
                pub fn auto_compound_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::auto_compound::AutoCompound,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "AutoCompound",
                        (),
                        [
                            189u8, 95u8, 163u8, 51u8, 19u8, 146u8, 77u8, 74u8, 1u8, 190u8, 112u8,
                            36u8, 56u8, 251u8, 208u8, 252u8, 113u8, 153u8, 222u8, 114u8, 119u8,
                            43u8, 89u8, 227u8, 153u8, 217u8, 220u8, 198u8, 196u8, 28u8, 29u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " Percentage of reward to be re-invested in collators."]
                pub fn auto_compound(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::auto_compound::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::auto_compound::Param0,
                    >,
                    types::auto_compound::AutoCompound,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "AutoCompound",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            189u8, 95u8, 163u8, 51u8, 19u8, 146u8, 77u8, 74u8, 1u8, 190u8, 112u8,
                            36u8, 56u8, 251u8, 208u8, 252u8, 113u8, 153u8, 222u8, 114u8, 119u8,
                            43u8, 89u8, 227u8, 153u8, 217u8, 220u8, 198u8, 196u8, 28u8, 29u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " Time (in blocks) to release an ex-candidate's locked candidacy bond."]
                #[doc = " If a candidate leaves the candidacy before its bond is released, the waiting period"]
                #[doc = " will restart."]
                pub fn candidacy_bond_releases_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidacy_bond_releases::CandidacyBondReleases,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CandidacyBondReleases",
                        (),
                        [
                            79u8, 157u8, 201u8, 174u8, 186u8, 208u8, 99u8, 32u8, 57u8, 162u8, 8u8,
                            117u8, 41u8, 127u8, 161u8, 90u8, 162u8, 205u8, 251u8, 230u8, 140u8,
                            34u8, 116u8, 17u8, 60u8, 49u8, 120u8, 144u8, 128u8, 229u8, 44u8, 31u8,
                        ],
                    )
                }
                #[doc = " Time (in blocks) to release an ex-candidate's locked candidacy bond."]
                #[doc = " If a candidate leaves the candidacy before its bond is released, the waiting period"]
                #[doc = " will restart."]
                pub fn candidacy_bond_releases(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::candidacy_bond_releases::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::candidacy_bond_releases::Param0,
                    >,
                    types::candidacy_bond_releases::CandidacyBondReleases,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "CandidacyBondReleases",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            79u8, 157u8, 201u8, 174u8, 186u8, 208u8, 99u8, 32u8, 57u8, 162u8, 8u8,
                            117u8, 41u8, 127u8, 161u8, 90u8, 162u8, 205u8, 251u8, 230u8, 140u8,
                            34u8, 116u8, 17u8, 60u8, 49u8, 120u8, 144u8, 128u8, 229u8, 44u8, 31u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Account Identifier from which the internal pot is generated."]
                #[doc = ""]
                #[doc = " To initiate rewards, an ED needs to be transferred to the pot address."]
                pub fn pot_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_support::PalletId,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "PotId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " Account Identifier from which the extra reward pot is generated."]
                #[doc = ""]
                #[doc = " To initiate extra rewards the [`set_extra_reward`] extrinsic must be called;"]
                #[doc = " and this pot should be funded using [`top_up_extra_rewards`] extrinsic."]
                pub fn extra_reward_pot_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_support::PalletId,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ExtraRewardPotId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " Determines what to do with funds in the extra rewards pot when stopping these rewards."]
                pub fn extra_reward_receiver(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::option::Option<runtime_types::account::AccountId20>,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "ExtraRewardReceiver",
                        [
                            137u8, 65u8, 36u8, 152u8, 173u8, 55u8, 152u8, 46u8, 197u8, 155u8,
                            226u8, 6u8, 120u8, 214u8, 170u8, 90u8, 68u8, 254u8, 186u8, 76u8, 205u8,
                            25u8, 61u8, 132u8, 11u8, 235u8, 85u8, 222u8, 35u8, 127u8, 198u8, 117u8,
                        ],
                    )
                }
                #[doc = " Maximum number of candidates that we should have."]
                #[doc = ""]
                #[doc = " This does not take into account the invulnerables."]
                #[doc = " This must be more than or equal to `DesiredCandidates`."]
                pub fn max_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MaxCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum number eligible collators including Invulnerables."]
                #[doc = " Should always be greater than zero. This ensures that there will always be"]
                #[doc = " one collator who can produce blocks."]
                pub fn min_eligible_collators(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MinEligibleCollators",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of invulnerables."]
                pub fn max_invulnerables(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MaxInvulnerables",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Candidates will be  removed from active collator set, if block is not produced within this threshold."]
                pub fn kick_threshold(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "KickThreshold",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum candidates a staker can stake on."]
                pub fn max_staked_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MaxStakedCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum stakers per candidate."]
                pub fn max_stakers(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MaxStakers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of blocks to wait before returning the bond by a candidate."]
                pub fn bond_unlock_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "BondUnlockDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of blocks to wait before returning the locked funds by a user."]
                pub fn stake_unlock_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "StakeUnlockDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of blocks to wait before reusing funds previously assigned to a collator."]
                #[doc = " It should be set to at least one session."]
                pub fn restake_unlock_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "RestakeUnlockDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of rewards to keep in storage. Non-claimed rewards will not be claimable"]
                #[doc = " after they have been removed."]
                pub fn max_reward_sessions(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "MaxRewardSessions",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum stake needed to enable autocompounding."]
                pub fn auto_compounding_threshold(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "CollatorStaking",
                        "AutoCompoundingThreshold",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the session pallet."]
        pub type Error = runtime_types::pallet_session::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_session::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                #[doc = "  fixed."]
                pub struct SetKeys {
                    pub keys: set_keys::Keys,
                    pub proof: set_keys::Proof,
                }
                pub mod set_keys {
                    use super::runtime_types;
                    pub type Keys = runtime_types::mainnet_runtime::SessionKeys;
                    pub type Proof =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "set_keys";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                pub struct PurgeKeys;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PurgeKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "purge_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                #[doc = "  fixed."]
                pub fn set_keys(
                    &self,
                    keys: types::set_keys::Keys,
                    proof: types::set_keys::Proof,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKeys>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Session",
                        "set_keys",
                        types::SetKeys { keys, proof },
                        [
                            219u8, 63u8, 235u8, 242u8, 176u8, 248u8, 204u8, 20u8, 121u8, 176u8,
                            105u8, 242u8, 190u8, 124u8, 153u8, 219u8, 12u8, 224u8, 196u8, 18u8,
                            183u8, 159u8, 33u8, 97u8, 44u8, 64u8, 0u8, 10u8, 52u8, 181u8, 70u8,
                            206u8,
                        ],
                    )
                }
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                pub fn purge_keys(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PurgeKeys>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Session",
                        "purge_keys",
                        types::PurgeKeys {},
                        [
                            215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
                            151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
                            67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
                            209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: new_session::SessionIndex,
            }
            pub mod new_session {
                use super::runtime_types;
                pub type SessionIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod validators {
                    use super::runtime_types;
                    pub type Validators = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::account::AccountId20,
                    >;
                }
                pub mod current_index {
                    use super::runtime_types;
                    pub type CurrentIndex = ::core::primitive::u32;
                }
                pub mod queued_changed {
                    use super::runtime_types;
                    pub type QueuedChanged = ::core::primitive::bool;
                }
                pub mod queued_keys {
                    use super::runtime_types;
                    pub type QueuedKeys = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::account::AccountId20,
                        runtime_types::mainnet_runtime::SessionKeys,
                    )>;
                }
                pub mod disabled_validators {
                    use super::runtime_types;
                    pub type DisabledValidators =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                }
                pub mod next_keys {
                    use super::runtime_types;
                    pub type NextKeys = runtime_types::mainnet_runtime::SessionKeys;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod key_owner {
                    use super::runtime_types;
                    pub type KeyOwner = runtime_types::account::AccountId20;
                    pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
                    pub type Param1 = [::core::primitive::u8];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::validators::Validators,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "Validators",
                        (),
                        [
                            74u8, 152u8, 125u8, 12u8, 188u8, 63u8, 206u8, 211u8, 41u8, 58u8, 12u8,
                            204u8, 94u8, 87u8, 207u8, 104u8, 228u8, 185u8, 237u8, 140u8, 81u8,
                            153u8, 214u8, 53u8, 56u8, 170u8, 153u8, 251u8, 222u8, 26u8, 156u8,
                            174u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_index::CurrentIndex,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "CurrentIndex",
                        (),
                        [
                            167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
                            135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
                            134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
                            221u8, 230u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queued_changed::QueuedChanged,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "QueuedChanged",
                        (),
                        [
                            184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
                            198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
                            36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
                            153u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queued_keys::QueuedKeys,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "QueuedKeys",
                        (),
                        [
                            11u8, 96u8, 41u8, 114u8, 121u8, 80u8, 34u8, 100u8, 184u8, 121u8, 42u8,
                            61u8, 61u8, 137u8, 153u8, 210u8, 132u8, 231u8, 159u8, 5u8, 109u8,
                            151u8, 228u8, 181u8, 24u8, 86u8, 142u8, 31u8, 26u8, 200u8, 89u8, 160u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::disabled_validators::DisabledValidators,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "DisabledValidators",
                        (),
                        [
                            213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
                            36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
                            183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_keys::NextKeys,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "NextKeys",
                        (),
                        [
                            2u8, 73u8, 179u8, 91u8, 229u8, 19u8, 252u8, 75u8, 28u8, 24u8, 81u8,
                            142u8, 239u8, 209u8, 245u8, 63u8, 119u8, 241u8, 95u8, 247u8, 71u8,
                            204u8, 29u8, 51u8, 169u8, 140u8, 145u8, 22u8, 33u8, 205u8, 72u8, 155u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::next_keys::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::next_keys::Param0,
                    >,
                    types::next_keys::NextKeys,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "NextKeys",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            2u8, 73u8, 179u8, 91u8, 229u8, 19u8, 252u8, 75u8, 28u8, 24u8, 81u8,
                            142u8, 239u8, 209u8, 245u8, 63u8, 119u8, 241u8, 95u8, 247u8, 71u8,
                            204u8, 29u8, 51u8, 169u8, 140u8, 145u8, 22u8, 33u8, 205u8, 72u8, 155u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        (),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::key_owner::Param0,
                    >,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
                    _1: impl ::core::borrow::Borrow<types::key_owner::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::key_owner::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::key_owner::Param1,
                        >,
                    ),
                    types::key_owner::KeyOwner,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod current_slot {
                    use super::runtime_types;
                    pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority set."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorities::Authorities,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Aura",
                        "Authorities",
                        (),
                        [
                            95u8, 52u8, 203u8, 53u8, 254u8, 107u8, 134u8, 122u8, 95u8, 253u8, 51u8,
                            137u8, 142u8, 106u8, 237u8, 248u8, 159u8, 80u8, 41u8, 233u8, 137u8,
                            133u8, 13u8, 217u8, 176u8, 88u8, 132u8, 199u8, 241u8, 47u8, 125u8,
                            27u8,
                        ],
                    )
                }
                #[doc = " The current slot of this block."]
                #[doc = ""]
                #[doc = " This will be set in `on_initialize`."]
                pub fn current_slot(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_slot::CurrentSlot,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Aura",
                        "CurrentSlot",
                        (),
                        [
                            112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
                            236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
                            201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
                            43u8, 57u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The slot duration Aura should run with, expressed in milliseconds."]
                #[doc = " The effective value of this type should not change while the chain is running."]
                #[doc = ""]
                #[doc = " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."]
                pub fn slot_duration(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u64,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Aura",
                        "SlotDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura_ext {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod slot_info {
                    use super::runtime_types;
                    pub type SlotInfo = (
                        runtime_types::sp_consensus_slots::Slot,
                        ::core::primitive::u32,
                    );
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Serves as cache for the authorities."]
                #[doc = ""]
                #[doc = " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,"]
                #[doc = " but we require the old authorities to verify the seal when validating a PoV. This will"]
                #[doc = " always be updated to the latest AuRa authorities in `on_finalize`."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorities::Authorities,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AuraExt",
                        "Authorities",
                        (),
                        [
                            95u8, 52u8, 203u8, 53u8, 254u8, 107u8, 134u8, 122u8, 95u8, 253u8, 51u8,
                            137u8, 142u8, 106u8, 237u8, 248u8, 159u8, 80u8, 41u8, 233u8, 137u8,
                            133u8, 13u8, 217u8, 176u8, 88u8, 132u8, 199u8, 241u8, 47u8, 125u8,
                            27u8,
                        ],
                    )
                }
                #[doc = " Current slot paired with a number of authored blocks."]
                #[doc = ""]
                #[doc = " Updated on each block initialization."]
                pub fn slot_info(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::slot_info::SlotInfo,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AuraExt",
                        "SlotInfo",
                        (),
                        [
                            135u8, 135u8, 71u8, 123u8, 102u8, 223u8, 215u8, 76u8, 183u8, 169u8,
                            108u8, 60u8, 122u8, 5u8, 24u8, 201u8, 96u8, 59u8, 132u8, 95u8, 253u8,
                            100u8, 148u8, 184u8, 133u8, 146u8, 101u8, 201u8, 91u8, 30u8, 76u8,
                            169u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xcmp_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::cumulus_pallet_xcmp_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_xcmp_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub struct SuspendXcmExecution;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SuspendXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "suspend_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Resumes all XCM executions for the XCMP queue."]
                #[doc = ""]
                #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub struct ResumeXcmExecution;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResumeXcmExecution {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "resume_xcm_execution";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Overwrites the number of pages which must be in the queue for the other side to be"]
                #[doc = "told to suspend their sending."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                pub struct UpdateSuspendThreshold {
                    pub new: update_suspend_threshold::New,
                }
                pub mod update_suspend_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateSuspendThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_suspend_threshold";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Overwrites the number of pages which must be in the queue after which we drop any"]
                #[doc = "further messages from the channel."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                pub struct UpdateDropThreshold {
                    pub new: update_drop_threshold::New,
                }
                pub mod update_drop_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateDropThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_drop_threshold";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Overwrites the number of pages which the queue must be reduced to before it signals"]
                #[doc = "that message sending may recommence after it has been suspended."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                pub struct UpdateResumeThreshold {
                    pub new: update_resume_threshold::New,
                }
                pub mod update_resume_threshold {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateResumeThreshold {
                    const PALLET: &'static str = "XcmpQueue";
                    const CALL: &'static str = "update_resume_threshold";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn suspend_xcm_execution(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SuspendXcmExecution>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "XcmpQueue",
                        "suspend_xcm_execution",
                        types::SuspendXcmExecution {},
                        [
                            54u8, 120u8, 33u8, 251u8, 74u8, 56u8, 29u8, 76u8, 104u8, 218u8, 115u8,
                            198u8, 148u8, 237u8, 9u8, 191u8, 241u8, 48u8, 33u8, 24u8, 60u8, 144u8,
                            22u8, 78u8, 58u8, 50u8, 26u8, 188u8, 231u8, 42u8, 201u8, 76u8,
                        ],
                    )
                }
                #[doc = "Resumes all XCM executions for the XCMP queue."]
                #[doc = ""]
                #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                pub fn resume_xcm_execution(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResumeXcmExecution>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "XcmpQueue",
                        "resume_xcm_execution",
                        types::ResumeXcmExecution {},
                        [
                            173u8, 231u8, 78u8, 253u8, 108u8, 234u8, 199u8, 124u8, 184u8, 154u8,
                            95u8, 194u8, 13u8, 77u8, 175u8, 7u8, 7u8, 112u8, 161u8, 72u8, 133u8,
                            71u8, 63u8, 218u8, 97u8, 226u8, 133u8, 6u8, 93u8, 177u8, 247u8, 109u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages which must be in the queue for the other side to be"]
                #[doc = "told to suspend their sending."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                pub fn update_suspend_threshold(
                    &self,
                    new: types::update_suspend_threshold::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UpdateSuspendThreshold,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "XcmpQueue",
                        "update_suspend_threshold",
                        types::UpdateSuspendThreshold { new },
                        [
                            64u8, 91u8, 172u8, 51u8, 220u8, 174u8, 54u8, 47u8, 57u8, 89u8, 75u8,
                            39u8, 126u8, 198u8, 143u8, 35u8, 70u8, 125u8, 167u8, 14u8, 17u8, 18u8,
                            146u8, 222u8, 100u8, 92u8, 81u8, 239u8, 173u8, 43u8, 42u8, 174u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages which must be in the queue after which we drop any"]
                #[doc = "further messages from the channel."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                pub fn update_drop_threshold(
                    &self,
                    new: types::update_drop_threshold::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateDropThreshold>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "XcmpQueue",
                        "update_drop_threshold",
                        types::UpdateDropThreshold { new },
                        [
                            123u8, 54u8, 12u8, 180u8, 165u8, 198u8, 141u8, 200u8, 149u8, 168u8,
                            186u8, 237u8, 162u8, 91u8, 89u8, 242u8, 229u8, 16u8, 32u8, 254u8, 59u8,
                            168u8, 31u8, 134u8, 217u8, 251u8, 0u8, 102u8, 113u8, 194u8, 175u8, 9u8,
                        ],
                    )
                }
                #[doc = "Overwrites the number of pages which the queue must be reduced to before it signals"]
                #[doc = "that message sending may recommence after it has been suspended."]
                #[doc = ""]
                #[doc = "- `origin`: Must pass `Root`."]
                #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                pub fn update_resume_threshold(
                    &self,
                    new: types::update_resume_threshold::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UpdateResumeThreshold,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "XcmpQueue",
                        "update_resume_threshold",
                        types::UpdateResumeThreshold { new },
                        [
                            172u8, 136u8, 11u8, 106u8, 42u8, 157u8, 167u8, 183u8, 87u8, 62u8,
                            182u8, 17u8, 184u8, 59u8, 215u8, 230u8, 18u8, 243u8, 212u8, 34u8, 54u8,
                            188u8, 95u8, 119u8, 173u8, 20u8, 91u8, 206u8, 212u8, 57u8, 136u8, 77u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_xcmp_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An HRMP message was sent to a sibling parachain."]
            pub struct XcmpMessageSent {
                pub message_hash: xcmp_message_sent::MessageHash,
            }
            pub mod xcmp_message_sent {
                use super::runtime_types;
                pub type MessageHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for XcmpMessageSent {
                const PALLET: &'static str = "XcmpQueue";
                const EVENT: &'static str = "XcmpMessageSent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod inbound_xcmp_suspended {
                    use super::runtime_types;
                    pub type InboundXcmpSuspended =
                        runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                        >;
                }
                pub mod outbound_xcmp_status {
                    use super::runtime_types;
                    pub type OutboundXcmpStatus =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::cumulus_pallet_xcmp_queue::OutboundChannelDetails,
                        >;
                }
                pub mod outbound_xcmp_messages {
                    use super::runtime_types;
                    pub type OutboundXcmpMessages =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod signal_messages {
                    use super::runtime_types;
                    pub type SignalMessages =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
                pub mod queue_config {
                    use super::runtime_types;
                    pub type QueueConfig =
                        runtime_types::cumulus_pallet_xcmp_queue::QueueConfigData;
                }
                pub mod queue_suspended {
                    use super::runtime_types;
                    pub type QueueSuspended = ::core::primitive::bool;
                }
                pub mod delivery_fee_factor {
                    use super::runtime_types;
                    pub type DeliveryFeeFactor =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                    pub type Param0 = runtime_types::polkadot_parachain_primitives::primitives::Id;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The suspended inbound XCMP channels. All others are not suspended."]
                #[doc = ""]
                #[doc = " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block"]
                #[doc = " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached"]
                #[doc = " within the block and therefore only included once in the proof size."]
                #[doc = ""]
                #[doc = " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof"]
                #[doc = " will be smaller."]
                pub fn inbound_xcmp_suspended(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::inbound_xcmp_suspended::InboundXcmpSuspended,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "InboundXcmpSuspended",
                        (),
                        [
                            110u8, 23u8, 239u8, 104u8, 136u8, 224u8, 179u8, 180u8, 40u8, 159u8,
                            54u8, 15u8, 55u8, 111u8, 75u8, 147u8, 131u8, 127u8, 9u8, 57u8, 133u8,
                            70u8, 175u8, 181u8, 232u8, 49u8, 13u8, 19u8, 59u8, 151u8, 179u8, 215u8,
                        ],
                    )
                }
                #[doc = " The non-empty XCMP channels in order of becoming non-empty, and the index of the first"]
                #[doc = " and last outbound message. If the two indices are equal, then it indicates an empty"]
                #[doc = " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater"]
                #[doc = " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in"]
                #[doc = " case of the need to send a high-priority signal message this block."]
                #[doc = " The bool is true if there is a signal message waiting to be sent."]
                pub fn outbound_xcmp_status(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::outbound_xcmp_status::OutboundXcmpStatus,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "OutboundXcmpStatus",
                        (),
                        [
                            236u8, 81u8, 241u8, 94u8, 247u8, 213u8, 123u8, 240u8, 144u8, 27u8,
                            39u8, 73u8, 147u8, 85u8, 18u8, 2u8, 249u8, 25u8, 132u8, 158u8, 118u8,
                            84u8, 2u8, 226u8, 174u8, 94u8, 25u8, 117u8, 86u8, 121u8, 214u8, 32u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        (),
                        [
                            163u8, 69u8, 82u8, 238u8, 52u8, 57u8, 181u8, 23u8, 138u8, 75u8, 43u8,
                            208u8, 209u8, 195u8, 180u8, 199u8, 174u8, 101u8, 28u8, 248u8, 76u8,
                            190u8, 140u8, 116u8, 251u8, 123u8, 160u8, 119u8, 204u8, 91u8, 59u8,
                            234u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::outbound_xcmp_messages::Param0,
                    >,
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            163u8, 69u8, 82u8, 238u8, 52u8, 57u8, 181u8, 23u8, 138u8, 75u8, 43u8,
                            208u8, 209u8, 195u8, 180u8, 199u8, 174u8, 101u8, 28u8, 248u8, 76u8,
                            190u8, 140u8, 116u8, 251u8, 123u8, 160u8, 119u8, 204u8, 91u8, 59u8,
                            234u8,
                        ],
                    )
                }
                #[doc = " The messages outbound in a given XCMP channel."]
                pub fn outbound_xcmp_messages(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param0>,
                    _1: impl ::core::borrow::Borrow<types::outbound_xcmp_messages::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::outbound_xcmp_messages::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::outbound_xcmp_messages::Param1,
                        >,
                    ),
                    types::outbound_xcmp_messages::OutboundXcmpMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "OutboundXcmpMessages",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            163u8, 69u8, 82u8, 238u8, 52u8, 57u8, 181u8, 23u8, 138u8, 75u8, 43u8,
                            208u8, 209u8, 195u8, 180u8, 199u8, 174u8, 101u8, 28u8, 248u8, 76u8,
                            190u8, 140u8, 116u8, 251u8, 123u8, 160u8, 119u8, 204u8, 91u8, 59u8,
                            234u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::signal_messages::SignalMessages,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        (),
                        [
                            35u8, 133u8, 54u8, 149u8, 97u8, 64u8, 30u8, 174u8, 154u8, 60u8, 119u8,
                            92u8, 207u8, 67u8, 151u8, 242u8, 6u8, 128u8, 60u8, 204u8, 15u8, 135u8,
                            36u8, 234u8, 29u8, 122u8, 220u8, 28u8, 243u8, 152u8, 217u8, 61u8,
                        ],
                    )
                }
                #[doc = " Any signal messages waiting to be sent."]
                pub fn signal_messages(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::signal_messages::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::signal_messages::Param0,
                    >,
                    types::signal_messages::SignalMessages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "SignalMessages",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            35u8, 133u8, 54u8, 149u8, 97u8, 64u8, 30u8, 174u8, 154u8, 60u8, 119u8,
                            92u8, 207u8, 67u8, 151u8, 242u8, 6u8, 128u8, 60u8, 204u8, 15u8, 135u8,
                            36u8, 234u8, 29u8, 122u8, 220u8, 28u8, 243u8, 152u8, 217u8, 61u8,
                        ],
                    )
                }
                #[doc = " The configuration which controls the dynamics of the outbound queue."]
                pub fn queue_config(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queue_config::QueueConfig,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "QueueConfig",
                        (),
                        [
                            185u8, 67u8, 247u8, 243u8, 211u8, 232u8, 57u8, 240u8, 237u8, 181u8,
                            23u8, 114u8, 215u8, 128u8, 193u8, 1u8, 176u8, 53u8, 110u8, 195u8,
                            148u8, 80u8, 187u8, 143u8, 62u8, 30u8, 143u8, 34u8, 248u8, 109u8, 3u8,
                            141u8,
                        ],
                    )
                }
                #[doc = " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."]
                pub fn queue_suspended(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queue_suspended::QueueSuspended,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "QueueSuspended",
                        (),
                        [
                            165u8, 66u8, 105u8, 244u8, 113u8, 43u8, 177u8, 252u8, 212u8, 243u8,
                            143u8, 184u8, 87u8, 51u8, 163u8, 104u8, 29u8, 84u8, 119u8, 74u8, 233u8,
                            129u8, 203u8, 105u8, 2u8, 101u8, 19u8, 170u8, 69u8, 253u8, 80u8, 132u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by."]
                pub fn delivery_fee_factor_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::delivery_fee_factor::DeliveryFeeFactor,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "DeliveryFeeFactor",
                        (),
                        [
                            43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
                            135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
                            116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
                        ],
                    )
                }
                #[doc = " The factor to multiply the base delivery fee by."]
                pub fn delivery_fee_factor(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::delivery_fee_factor::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::delivery_fee_factor::Param0,
                    >,
                    types::delivery_fee_factor::DeliveryFeeFactor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "DeliveryFeeFactor",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            43u8, 5u8, 63u8, 235u8, 115u8, 155u8, 130u8, 27u8, 75u8, 216u8, 177u8,
                            135u8, 203u8, 147u8, 167u8, 95u8, 208u8, 188u8, 25u8, 14u8, 84u8, 63u8,
                            116u8, 41u8, 148u8, 110u8, 115u8, 215u8, 196u8, 36u8, 75u8, 102u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum number of inbound XCMP channels that can be suspended simultaneously."]
                #[doc = ""]
                #[doc = " Any further channel suspensions will fail and messages may get dropped without further"]
                #[doc = " notice. Choosing a high value (1000) is okay; the trade-off that is described in"]
                #[doc = " [`InboundXcmpSuspended`] still applies at that scale."]
                pub fn max_inbound_suspended(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "MaxInboundSuspended",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximal number of outbound XCMP channels that can have messages queued at the same time."]
                #[doc = ""]
                #[doc = " If this is reached, then no further messages can be sent to channels that do not yet"]
                #[doc = " have a message queued. This should be set to the expected maximum of outbound channels"]
                #[doc = " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,"]
                #[doc = " since otherwise the congestion control protocol will not work as intended and messages"]
                #[doc = " may be dropped. This value increases the PoV and should therefore not be picked too"]
                #[doc = " high. Governance needs to pay attention to not open more channels than this value."]
                pub fn max_active_outbound_channels(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "MaxActiveOutboundChannels",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximal page size for HRMP message pages."]
                #[doc = ""]
                #[doc = " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case"]
                #[doc = " benchmarking. The limit for the size of a message is slightly below this, since some"]
                #[doc = " overhead is incurred for encoding the format."]
                pub fn max_page_size(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "XcmpQueue",
                        "MaxPageSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod polkadot_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_xcm::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Send {
                    pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<send::Dest>,
                    pub message: ::subxt::ext::subxt_core::alloc::boxed::Box<send::Message>,
                }
                pub mod send {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Message = runtime_types::xcm::VersionedXcm;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Send {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "send";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "**This function is deprecated: Use `limited_teleport_assets` instead.**"]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` chain."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub struct TeleportAssets {
                    pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Dest>,
                    pub beneficiary:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Beneficiary>,
                    pub assets:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<teleport_assets::Assets>,
                    pub fee_asset_item: teleport_assets::FeeAssetItem,
                }
                pub mod teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location and may not be teleportable to `dest`."]
                #[doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `assets` have destination reserve: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"]
                #[doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"]
                #[doc = "   to mint and deposit reserve-based assets to `beneficiary`."]
                #[doc = ""]
                #[doc = "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**"]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub struct ReserveTransferAssets {
                    pub dest:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<reserve_transfer_assets::Dest>,
                    pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        reserve_transfer_assets::Beneficiary,
                    >,
                    pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        reserve_transfer_assets::Assets,
                    >,
                    pub fee_asset_item: reserve_transfer_assets::FeeAssetItem,
                }
                pub mod reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute an XCM message from a local, signed, origin."]
                #[doc = ""]
                #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                #[doc = "partially."]
                #[doc = ""]
                #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than"]
                #[doc = "the maximum amount of weight that the message could take to be executed, then no"]
                #[doc = "execution attempt will be made."]
                pub struct Execute {
                    pub message: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Message>,
                    pub max_weight: execute::MaxWeight,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Message = runtime_types::xcm::VersionedXcm;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                #[doc = "version of XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The destination that is being described."]
                #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                pub struct ForceXcmVersion {
                    pub location:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<force_xcm_version::Location>,
                    pub version: force_xcm_version::Version,
                }
                pub mod force_xcm_version {
                    use super::runtime_types;
                    pub type Location = runtime_types::staging_xcm::v5::location::Location;
                    pub type Version = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                #[doc = "version a destination can accept is unknown)."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                pub struct ForceDefaultXcmVersion {
                    pub maybe_xcm_version: force_default_xcm_version::MaybeXcmVersion,
                }
                pub mod force_default_xcm_version {
                    use super::runtime_types;
                    pub type MaybeXcmVersion = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceDefaultXcmVersion {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_default_xcm_version";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                pub struct ForceSubscribeVersionNotify {
                    pub location: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        force_subscribe_version_notify::Location,
                    >,
                }
                pub mod force_subscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_subscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                #[doc = "version changes."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                #[doc = "  notifications which we no longer desire."]
                pub struct ForceUnsubscribeVersionNotify {
                    pub location: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        force_unsubscribe_version_notify::Location,
                    >,
                }
                pub mod force_unsubscribe_version_notify {
                    use super::runtime_types;
                    pub type Location = runtime_types::xcm::VersionedLocation;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUnsubscribeVersionNotify {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_unsubscribe_version_notify";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location and may not be teleportable to `dest`."]
                #[doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `assets` have destination reserve: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"]
                #[doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"]
                #[doc = "   to mint and deposit reserve-based assets to `beneficiary`."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub struct LimitedReserveTransferAssets {
                    pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        limited_reserve_transfer_assets::Dest,
                    >,
                    pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        limited_reserve_transfer_assets::Beneficiary,
                    >,
                    pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        limited_reserve_transfer_assets::Assets,
                    >,
                    pub fee_asset_item: limited_reserve_transfer_assets::FeeAssetItem,
                    pub weight_limit: limited_reserve_transfer_assets::WeightLimit,
                }
                pub mod limited_reserve_transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LimitedReserveTransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_reserve_transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` chain."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub struct LimitedTeleportAssets {
                    pub dest:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<limited_teleport_assets::Dest>,
                    pub beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        limited_teleport_assets::Beneficiary,
                    >,
                    pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        limited_teleport_assets::Assets,
                    >,
                    pub fee_asset_item: limited_teleport_assets::FeeAssetItem,
                    pub weight_limit: limited_teleport_assets::WeightLimit,
                }
                pub mod limited_teleport_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LimitedTeleportAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "limited_teleport_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set or unset the global suspension state of the XCM executor."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `suspended`: `true` to suspend, `false` to resume."]
                pub struct ForceSuspension {
                    pub suspended: force_suspension::Suspended,
                }
                pub mod force_suspension {
                    use super::runtime_types;
                    pub type Suspended = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSuspension {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "force_suspension";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve, or through teleports."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for"]
                #[doc = "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the"]
                #[doc = "operation will fail and the sent assets may be at risk."]
                #[doc = ""]
                #[doc = "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable"]
                #[doc = "to `dest`, no limitations imposed on `fees`."]
                #[doc = " - for local reserve: transfer assets to sovereign account of destination chain and"]
                #[doc = "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to"]
                #[doc = "   `beneficiary`."]
                #[doc = " - for destination reserve: burn local assets and forward a notification to `dest` chain"]
                #[doc = "   to withdraw the reserve assets from this chain's sovereign account and deposit them"]
                #[doc = "   to `beneficiary`."]
                #[doc = " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves"]
                #[doc = "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint"]
                #[doc = "   and deposit reserve-based assets to `beneficiary`."]
                #[doc = " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport"]
                #[doc = "   assets and deposit them to `beneficiary`."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent,"]
                #[doc = "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send"]
                #[doc = "  from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub struct TransferAssets {
                    pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<transfer_assets::Dest>,
                    pub beneficiary:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<transfer_assets::Beneficiary>,
                    pub assets:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<transfer_assets::Assets>,
                    pub fee_asset_item: transfer_assets::FeeAssetItem,
                    pub weight_limit: transfer_assets::WeightLimit,
                }
                pub mod transfer_assets {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type FeeAssetItem = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "transfer_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claims assets trapped on this pallet because of leftover assets during XCM execution."]
                #[doc = ""]
                #[doc = "- `origin`: Anyone can call this extrinsic."]
                #[doc = "- `assets`: The exact assets that were trapped. Use the version to specify what version"]
                #[doc = "was the latest when they were trapped."]
                #[doc = "- `beneficiary`: The location/account where the claimed assets will be deposited."]
                pub struct ClaimAssets {
                    pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<claim_assets::Assets>,
                    pub beneficiary:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<claim_assets::Beneficiary>,
                }
                pub mod claim_assets {
                    use super::runtime_types;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type Beneficiary = runtime_types::xcm::VersionedLocation;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimAssets {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "claim_assets";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer assets from the local chain to the destination chain using explicit transfer"]
                #[doc = "types for assets and fees."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location or may be teleportable to `dest`. Caller must"]
                #[doc = "provide the `assets_transfer_type` to be used for `assets`:"]
                #[doc = " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `TransferType::DestinationReserve`: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`"]
                #[doc = "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another"]
                #[doc = "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically"]
                #[doc = "   the remote `reserve` is Asset Hub."]
                #[doc = " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to"]
                #[doc = "   mint/teleport assets and deposit them to `beneficiary`."]
                #[doc = ""]
                #[doc = "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to"]
                #[doc = "buy execution using transferred `assets` identified by `remote_fees_id`."]
                #[doc = "Make sure enough of the specified `remote_fees_id` asset is included in the given list"]
                #[doc = "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "`remote_fees_id` may use different transfer type than rest of `assets` and can be"]
                #[doc = "specified through `fees_transfer_type`."]
                #[doc = ""]
                #[doc = "The caller needs to specify what should happen to the transferred assets once they reach"]
                #[doc = "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which"]
                #[doc = "contains the instructions to execute on `dest` as a final step."]
                #[doc = "  This is usually as simple as:"]
                #[doc = "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,"]
                #[doc = "  but could be something more exotic like sending the `assets` even further."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from"]
                #[doc = "  parachain across a bridge to another ecosystem destination."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`."]
                #[doc = "- `remote_fees_id`: One of the included `assets` to be used to pay fees."]
                #[doc = "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets."]
                #[doc = "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the"]
                #[doc = "  transfer, which also determines what happens to the assets on the destination chain."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub struct TransferAssetsUsingTypeAndThen {
                    pub dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::Dest,
                    >,
                    pub assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::Assets,
                    >,
                    pub assets_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::AssetsTransferType,
                    >,
                    pub remote_fees_id: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::RemoteFeesId,
                    >,
                    pub fees_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::FeesTransferType,
                    >,
                    pub custom_xcm_on_dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        transfer_assets_using_type_and_then::CustomXcmOnDest,
                    >,
                    pub weight_limit: transfer_assets_using_type_and_then::WeightLimit,
                }
                pub mod transfer_assets_using_type_and_then {
                    use super::runtime_types;
                    pub type Dest = runtime_types::xcm::VersionedLocation;
                    pub type Assets = runtime_types::xcm::VersionedAssets;
                    pub type AssetsTransferType =
                        runtime_types::staging_xcm_executor::traits::asset_transfer::TransferType;
                    pub type RemoteFeesId = runtime_types::xcm::VersionedAssetId;
                    pub type FeesTransferType =
                        runtime_types::staging_xcm_executor::traits::asset_transfer::TransferType;
                    pub type CustomXcmOnDest = runtime_types::xcm::VersionedXcm;
                    pub type WeightLimit = runtime_types::xcm::v3::WeightLimit;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAssetsUsingTypeAndThen {
                    const PALLET: &'static str = "PolkadotXcm";
                    const CALL: &'static str = "transfer_assets_using_type_and_then";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn send(
                    &self,
                    dest: types::send::Dest,
                    message: types::send::Message,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Send>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "send",
                        types::Send {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            message: ::subxt::ext::subxt_core::alloc::boxed::Box::new(message),
                        },
                        [
                            93u8, 119u8, 63u8, 166u8, 250u8, 195u8, 91u8, 182u8, 12u8, 155u8,
                            130u8, 112u8, 114u8, 198u8, 203u8, 27u8, 70u8, 104u8, 184u8, 23u8,
                            18u8, 5u8, 251u8, 132u8, 43u8, 197u8, 163u8, 192u8, 96u8, 50u8, 78u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "**This function is deprecated: Use `limited_teleport_assets` instead.**"]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` chain."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn teleport_assets(
                    &self,
                    dest: types::teleport_assets::Dest,
                    beneficiary: types::teleport_assets::Beneficiary,
                    assets: types::teleport_assets::Assets,
                    fee_asset_item: types::teleport_assets::FeeAssetItem,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TeleportAssets>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "teleport_assets",
                        types::TeleportAssets {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            31u8, 60u8, 0u8, 220u8, 157u8, 38u8, 28u8, 140u8, 79u8, 243u8, 182u8,
                            229u8, 158u8, 45u8, 213u8, 132u8, 149u8, 196u8, 212u8, 239u8, 23u8,
                            19u8, 69u8, 27u8, 250u8, 110u8, 193u8, 60u8, 227u8, 252u8, 174u8, 35u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location and may not be teleportable to `dest`."]
                #[doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `assets` have destination reserve: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"]
                #[doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"]
                #[doc = "   to mint and deposit reserve-based assets to `beneficiary`."]
                #[doc = ""]
                #[doc = "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**"]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"]
                #[doc = "with all fees taken as needed from the asset."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                pub fn reserve_transfer_assets(
                    &self,
                    dest: types::reserve_transfer_assets::Dest,
                    beneficiary: types::reserve_transfer_assets::Beneficiary,
                    assets: types::reserve_transfer_assets::Assets,
                    fee_asset_item: types::reserve_transfer_assets::FeeAssetItem,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ReserveTransferAssets,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "reserve_transfer_assets",
                        types::ReserveTransferAssets {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            fee_asset_item,
                        },
                        [
                            76u8, 122u8, 201u8, 193u8, 160u8, 210u8, 58u8, 150u8, 236u8, 130u8,
                            225u8, 28u8, 35u8, 9u8, 206u8, 235u8, 14u8, 101u8, 193u8, 118u8, 145u8,
                            230u8, 112u8, 65u8, 172u8, 251u8, 62u8, 64u8, 130u8, 223u8, 153u8,
                            139u8,
                        ],
                    )
                }
                #[doc = "Execute an XCM message from a local, signed, origin."]
                #[doc = ""]
                #[doc = "An event is deposited indicating whether `msg` could be executed completely or only"]
                #[doc = "partially."]
                #[doc = ""]
                #[doc = "No more than `max_weight` will be used in its attempted execution. If this is less than"]
                #[doc = "the maximum amount of weight that the message could take to be executed, then no"]
                #[doc = "execution attempt will be made."]
                pub fn execute(
                    &self,
                    message: types::execute::Message,
                    max_weight: types::execute::MaxWeight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "execute",
                        types::Execute {
                            message: ::subxt::ext::subxt_core::alloc::boxed::Box::new(message),
                            max_weight,
                        },
                        [
                            180u8, 139u8, 111u8, 215u8, 65u8, 112u8, 219u8, 68u8, 75u8, 211u8, 0u8,
                            18u8, 240u8, 181u8, 158u8, 198u8, 195u8, 7u8, 41u8, 144u8, 8u8, 239u8,
                            239u8, 215u8, 247u8, 46u8, 44u8, 114u8, 160u8, 230u8, 165u8, 85u8,
                        ],
                    )
                }
                #[doc = "Extoll that a particular destination can be communicated with through a particular"]
                #[doc = "version of XCM."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The destination that is being described."]
                #[doc = "- `xcm_version`: The latest version of XCM that `location` supports."]
                pub fn force_xcm_version(
                    &self,
                    location: types::force_xcm_version::Location,
                    version: types::force_xcm_version::Version,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceXcmVersion>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "force_xcm_version",
                        types::ForceXcmVersion {
                            location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
                            version,
                        },
                        [
                            136u8, 43u8, 72u8, 5u8, 164u8, 97u8, 177u8, 61u8, 8u8, 112u8, 148u8,
                            43u8, 0u8, 23u8, 134u8, 21u8, 173u8, 181u8, 207u8, 249u8, 98u8, 122u8,
                            74u8, 131u8, 172u8, 12u8, 146u8, 124u8, 220u8, 97u8, 126u8, 253u8,
                        ],
                    )
                }
                #[doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"]
                #[doc = "version a destination can accept is unknown)."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."]
                pub fn force_default_xcm_version(
                    &self,
                    maybe_xcm_version: types::force_default_xcm_version::MaybeXcmVersion,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceDefaultXcmVersion,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "force_default_xcm_version",
                        types::ForceDefaultXcmVersion { maybe_xcm_version },
                        [
                            43u8, 114u8, 102u8, 104u8, 209u8, 234u8, 108u8, 173u8, 109u8, 188u8,
                            94u8, 214u8, 136u8, 43u8, 153u8, 75u8, 161u8, 192u8, 76u8, 12u8, 221u8,
                            237u8, 158u8, 247u8, 41u8, 193u8, 35u8, 174u8, 183u8, 207u8, 79u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "Ask a location to notify us regarding their XCM version and any changes to it."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we should subscribe for XCM version notifications."]
                pub fn force_subscribe_version_notify(
                    &self,
                    location: types::force_subscribe_version_notify::Location,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceSubscribeVersionNotify,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "force_subscribe_version_notify",
                        types::ForceSubscribeVersionNotify {
                            location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
                        },
                        [
                            51u8, 103u8, 204u8, 180u8, 35u8, 50u8, 212u8, 76u8, 243u8, 161u8, 5u8,
                            180u8, 61u8, 194u8, 181u8, 13u8, 209u8, 18u8, 182u8, 26u8, 138u8,
                            139u8, 205u8, 98u8, 62u8, 185u8, 194u8, 240u8, 5u8, 60u8, 245u8, 91u8,
                        ],
                    )
                }
                #[doc = "Require that a particular destination should no longer notify us regarding any XCM"]
                #[doc = "version changes."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `location`: The location to which we are currently subscribed for XCM version"]
                #[doc = "  notifications which we no longer desire."]
                pub fn force_unsubscribe_version_notify(
                    &self,
                    location: types::force_unsubscribe_version_notify::Location,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceUnsubscribeVersionNotify,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "force_unsubscribe_version_notify",
                        types::ForceUnsubscribeVersionNotify {
                            location: ::subxt::ext::subxt_core::alloc::boxed::Box::new(location),
                        },
                        [
                            80u8, 153u8, 123u8, 155u8, 105u8, 164u8, 139u8, 252u8, 89u8, 174u8,
                            54u8, 14u8, 99u8, 172u8, 85u8, 239u8, 45u8, 141u8, 84u8, 69u8, 47u8,
                            18u8, 173u8, 201u8, 137u8, 186u8, 217u8, 105u8, 105u8, 20u8, 6u8,
                            198u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location and may not be teleportable to `dest`."]
                #[doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `assets` have destination reserve: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"]
                #[doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"]
                #[doc = "   to mint and deposit reserve-based assets to `beneficiary`."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_reserve_transfer_assets(
                    &self,
                    dest: types::limited_reserve_transfer_assets::Dest,
                    beneficiary: types::limited_reserve_transfer_assets::Beneficiary,
                    assets: types::limited_reserve_transfer_assets::Assets,
                    fee_asset_item: types::limited_reserve_transfer_assets::FeeAssetItem,
                    weight_limit: types::limited_reserve_transfer_assets::WeightLimit,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::LimitedReserveTransferAssets,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "limited_reserve_transfer_assets",
                        types::LimitedReserveTransferAssets {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            72u8, 168u8, 103u8, 54u8, 253u8, 3u8, 152u8, 167u8, 60u8, 214u8, 24u8,
                            47u8, 179u8, 36u8, 251u8, 15u8, 213u8, 191u8, 95u8, 128u8, 93u8, 42u8,
                            205u8, 37u8, 214u8, 170u8, 241u8, 71u8, 176u8, 11u8, 43u8, 74u8,
                        ],
                    )
                }
                #[doc = "Teleport some assets from the local chain to some destination chain."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` chain."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn limited_teleport_assets(
                    &self,
                    dest: types::limited_teleport_assets::Dest,
                    beneficiary: types::limited_teleport_assets::Beneficiary,
                    assets: types::limited_teleport_assets::Assets,
                    fee_asset_item: types::limited_teleport_assets::FeeAssetItem,
                    weight_limit: types::limited_teleport_assets::WeightLimit,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::LimitedTeleportAssets,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "limited_teleport_assets",
                        types::LimitedTeleportAssets {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            56u8, 190u8, 251u8, 133u8, 34u8, 100u8, 32u8, 57u8, 114u8, 73u8, 153u8,
                            74u8, 178u8, 228u8, 239u8, 87u8, 242u8, 202u8, 56u8, 66u8, 22u8, 216u8,
                            113u8, 25u8, 233u8, 238u8, 164u8, 76u8, 144u8, 204u8, 219u8, 91u8,
                        ],
                    )
                }
                #[doc = "Set or unset the global suspension state of the XCM executor."]
                #[doc = ""]
                #[doc = "- `origin`: Must be an origin specified by AdminOrigin."]
                #[doc = "- `suspended`: `true` to suspend, `false` to resume."]
                pub fn force_suspension(
                    &self,
                    suspended: types::force_suspension::Suspended,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSuspension>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "force_suspension",
                        types::ForceSuspension { suspended },
                        [
                            78u8, 125u8, 93u8, 55u8, 129u8, 44u8, 36u8, 227u8, 75u8, 46u8, 68u8,
                            202u8, 81u8, 127u8, 111u8, 92u8, 149u8, 38u8, 225u8, 185u8, 183u8,
                            154u8, 89u8, 159u8, 79u8, 10u8, 229u8, 1u8, 226u8, 243u8, 65u8, 238u8,
                        ],
                    )
                }
                #[doc = "Transfer some assets from the local chain to the destination chain through their local,"]
                #[doc = "destination or remote reserve, or through teleports."]
                #[doc = ""]
                #[doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"]
                #[doc = "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for"]
                #[doc = "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the"]
                #[doc = "operation will fail and the sent assets may be at risk."]
                #[doc = ""]
                #[doc = "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable"]
                #[doc = "to `dest`, no limitations imposed on `fees`."]
                #[doc = " - for local reserve: transfer assets to sovereign account of destination chain and"]
                #[doc = "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to"]
                #[doc = "   `beneficiary`."]
                #[doc = " - for destination reserve: burn local assets and forward a notification to `dest` chain"]
                #[doc = "   to withdraw the reserve assets from this chain's sovereign account and deposit them"]
                #[doc = "   to `beneficiary`."]
                #[doc = " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves"]
                #[doc = "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint"]
                #[doc = "   and deposit reserve-based assets to `beneficiary`."]
                #[doc = " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport"]
                #[doc = "   assets and deposit them to `beneficiary`."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent,"]
                #[doc = "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send"]
                #[doc = "  from relay to parachain."]
                #[doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"]
                #[doc = "  generally be an `AccountId32` value."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"]
                #[doc = "  fees."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn transfer_assets(
                    &self,
                    dest: types::transfer_assets::Dest,
                    beneficiary: types::transfer_assets::Beneficiary,
                    assets: types::transfer_assets::Assets,
                    fee_asset_item: types::transfer_assets::FeeAssetItem,
                    weight_limit: types::transfer_assets::WeightLimit,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAssets>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "transfer_assets",
                        types::TransferAssets {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            fee_asset_item,
                            weight_limit,
                        },
                        [
                            204u8, 118u8, 44u8, 144u8, 51u8, 77u8, 235u8, 235u8, 86u8, 166u8, 92u8,
                            106u8, 197u8, 151u8, 154u8, 136u8, 137u8, 206u8, 111u8, 118u8, 94u8,
                            22u8, 7u8, 21u8, 13u8, 169u8, 214u8, 87u8, 84u8, 140u8, 6u8, 54u8,
                        ],
                    )
                }
                #[doc = "Claims assets trapped on this pallet because of leftover assets during XCM execution."]
                #[doc = ""]
                #[doc = "- `origin`: Anyone can call this extrinsic."]
                #[doc = "- `assets`: The exact assets that were trapped. Use the version to specify what version"]
                #[doc = "was the latest when they were trapped."]
                #[doc = "- `beneficiary`: The location/account where the claimed assets will be deposited."]
                pub fn claim_assets(
                    &self,
                    assets: types::claim_assets::Assets,
                    beneficiary: types::claim_assets::Beneficiary,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimAssets>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "claim_assets",
                        types::ClaimAssets {
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                        },
                        [
                            7u8, 158u8, 80u8, 180u8, 145u8, 151u8, 34u8, 132u8, 236u8, 243u8, 77u8,
                            177u8, 66u8, 172u8, 57u8, 182u8, 226u8, 110u8, 246u8, 159u8, 61u8,
                            31u8, 167u8, 210u8, 226u8, 215u8, 103u8, 234u8, 16u8, 95u8, 92u8,
                            248u8,
                        ],
                    )
                }
                #[doc = "Transfer assets from the local chain to the destination chain using explicit transfer"]
                #[doc = "types for assets and fees."]
                #[doc = ""]
                #[doc = "`assets` must have same reserve location or may be teleportable to `dest`. Caller must"]
                #[doc = "provide the `assets_transfer_type` to be used for `assets`:"]
                #[doc = " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination"]
                #[doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"]
                #[doc = "   assets to `beneficiary`."]
                #[doc = " - `TransferType::DestinationReserve`: burn local assets and forward a notification to"]
                #[doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"]
                #[doc = "   deposit them to `beneficiary`."]
                #[doc = " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`"]
                #[doc = "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another"]
                #[doc = "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically"]
                #[doc = "   the remote `reserve` is Asset Hub."]
                #[doc = " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to"]
                #[doc = "   mint/teleport assets and deposit them to `beneficiary`."]
                #[doc = ""]
                #[doc = "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to"]
                #[doc = "buy execution using transferred `assets` identified by `remote_fees_id`."]
                #[doc = "Make sure enough of the specified `remote_fees_id` asset is included in the given list"]
                #[doc = "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight"]
                #[doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"]
                #[doc = "at risk."]
                #[doc = ""]
                #[doc = "`remote_fees_id` may use different transfer type than rest of `assets` and can be"]
                #[doc = "specified through `fees_transfer_type`."]
                #[doc = ""]
                #[doc = "The caller needs to specify what should happen to the transferred assets once they reach"]
                #[doc = "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which"]
                #[doc = "contains the instructions to execute on `dest` as a final step."]
                #[doc = "  This is usually as simple as:"]
                #[doc = "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,"]
                #[doc = "  but could be something more exotic like sending the `assets` even further."]
                #[doc = ""]
                #[doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."]
                #[doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"]
                #[doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"]
                #[doc = "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from"]
                #[doc = "  parachain across a bridge to another ecosystem destination."]
                #[doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"]
                #[doc = "  fee on the `dest` (and possibly reserve) chains."]
                #[doc = "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`."]
                #[doc = "- `remote_fees_id`: One of the included `assets` to be used to pay fees."]
                #[doc = "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets."]
                #[doc = "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the"]
                #[doc = "  transfer, which also determines what happens to the assets on the destination chain."]
                #[doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."]
                pub fn transfer_assets_using_type_and_then(
                    &self,
                    dest: types::transfer_assets_using_type_and_then::Dest,
                    assets: types::transfer_assets_using_type_and_then::Assets,
                    assets_transfer_type : types :: transfer_assets_using_type_and_then :: AssetsTransferType,
                    remote_fees_id: types::transfer_assets_using_type_and_then::RemoteFeesId,
                    fees_transfer_type : types :: transfer_assets_using_type_and_then :: FeesTransferType,
                    custom_xcm_on_dest: types::transfer_assets_using_type_and_then::CustomXcmOnDest,
                    weight_limit: types::transfer_assets_using_type_and_then::WeightLimit,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::TransferAssetsUsingTypeAndThen,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "PolkadotXcm",
                        "transfer_assets_using_type_and_then",
                        types::TransferAssetsUsingTypeAndThen {
                            dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(dest),
                            assets: ::subxt::ext::subxt_core::alloc::boxed::Box::new(assets),
                            assets_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                assets_transfer_type,
                            ),
                            remote_fees_id: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                remote_fees_id,
                            ),
                            fees_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                fees_transfer_type,
                            ),
                            custom_xcm_on_dest: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                custom_xcm_on_dest,
                            ),
                            weight_limit,
                        },
                        [
                            149u8, 4u8, 128u8, 172u8, 222u8, 243u8, 161u8, 145u8, 0u8, 197u8, 43u8,
                            134u8, 119u8, 10u8, 68u8, 119u8, 120u8, 227u8, 155u8, 159u8, 192u8,
                            90u8, 44u8, 60u8, 199u8, 178u8, 26u8, 171u8, 3u8, 13u8, 217u8, 27u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Execution of an XCM message was attempted."]
            pub struct Attempted {
                pub outcome: attempted::Outcome,
            }
            pub mod attempted {
                use super::runtime_types;
                pub type Outcome = runtime_types::staging_xcm::v5::traits::Outcome;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Attempted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Attempted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A XCM message was sent."]
            pub struct Sent {
                pub origin: sent::Origin,
                pub destination: sent::Destination,
                pub message: sent::Message,
                pub message_id: sent::MessageId,
            }
            pub mod sent {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type Destination = runtime_types::staging_xcm::v5::location::Location;
                pub type Message = runtime_types::staging_xcm::v5::Xcm;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Sent {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Sent";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response received which does not match a registered query. This may be because a"]
            #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
            #[doc = "because the query timed out."]
            pub struct UnexpectedResponse {
                pub origin: unexpected_response::Origin,
                pub query_id: unexpected_response::QueryId,
            }
            pub mod unexpected_response {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UnexpectedResponse {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "UnexpectedResponse";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
            #[doc = "no registered notification call."]
            pub struct ResponseReady {
                pub query_id: response_ready::QueryId,
                pub response: response_ready::Response,
            }
            pub mod response_ready {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type Response = runtime_types::staging_xcm::v5::Response;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ResponseReady {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseReady";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification has"]
            #[doc = "been dispatched and executed successfully."]
            pub struct Notified {
                pub query_id: notified::QueryId,
                pub pallet_index: notified::PalletIndex,
                pub call_index: notified::CallIndex,
            }
            pub mod notified {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Notified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "Notified";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The registered notification"]
            #[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
            #[doc = "originally budgeted by this runtime for the query result."]
            pub struct NotifyOverweight {
                pub query_id: notify_overweight::QueryId,
                pub pallet_index: notify_overweight::PalletIndex,
                pub call_index: notify_overweight::CallIndex,
                pub actual_weight: notify_overweight::ActualWeight,
                pub max_budgeted_weight: notify_overweight::MaxBudgetedWeight,
            }
            pub mod notify_overweight {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
                pub type ActualWeight = runtime_types::sp_weights::weight_v2::Weight;
                pub type MaxBudgetedWeight = runtime_types::sp_weights::weight_v2::Weight;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyOverweight {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyOverweight";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. There was a general error with"]
            #[doc = "dispatching the notification call."]
            pub struct NotifyDispatchError {
                pub query_id: notify_dispatch_error::QueryId,
                pub pallet_index: notify_dispatch_error::PalletIndex,
                pub call_index: notify_dispatch_error::CallIndex,
            }
            pub mod notify_dispatch_error {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyDispatchError {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDispatchError";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
            #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
            #[doc = "is not `(origin, QueryId, Response)`."]
            pub struct NotifyDecodeFailed {
                pub query_id: notify_decode_failed::QueryId,
                pub pallet_index: notify_decode_failed::PalletIndex,
                pub call_index: notify_decode_failed::CallIndex,
            }
            pub mod notify_decode_failed {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
                pub type PalletIndex = ::core::primitive::u8;
                pub type CallIndex = ::core::primitive::u8;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyDecodeFailed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyDecodeFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the origin location of the response does"]
            #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            pub struct InvalidResponder {
                pub origin: invalid_responder::Origin,
                pub query_id: invalid_responder::QueryId,
                pub expected_location: invalid_responder::ExpectedLocation,
            }
            pub mod invalid_responder {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type ExpectedLocation =
                    ::core::option::Option<runtime_types::staging_xcm::v5::location::Location>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidResponder {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponder";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected origin location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            pub struct InvalidResponderVersion {
                pub origin: invalid_responder_version::Origin,
                pub query_id: invalid_responder_version::QueryId,
            }
            pub mod invalid_responder_version {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidResponderVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidResponderVersion";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Received query response has been read and removed."]
            pub struct ResponseTaken {
                pub query_id: response_taken::QueryId,
            }
            pub mod response_taken {
                use super::runtime_types;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ResponseTaken {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "ResponseTaken";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some assets have been placed in an asset trap."]
            pub struct AssetsTrapped {
                pub hash: assets_trapped::Hash,
                pub origin: assets_trapped::Origin,
                pub assets: assets_trapped::Assets,
            }
            pub mod assets_trapped {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type Assets = runtime_types::xcm::VersionedAssets;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetsTrapped {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsTrapped";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An XCM version change notification message has been attempted to be sent."]
            #[doc = ""]
            #[doc = "The cost of sending it (borne by the chain) is included."]
            pub struct VersionChangeNotified {
                pub destination: version_change_notified::Destination,
                pub result: version_change_notified::Result,
                pub cost: version_change_notified::Cost,
                pub message_id: version_change_notified::MessageId,
            }
            pub mod version_change_notified {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v5::location::Location;
                pub type Result = ::core::primitive::u32;
                pub type Cost = runtime_types::staging_xcm::v5::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VersionChangeNotified {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionChangeNotified";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The supported version of a location has been changed. This might be through an"]
            #[doc = "automatic notification or a manual intervention."]
            pub struct SupportedVersionChanged {
                pub location: supported_version_changed::Location,
                pub version: supported_version_changed::Version,
            }
            pub mod supported_version_changed {
                use super::runtime_types;
                pub type Location = runtime_types::staging_xcm::v5::location::Location;
                pub type Version = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SupportedVersionChanged {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "SupportedVersionChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "sending the notification to it."]
            pub struct NotifyTargetSendFail {
                pub location: notify_target_send_fail::Location,
                pub query_id: notify_target_send_fail::QueryId,
                pub error: notify_target_send_fail::Error,
            }
            pub mod notify_target_send_fail {
                use super::runtime_types;
                pub type Location = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type Error = runtime_types::xcm::v5::traits::Error;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyTargetSendFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetSendFail";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A given location which had a version change subscription was dropped owing to an error"]
            #[doc = "migrating the location to our new XCM format."]
            pub struct NotifyTargetMigrationFail {
                pub location: notify_target_migration_fail::Location,
                pub query_id: notify_target_migration_fail::QueryId,
            }
            pub mod notify_target_migration_fail {
                use super::runtime_types;
                pub type Location = runtime_types::xcm::VersionedLocation;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NotifyTargetMigrationFail {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "NotifyTargetMigrationFail";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the expected querier location placed in"]
            #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
            #[doc = ""]
            #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
            #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
            #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
            #[doc = "needed."]
            pub struct InvalidQuerierVersion {
                pub origin: invalid_querier_version::Origin,
                pub query_id: invalid_querier_version::QueryId,
            }
            pub mod invalid_querier_version {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidQuerierVersion {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerierVersion";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Expected query response has been received but the querier location of the response does"]
            #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
            #[doc = "be received and acted upon."]
            pub struct InvalidQuerier {
                pub origin: invalid_querier::Origin,
                pub query_id: invalid_querier::QueryId,
                pub expected_querier: invalid_querier::ExpectedQuerier,
                pub maybe_actual_querier: invalid_querier::MaybeActualQuerier,
            }
            pub mod invalid_querier {
                use super::runtime_types;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type QueryId = ::core::primitive::u64;
                pub type ExpectedQuerier = runtime_types::staging_xcm::v5::location::Location;
                pub type MaybeActualQuerier =
                    ::core::option::Option<runtime_types::staging_xcm::v5::location::Location>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidQuerier {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "InvalidQuerier";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
            #[doc = "A version information message is sent to them and its cost is included."]
            pub struct VersionNotifyStarted {
                pub destination: version_notify_started::Destination,
                pub cost: version_notify_started::Cost,
                pub message_id: version_notify_started::MessageId,
            }
            pub mod version_notify_started {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v5::location::Location;
                pub type Cost = runtime_types::staging_xcm::v5::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyStarted {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyStarted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain send us XCM version change notifications."]
            pub struct VersionNotifyRequested {
                pub destination: version_notify_requested::Destination,
                pub cost: version_notify_requested::Cost,
                pub message_id: version_notify_requested::MessageId,
            }
            pub mod version_notify_requested {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v5::location::Location;
                pub type Cost = runtime_types::staging_xcm::v5::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyRequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyRequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "We have requested that a remote chain stops sending us XCM version change"]
            #[doc = "notifications."]
            pub struct VersionNotifyUnrequested {
                pub destination: version_notify_unrequested::Destination,
                pub cost: version_notify_unrequested::Cost,
                pub message_id: version_notify_unrequested::MessageId,
            }
            pub mod version_notify_unrequested {
                use super::runtime_types;
                pub type Destination = runtime_types::staging_xcm::v5::location::Location;
                pub type Cost = runtime_types::staging_xcm::v5::asset::Assets;
                pub type MessageId = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VersionNotifyUnrequested {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionNotifyUnrequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
            pub struct FeesPaid {
                pub paying: fees_paid::Paying,
                pub fees: fees_paid::Fees,
            }
            pub mod fees_paid {
                use super::runtime_types;
                pub type Paying = runtime_types::staging_xcm::v5::location::Location;
                pub type Fees = runtime_types::staging_xcm::v5::asset::Assets;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for FeesPaid {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "FeesPaid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some assets have been claimed from an asset trap"]
            pub struct AssetsClaimed {
                pub hash: assets_claimed::Hash,
                pub origin: assets_claimed::Origin,
                pub assets: assets_claimed::Assets,
            }
            pub mod assets_claimed {
                use super::runtime_types;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                pub type Origin = runtime_types::staging_xcm::v5::location::Location;
                pub type Assets = runtime_types::xcm::VersionedAssets;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetsClaimed {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "AssetsClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A XCM version migration finished."]
            pub struct VersionMigrationFinished {
                pub version: version_migration_finished::Version,
            }
            pub mod version_migration_finished {
                use super::runtime_types;
                pub type Version = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VersionMigrationFinished {
                const PALLET: &'static str = "PolkadotXcm";
                const EVENT: &'static str = "VersionMigrationFinished";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod query_counter {
                    use super::runtime_types;
                    pub type QueryCounter = ::core::primitive::u64;
                }
                pub mod queries {
                    use super::runtime_types;
                    pub type Queries =
                        runtime_types::pallet_xcm::pallet::QueryStatus<::core::primitive::u32>;
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod asset_traps {
                    use super::runtime_types;
                    pub type AssetTraps = ::core::primitive::u32;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod safe_xcm_version {
                    use super::runtime_types;
                    pub type SafeXcmVersion = ::core::primitive::u32;
                }
                pub mod supported_version {
                    use super::runtime_types;
                    pub type SupportedVersion = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_notifiers {
                    use super::runtime_types;
                    pub type VersionNotifiers = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_notify_targets {
                    use super::runtime_types;
                    pub type VersionNotifyTargets = (
                        ::core::primitive::u64,
                        runtime_types::sp_weights::weight_v2::Weight,
                        ::core::primitive::u32,
                    );
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::xcm::VersionedLocation;
                }
                pub mod version_discovery_queue {
                    use super::runtime_types;
                    pub type VersionDiscoveryQueue =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            runtime_types::xcm::VersionedLocation,
                            ::core::primitive::u32,
                        )>;
                }
                pub mod current_migration {
                    use super::runtime_types;
                    pub type CurrentMigration =
                        runtime_types::pallet_xcm::pallet::VersionMigrationStage;
                }
                pub mod remote_locked_fungibles {
                    use super::runtime_types;
                    pub type RemoteLockedFungibles =
                        runtime_types::pallet_xcm::pallet::RemoteLockedFungibleRecord<()>;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::account::AccountId20;
                    pub type Param2 = runtime_types::xcm::VersionedAssetId;
                }
                pub mod locked_fungibles {
                    use super::runtime_types;
                    pub type LockedFungibles =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u128,
                            runtime_types::xcm::VersionedLocation,
                        )>;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod xcm_execution_suspended {
                    use super::runtime_types;
                    pub type XcmExecutionSuspended = ::core::primitive::bool;
                }
                pub mod should_record_xcm {
                    use super::runtime_types;
                    pub type ShouldRecordXcm = ::core::primitive::bool;
                }
                pub mod recorded_xcm {
                    use super::runtime_types;
                    pub type RecordedXcm = runtime_types::staging_xcm::v5::Xcm;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The latest available query index."]
                pub fn query_counter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::query_counter::QueryCounter,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "QueryCounter",
                        (),
                        [
                            216u8, 73u8, 160u8, 232u8, 60u8, 245u8, 218u8, 219u8, 152u8, 68u8,
                            146u8, 219u8, 255u8, 7u8, 86u8, 112u8, 83u8, 49u8, 94u8, 173u8, 64u8,
                            203u8, 147u8, 226u8, 236u8, 39u8, 129u8, 106u8, 209u8, 113u8, 150u8,
                            50u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queries::Queries,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "Queries",
                        (),
                        [
                            134u8, 206u8, 252u8, 211u8, 156u8, 173u8, 214u8, 205u8, 17u8, 177u8,
                            139u8, 121u8, 43u8, 29u8, 30u8, 233u8, 210u8, 222u8, 172u8, 171u8,
                            13u8, 223u8, 153u8, 88u8, 43u8, 44u8, 183u8, 253u8, 252u8, 251u8,
                            184u8, 249u8,
                        ],
                    )
                }
                #[doc = " The ongoing queries."]
                pub fn queries(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::queries::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::queries::Param0,
                    >,
                    types::queries::Queries,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "Queries",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            134u8, 206u8, 252u8, 211u8, 156u8, 173u8, 214u8, 205u8, 17u8, 177u8,
                            139u8, 121u8, 43u8, 29u8, 30u8, 233u8, 210u8, 222u8, 172u8, 171u8,
                            13u8, 223u8, 153u8, 88u8, 43u8, 44u8, 183u8, 253u8, 252u8, 251u8,
                            184u8, 249u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::asset_traps::AssetTraps,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        (),
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " The existing asset traps."]
                #[doc = ""]
                #[doc = " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of"]
                #[doc = " times this pair has been trapped (usually just 1 if it exists at all)."]
                pub fn asset_traps(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::asset_traps::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::asset_traps::Param0,
                    >,
                    types::asset_traps::AssetTraps,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "AssetTraps",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            148u8, 41u8, 254u8, 134u8, 61u8, 172u8, 126u8, 146u8, 78u8, 178u8,
                            50u8, 77u8, 226u8, 8u8, 200u8, 78u8, 77u8, 91u8, 26u8, 133u8, 104u8,
                            126u8, 28u8, 28u8, 202u8, 62u8, 87u8, 183u8, 231u8, 191u8, 5u8, 181u8,
                        ],
                    )
                }
                #[doc = " Default version to encode XCM when latest version of destination is unknown. If `None`,"]
                #[doc = " then the destinations whose XCM version is unknown are considered unreachable."]
                pub fn safe_xcm_version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::safe_xcm_version::SafeXcmVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "SafeXcmVersion",
                        (),
                        [
                            187u8, 8u8, 74u8, 126u8, 80u8, 215u8, 177u8, 60u8, 223u8, 123u8, 196u8,
                            155u8, 166u8, 66u8, 25u8, 164u8, 191u8, 66u8, 116u8, 131u8, 116u8,
                            188u8, 224u8, 122u8, 75u8, 195u8, 246u8, 188u8, 83u8, 134u8, 49u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::supported_version::SupportedVersion,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        (),
                        [
                            156u8, 153u8, 195u8, 67u8, 72u8, 227u8, 183u8, 107u8, 71u8, 221u8,
                            125u8, 172u8, 34u8, 22u8, 56u8, 182u8, 219u8, 223u8, 183u8, 137u8,
                            243u8, 231u8, 153u8, 254u8, 144u8, 104u8, 48u8, 189u8, 232u8, 104u8,
                            180u8, 65u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::supported_version::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::supported_version::Param0,
                    >,
                    types::supported_version::SupportedVersion,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            156u8, 153u8, 195u8, 67u8, 72u8, 227u8, 183u8, 107u8, 71u8, 221u8,
                            125u8, 172u8, 34u8, 22u8, 56u8, 182u8, 219u8, 223u8, 183u8, 137u8,
                            243u8, 231u8, 153u8, 254u8, 144u8, 104u8, 48u8, 189u8, 232u8, 104u8,
                            180u8, 65u8,
                        ],
                    )
                }
                #[doc = " The Latest versions that we know various locations support."]
                pub fn supported_version(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::supported_version::Param0>,
                    _1: impl ::core::borrow::Borrow<types::supported_version::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::supported_version::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::supported_version::Param1,
                        >,
                    ),
                    types::supported_version::SupportedVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "SupportedVersion",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            156u8, 153u8, 195u8, 67u8, 72u8, 227u8, 183u8, 107u8, 71u8, 221u8,
                            125u8, 172u8, 34u8, 22u8, 56u8, 182u8, 219u8, 223u8, 183u8, 137u8,
                            243u8, 231u8, 153u8, 254u8, 144u8, 104u8, 48u8, 189u8, 232u8, 104u8,
                            180u8, 65u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::version_notifiers::VersionNotifiers,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        (),
                        [
                            216u8, 78u8, 44u8, 71u8, 246u8, 59u8, 163u8, 153u8, 68u8, 31u8, 197u8,
                            114u8, 33u8, 203u8, 20u8, 60u8, 61u8, 177u8, 94u8, 13u8, 213u8, 203u8,
                            150u8, 145u8, 134u8, 249u8, 53u8, 21u8, 122u8, 208u8, 66u8, 67u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::version_notifiers::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::version_notifiers::Param0,
                    >,
                    types::version_notifiers::VersionNotifiers,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            216u8, 78u8, 44u8, 71u8, 246u8, 59u8, 163u8, 153u8, 68u8, 31u8, 197u8,
                            114u8, 33u8, 203u8, 20u8, 60u8, 61u8, 177u8, 94u8, 13u8, 213u8, 203u8,
                            150u8, 145u8, 134u8, 249u8, 53u8, 21u8, 122u8, 208u8, 66u8, 67u8,
                        ],
                    )
                }
                #[doc = " All locations that we have requested version notifications from."]
                pub fn version_notifiers(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::version_notifiers::Param0>,
                    _1: impl ::core::borrow::Borrow<types::version_notifiers::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::version_notifiers::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::version_notifiers::Param1,
                        >,
                    ),
                    types::version_notifiers::VersionNotifiers,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifiers",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            216u8, 78u8, 44u8, 71u8, 246u8, 59u8, 163u8, 153u8, 68u8, 31u8, 197u8,
                            114u8, 33u8, 203u8, 20u8, 60u8, 61u8, 177u8, 94u8, 13u8, 213u8, 203u8,
                            150u8, 145u8, 134u8, 249u8, 53u8, 21u8, 122u8, 208u8, 66u8, 67u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::version_notify_targets::VersionNotifyTargets,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        (),
                        [
                            166u8, 29u8, 245u8, 121u8, 177u8, 119u8, 188u8, 0u8, 32u8, 188u8, 9u8,
                            180u8, 60u8, 28u8, 161u8, 5u8, 189u8, 78u8, 238u8, 14u8, 148u8, 5u8,
                            151u8, 153u8, 62u8, 163u8, 144u8, 82u8, 91u8, 227u8, 210u8, 205u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::version_notify_targets::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::version_notify_targets::Param0,
                    >,
                    types::version_notify_targets::VersionNotifyTargets,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            166u8, 29u8, 245u8, 121u8, 177u8, 119u8, 188u8, 0u8, 32u8, 188u8, 9u8,
                            180u8, 60u8, 28u8, 161u8, 5u8, 189u8, 78u8, 238u8, 14u8, 148u8, 5u8,
                            151u8, 153u8, 62u8, 163u8, 144u8, 82u8, 91u8, 227u8, 210u8, 205u8,
                        ],
                    )
                }
                #[doc = " The target locations that are subscribed to our version changes, as well as the most recent"]
                #[doc = " of our versions we informed them of."]
                pub fn version_notify_targets(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::version_notify_targets::Param0>,
                    _1: impl ::core::borrow::Borrow<types::version_notify_targets::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::version_notify_targets::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::version_notify_targets::Param1,
                        >,
                    ),
                    types::version_notify_targets::VersionNotifyTargets,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionNotifyTargets",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            166u8, 29u8, 245u8, 121u8, 177u8, 119u8, 188u8, 0u8, 32u8, 188u8, 9u8,
                            180u8, 60u8, 28u8, 161u8, 5u8, 189u8, 78u8, 238u8, 14u8, 148u8, 5u8,
                            151u8, 153u8, 62u8, 163u8, 144u8, 82u8, 91u8, 227u8, 210u8, 205u8,
                        ],
                    )
                }
                #[doc = " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and"]
                #[doc = " the `u32` counter is the number of times that a send to the destination has been attempted,"]
                #[doc = " which is used as a prioritization."]
                pub fn version_discovery_queue(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::version_discovery_queue::VersionDiscoveryQueue,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "VersionDiscoveryQueue",
                        (),
                        [
                            206u8, 152u8, 58u8, 105u8, 70u8, 142u8, 210u8, 246u8, 107u8, 8u8,
                            190u8, 195u8, 255u8, 27u8, 199u8, 241u8, 221u8, 238u8, 61u8, 92u8,
                            245u8, 162u8, 151u8, 234u8, 151u8, 6u8, 216u8, 115u8, 214u8, 138u8,
                            8u8, 27u8,
                        ],
                    )
                }
                #[doc = " The current migration's stage, if any."]
                pub fn current_migration(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_migration::CurrentMigration,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "CurrentMigration",
                        (),
                        [
                            74u8, 138u8, 181u8, 162u8, 59u8, 251u8, 37u8, 28u8, 232u8, 51u8, 30u8,
                            152u8, 252u8, 133u8, 95u8, 195u8, 47u8, 127u8, 21u8, 44u8, 62u8, 143u8,
                            170u8, 234u8, 160u8, 37u8, 131u8, 179u8, 57u8, 241u8, 140u8, 124u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        (),
                        [
                            72u8, 122u8, 83u8, 172u8, 130u8, 41u8, 40u8, 43u8, 59u8, 147u8, 10u8,
                            28u8, 187u8, 208u8, 38u8, 48u8, 213u8, 149u8, 23u8, 109u8, 250u8,
                            200u8, 165u8, 54u8, 200u8, 175u8, 217u8, 104u8, 233u8, 194u8, 66u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::remote_locked_fungibles::Param0,
                    >,
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            72u8, 122u8, 83u8, 172u8, 130u8, 41u8, 40u8, 43u8, 59u8, 147u8, 10u8,
                            28u8, 187u8, 208u8, 38u8, 48u8, 213u8, 149u8, 23u8, 109u8, 250u8,
                            200u8, 165u8, 54u8, 200u8, 175u8, 217u8, 104u8, 233u8, 194u8, 66u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles_iter2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                    _1: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::remote_locked_fungibles::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::remote_locked_fungibles::Param1,
                        >,
                    ),
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            72u8, 122u8, 83u8, 172u8, 130u8, 41u8, 40u8, 43u8, 59u8, 147u8, 10u8,
                            28u8, 187u8, 208u8, 38u8, 48u8, 213u8, 149u8, 23u8, 109u8, 250u8,
                            200u8, 165u8, 54u8, 200u8, 175u8, 217u8, 104u8, 233u8, 194u8, 66u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on a remote chain."]
                pub fn remote_locked_fungibles(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param0>,
                    _1: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param1>,
                    _2: impl ::core::borrow::Borrow<types::remote_locked_fungibles::Param2>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::remote_locked_fungibles::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::remote_locked_fungibles::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::remote_locked_fungibles::Param2,
                        >,
                    ),
                    types::remote_locked_fungibles::RemoteLockedFungibles,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "RemoteLockedFungibles",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                        ),
                        [
                            72u8, 122u8, 83u8, 172u8, 130u8, 41u8, 40u8, 43u8, 59u8, 147u8, 10u8,
                            28u8, 187u8, 208u8, 38u8, 48u8, 213u8, 149u8, 23u8, 109u8, 250u8,
                            200u8, 165u8, 54u8, 200u8, 175u8, 217u8, 104u8, 233u8, 194u8, 66u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::locked_fungibles::LockedFungibles,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        (),
                        [
                            215u8, 145u8, 77u8, 89u8, 51u8, 194u8, 61u8, 165u8, 33u8, 205u8, 183u8,
                            149u8, 33u8, 55u8, 67u8, 186u8, 124u8, 96u8, 86u8, 176u8, 253u8, 158u8,
                            93u8, 133u8, 100u8, 115u8, 29u8, 21u8, 254u8, 163u8, 95u8, 76u8,
                        ],
                    )
                }
                #[doc = " Fungible assets which we know are locked on this chain."]
                pub fn locked_fungibles(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::locked_fungibles::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::locked_fungibles::Param0,
                    >,
                    types::locked_fungibles::LockedFungibles,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "LockedFungibles",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            215u8, 145u8, 77u8, 89u8, 51u8, 194u8, 61u8, 165u8, 33u8, 205u8, 183u8,
                            149u8, 33u8, 55u8, 67u8, 186u8, 124u8, 96u8, 86u8, 176u8, 253u8, 158u8,
                            93u8, 133u8, 100u8, 115u8, 29u8, 21u8, 254u8, 163u8, 95u8, 76u8,
                        ],
                    )
                }
                #[doc = " Global suspension state of the XCM executor."]
                pub fn xcm_execution_suspended(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::xcm_execution_suspended::XcmExecutionSuspended,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "XcmExecutionSuspended",
                        (),
                        [
                            182u8, 54u8, 69u8, 68u8, 78u8, 76u8, 103u8, 79u8, 47u8, 136u8, 99u8,
                            104u8, 128u8, 129u8, 249u8, 54u8, 214u8, 136u8, 97u8, 48u8, 178u8,
                            42u8, 26u8, 27u8, 82u8, 24u8, 33u8, 77u8, 33u8, 27u8, 20u8, 127u8,
                        ],
                    )
                }
                #[doc = " Whether or not incoming XCMs (both executed locally and received) should be recorded."]
                #[doc = " Only one XCM program will be recorded at a time."]
                #[doc = " This is meant to be used in runtime APIs, and it's advised it stays false"]
                #[doc = " for all other use cases, so as to not degrade regular performance."]
                #[doc = ""]
                #[doc = " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]"]
                #[doc = " implementation in the XCM executor configuration."]
                pub fn should_record_xcm(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::should_record_xcm::ShouldRecordXcm,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "ShouldRecordXcm",
                        (),
                        [
                            77u8, 184u8, 154u8, 92u8, 185u8, 225u8, 131u8, 210u8, 55u8, 115u8, 3u8,
                            182u8, 191u8, 132u8, 51u8, 136u8, 42u8, 136u8, 54u8, 36u8, 229u8,
                            229u8, 47u8, 88u8, 4u8, 175u8, 136u8, 78u8, 226u8, 253u8, 13u8, 178u8,
                        ],
                    )
                }
                #[doc = " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally"]
                #[doc = " will be stored here."]
                #[doc = " Runtime APIs can fetch the XCM that was executed by accessing this value."]
                #[doc = ""]
                #[doc = " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]"]
                #[doc = " implementation in the XCM executor configuration."]
                pub fn recorded_xcm(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::recorded_xcm::RecordedXcm,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "PolkadotXcm",
                        "RecordedXcm",
                        (),
                        [
                            33u8, 7u8, 241u8, 181u8, 31u8, 21u8, 115u8, 161u8, 173u8, 168u8, 182u8,
                            184u8, 243u8, 182u8, 151u8, 121u8, 55u8, 104u8, 130u8, 83u8, 5u8,
                            108u8, 227u8, 30u8, 93u8, 168u8, 64u8, 134u8, 12u8, 39u8, 26u8, 77u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod cumulus_xcm {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::cumulus_pallet_xcm::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
            }
            pub struct TransactionApi;
            impl TransactionApi {}
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::cumulus_pallet_xcm::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Downward message is invalid XCM."]
            #[doc = "\\[ id \\]"]
            pub struct InvalidFormat(pub invalid_format::Field0);
            pub mod invalid_format {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InvalidFormat {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "InvalidFormat";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Downward message is unsupported version of XCM."]
            #[doc = "\\[ id \\]"]
            pub struct UnsupportedVersion(pub unsupported_version::Field0);
            pub mod unsupported_version {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UnsupportedVersion {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "UnsupportedVersion";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Downward message executed with the given outcome."]
            #[doc = "\\[ id, outcome \\]"]
            pub struct ExecutedDownward(
                pub executed_downward::Field0,
                pub executed_downward::Field1,
            );
            pub mod executed_downward {
                use super::runtime_types;
                pub type Field0 = [::core::primitive::u8; 32usize];
                pub type Field1 = runtime_types::staging_xcm::v5::traits::Outcome;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExecutedDownward {
                const PALLET: &'static str = "CumulusXcm";
                const EVENT: &'static str = "ExecutedDownward";
            }
        }
    }
    pub mod message_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_message_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_message_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a page which has no more messages remaining to be processed or is stale."]
                pub struct ReapPage {
                    pub message_origin: reap_page::MessageOrigin,
                    pub page_index: reap_page::PageIndex,
                }
                pub mod reap_page {
                    use super::runtime_types;
                    pub type MessageOrigin =
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                    pub type PageIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReapPage {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "reap_page";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute an overweight message."]
                #[doc = ""]
                #[doc = "Temporary processing errors will be propagated whereas permanent errors are treated"]
                #[doc = "as success condition."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `Signed`."]
                #[doc = "- `message_origin`: The origin from which the message to be executed arrived."]
                #[doc = "- `page`: The page in the queue in which the message to be executed is sitting."]
                #[doc = "- `index`: The index into the queue of the message to be executed."]
                #[doc = "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution"]
                #[doc = "  of the message."]
                #[doc = ""]
                #[doc = "Benchmark complexity considerations: O(index + weight_limit)."]
                pub struct ExecuteOverweight {
                    pub message_origin: execute_overweight::MessageOrigin,
                    pub page: execute_overweight::Page,
                    pub index: execute_overweight::Index,
                    pub weight_limit: execute_overweight::WeightLimit,
                }
                pub mod execute_overweight {
                    use super::runtime_types;
                    pub type MessageOrigin =
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                    pub type Page = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u32;
                    pub type WeightLimit = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteOverweight {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "execute_overweight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Remove a page which has no more messages remaining to be processed or is stale."]
                pub fn reap_page(
                    &self,
                    message_origin: types::reap_page::MessageOrigin,
                    page_index: types::reap_page::PageIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ReapPage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MessageQueue",
                        "reap_page",
                        types::ReapPage {
                            message_origin,
                            page_index,
                        },
                        [
                            116u8, 17u8, 120u8, 238u8, 117u8, 222u8, 10u8, 166u8, 132u8, 181u8,
                            114u8, 150u8, 242u8, 202u8, 31u8, 143u8, 212u8, 65u8, 145u8, 249u8,
                            27u8, 204u8, 137u8, 133u8, 220u8, 187u8, 137u8, 90u8, 112u8, 55u8,
                            104u8, 163u8,
                        ],
                    )
                }
                #[doc = "Execute an overweight message."]
                #[doc = ""]
                #[doc = "Temporary processing errors will be propagated whereas permanent errors are treated"]
                #[doc = "as success condition."]
                #[doc = ""]
                #[doc = "- `origin`: Must be `Signed`."]
                #[doc = "- `message_origin`: The origin from which the message to be executed arrived."]
                #[doc = "- `page`: The page in the queue in which the message to be executed is sitting."]
                #[doc = "- `index`: The index into the queue of the message to be executed."]
                #[doc = "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution"]
                #[doc = "  of the message."]
                #[doc = ""]
                #[doc = "Benchmark complexity considerations: O(index + weight_limit)."]
                pub fn execute_overweight(
                    &self,
                    message_origin: types::execute_overweight::MessageOrigin,
                    page: types::execute_overweight::Page,
                    index: types::execute_overweight::Index,
                    weight_limit: types::execute_overweight::WeightLimit,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ExecuteOverweight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MessageQueue",
                        "execute_overweight",
                        types::ExecuteOverweight {
                            message_origin,
                            page,
                            index,
                            weight_limit,
                        },
                        [
                            177u8, 54u8, 82u8, 58u8, 94u8, 125u8, 241u8, 172u8, 52u8, 7u8, 236u8,
                            80u8, 66u8, 99u8, 42u8, 199u8, 38u8, 195u8, 65u8, 118u8, 166u8, 246u8,
                            239u8, 195u8, 144u8, 153u8, 155u8, 8u8, 224u8, 56u8, 106u8, 135u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_message_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
            pub struct ProcessingFailed {
                pub id: processing_failed::Id,
                pub origin: processing_failed::Origin,
                pub error: processing_failed::Error,
            }
            pub mod processing_failed {
                use super::runtime_types;
                pub type Id = ::subxt::ext::subxt_core::utils::H256;
                pub type Origin = runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                pub type Error =
                    runtime_types::frame_support::traits::messages::ProcessMessageError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProcessingFailed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "ProcessingFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Message is processed."]
            pub struct Processed {
                pub id: processed::Id,
                pub origin: processed::Origin,
                pub weight_used: processed::WeightUsed,
                pub success: processed::Success,
            }
            pub mod processed {
                use super::runtime_types;
                pub type Id = ::subxt::ext::subxt_core::utils::H256;
                pub type Origin = runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                pub type WeightUsed = runtime_types::sp_weights::weight_v2::Weight;
                pub type Success = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Processed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "Processed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Message placed in overweight queue."]
            pub struct OverweightEnqueued {
                pub id: overweight_enqueued::Id,
                pub origin: overweight_enqueued::Origin,
                pub page_index: overweight_enqueued::PageIndex,
                pub message_index: overweight_enqueued::MessageIndex,
            }
            pub mod overweight_enqueued {
                use super::runtime_types;
                pub type Id = [::core::primitive::u8; 32usize];
                pub type Origin = runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                pub type PageIndex = ::core::primitive::u32;
                pub type MessageIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "This page was reaped."]
            pub struct PageReaped {
                pub origin: page_reaped::Origin,
                pub index: page_reaped::Index,
            }
            pub mod page_reaped {
                use super::runtime_types;
                pub type Origin = runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PageReaped {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "PageReaped";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod book_state_for {
                    use super::runtime_types;
                    pub type BookStateFor = runtime_types::pallet_message_queue::BookState<
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                    >;
                    pub type Param0 =
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                }
                pub mod service_head {
                    use super::runtime_types;
                    pub type ServiceHead =
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                }
                pub mod pages {
                    use super::runtime_types;
                    pub type Pages =
                        runtime_types::pallet_message_queue::Page<::core::primitive::u32>;
                    pub type Param0 =
                        runtime_types::cumulus_primitives_core::AggregateMessageOrigin;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::book_state_for::BookStateFor,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        (),
                        [
                            33u8, 240u8, 235u8, 59u8, 150u8, 42u8, 91u8, 248u8, 235u8, 52u8, 170u8,
                            52u8, 195u8, 129u8, 6u8, 174u8, 57u8, 242u8, 30u8, 220u8, 232u8, 4u8,
                            246u8, 218u8, 162u8, 174u8, 102u8, 95u8, 210u8, 92u8, 133u8, 143u8,
                        ],
                    )
                }
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::book_state_for::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::book_state_for::Param0,
                    >,
                    types::book_state_for::BookStateFor,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            33u8, 240u8, 235u8, 59u8, 150u8, 42u8, 91u8, 248u8, 235u8, 52u8, 170u8,
                            52u8, 195u8, 129u8, 6u8, 174u8, 57u8, 242u8, 30u8, 220u8, 232u8, 4u8,
                            246u8, 218u8, 162u8, 174u8, 102u8, 95u8, 210u8, 92u8, 133u8, 143u8,
                        ],
                    )
                }
                #[doc = " The origin at which we should begin servicing."]
                pub fn service_head(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::service_head::ServiceHead,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "ServiceHead",
                        (),
                        [
                            104u8, 146u8, 240u8, 41u8, 171u8, 68u8, 20u8, 147u8, 212u8, 155u8,
                            59u8, 39u8, 174u8, 186u8, 97u8, 250u8, 41u8, 247u8, 67u8, 190u8, 252u8,
                            167u8, 234u8, 36u8, 124u8, 239u8, 163u8, 72u8, 223u8, 82u8, 82u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pages::Pages,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "Pages",
                        (),
                        [
                            45u8, 202u8, 18u8, 128u8, 31u8, 194u8, 175u8, 173u8, 99u8, 81u8, 161u8,
                            44u8, 32u8, 183u8, 238u8, 181u8, 110u8, 240u8, 203u8, 12u8, 152u8,
                            58u8, 239u8, 190u8, 144u8, 168u8, 210u8, 33u8, 121u8, 250u8, 137u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pages::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::pages::Param0,
                    >,
                    types::pages::Pages,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "Pages",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            45u8, 202u8, 18u8, 128u8, 31u8, 194u8, 175u8, 173u8, 99u8, 81u8, 161u8,
                            44u8, 32u8, 183u8, 238u8, 181u8, 110u8, 240u8, 203u8, 12u8, 152u8,
                            58u8, 239u8, 190u8, 144u8, 168u8, 210u8, 33u8, 121u8, 250u8, 137u8,
                            142u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pages::Param0>,
                    _1: impl ::core::borrow::Borrow<types::pages::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pages::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pages::Param1,
                        >,
                    ),
                    types::pages::Pages,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MessageQueue",
                        "Pages",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            45u8, 202u8, 18u8, 128u8, 31u8, 194u8, 175u8, 173u8, 99u8, 81u8, 161u8,
                            44u8, 32u8, 183u8, 238u8, 181u8, 110u8, 240u8, 203u8, 12u8, 152u8,
                            58u8, 239u8, 190u8, 144u8, 168u8, 210u8, 33u8, 121u8, 250u8, 137u8,
                            142u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The size of the page; this implies the maximum message size which can be sent."]
                #[doc = ""]
                #[doc = " A good value depends on the expected message sizes, their weights, the weight that is"]
                #[doc = " available for processing them and the maximal needed message size. The maximal message"]
                #[doc = " size is slightly lower than this as defined by [`MaxMessageLenOf`]."]
                pub fn heap_size(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "MessageQueue",
                        "HeapSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of stale pages (i.e. of overweight messages) allowed before culling"]
                #[doc = " can happen. Once there are more stale pages than this, then historical pages may be"]
                #[doc = " dropped, even if they contain unprocessed overweight messages."]
                pub fn max_stale(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "MessageQueue",
                        "MaxStale",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount of weight (if any) which should be provided to the message queue for"]
                #[doc = " servicing enqueued items `on_initialize`."]
                #[doc = ""]
                #[doc = " This may be legitimately `None` in the case that you will call"]
                #[doc = " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have"]
                #[doc = " it run in `on_idle`."]
                pub fn service_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "MessageQueue",
                        "ServiceWeight",
                        [
                            204u8, 140u8, 63u8, 167u8, 49u8, 8u8, 148u8, 163u8, 190u8, 224u8, 15u8,
                            103u8, 86u8, 153u8, 248u8, 117u8, 223u8, 117u8, 210u8, 80u8, 205u8,
                            155u8, 40u8, 11u8, 59u8, 63u8, 129u8, 156u8, 17u8, 83u8, 177u8, 250u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which"]
                #[doc = " should be provided to the message queue for servicing enqueued items `on_idle`."]
                #[doc = " Useful for parachains to process messages at the same block they are received."]
                #[doc = ""]
                #[doc = " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."]
                pub fn idle_max_service_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "MessageQueue",
                        "IdleMaxServiceWeight",
                        [
                            204u8, 140u8, 63u8, 167u8, 49u8, 8u8, 148u8, 163u8, 190u8, 224u8, 15u8,
                            103u8, 86u8, 153u8, 248u8, 117u8, 223u8, 117u8, 210u8, 80u8, 205u8,
                            155u8, 40u8, 11u8, 59u8, 63u8, 129u8, 156u8, 17u8, 83u8, 177u8, 250u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_proxy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_proxy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub struct Proxy {
                    pub real: proxy::Real,
                    pub force_proxy_type: proxy::ForceProxyType,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy::Call>,
                }
                pub mod proxy {
                    use super::runtime_types;
                    pub type Real = runtime_types::account::AccountId20;
                    pub type ForceProxyType =
                        ::core::option::Option<runtime_types::mainnet_runtime::ProxyType>;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Proxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                pub struct AddProxy {
                    pub delegate: add_proxy::Delegate,
                    pub proxy_type: add_proxy::ProxyType,
                    pub delay: add_proxy::Delay,
                }
                pub mod add_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                    pub type Delay = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "add_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                pub struct RemoveProxy {
                    pub delegate: remove_proxy::Delegate,
                    pub proxy_type: remove_proxy::ProxyType,
                    pub delay: remove_proxy::Delay,
                }
                pub mod remove_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                    pub type Delay = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                pub struct RemoveProxies;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxies {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxies";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                pub struct CreatePure {
                    pub proxy_type: create_pure::ProxyType,
                    pub delay: create_pure::Delay,
                    pub index: create_pure::Index,
                }
                pub mod create_pure {
                    use super::runtime_types;
                    pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                    pub type Delay = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u16;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreatePure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "create_pure";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes a previously spawned pure proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`pure` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                #[doc = "account whose `pure` call has corresponding parameters."]
                pub struct KillPure {
                    pub spawner: kill_pure::Spawner,
                    pub proxy_type: kill_pure::ProxyType,
                    pub index: kill_pure::Index,
                    #[codec(compact)]
                    pub height: kill_pure::Height,
                    #[codec(compact)]
                    pub ext_index: kill_pure::ExtIndex,
                }
                pub mod kill_pure {
                    use super::runtime_types;
                    pub type Spawner = runtime_types::account::AccountId20;
                    pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                    pub type Index = ::core::primitive::u16;
                    pub type Height = ::core::primitive::u32;
                    pub type ExtIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "kill_pure";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub struct Announce {
                    pub real: announce::Real,
                    pub call_hash: announce::CallHash,
                }
                pub mod announce {
                    use super::runtime_types;
                    pub type Real = runtime_types::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Announce {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "announce";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub struct RemoveAnnouncement {
                    pub real: remove_announcement::Real,
                    pub call_hash: remove_announcement::CallHash,
                }
                pub mod remove_announcement {
                    use super::runtime_types;
                    pub type Real = runtime_types::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_announcement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                pub struct RejectAnnouncement {
                    pub delegate: reject_announcement::Delegate,
                    pub call_hash: reject_announcement::CallHash,
                }
                pub mod reject_announcement {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejectAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "reject_announcement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub struct ProxyAnnounced {
                    pub delegate: proxy_announced::Delegate,
                    pub real: proxy_announced::Real,
                    pub force_proxy_type: proxy_announced::ForceProxyType,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy_announced::Call>,
                }
                pub mod proxy_announced {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type Real = runtime_types::account::AccountId20;
                    pub type ForceProxyType =
                        ::core::option::Option<runtime_types::mainnet_runtime::ProxyType>;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProxyAnnounced {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy_announced";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy(
                    &self,
                    real: types::proxy::Real,
                    force_proxy_type: types::proxy::ForceProxyType,
                    call: types::proxy::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Proxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "proxy",
                        types::Proxy {
                            real,
                            force_proxy_type,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            168u8, 75u8, 196u8, 247u8, 3u8, 241u8, 179u8, 179u8, 19u8, 190u8,
                            109u8, 151u8, 106u8, 107u8, 20u8, 139u8, 116u8, 123u8, 69u8, 175u8,
                            107u8, 78u8, 38u8, 228u8, 104u8, 83u8, 164u8, 56u8, 204u8, 250u8,
                            173u8, 47u8,
                        ],
                    )
                }
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                pub fn add_proxy(
                    &self,
                    delegate: types::add_proxy::Delegate,
                    proxy_type: types::add_proxy::ProxyType,
                    delay: types::add_proxy::Delay,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "add_proxy",
                        types::AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            56u8, 37u8, 184u8, 228u8, 152u8, 216u8, 202u8, 201u8, 114u8, 232u8,
                            47u8, 195u8, 212u8, 61u8, 81u8, 61u8, 64u8, 105u8, 33u8, 77u8, 180u8,
                            86u8, 132u8, 95u8, 16u8, 124u8, 136u8, 85u8, 48u8, 253u8, 253u8, 161u8,
                        ],
                    )
                }
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                pub fn remove_proxy(
                    &self,
                    delegate: types::remove_proxy::Delegate,
                    proxy_type: types::remove_proxy::ProxyType,
                    delay: types::remove_proxy::Delay,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_proxy",
                        types::RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            64u8, 59u8, 39u8, 98u8, 246u8, 102u8, 139u8, 187u8, 182u8, 248u8, 66u8,
                            4u8, 48u8, 224u8, 36u8, 102u8, 195u8, 45u8, 191u8, 242u8, 2u8, 61u8,
                            24u8, 135u8, 196u8, 189u8, 77u8, 244u8, 138u8, 171u8, 40u8, 68u8,
                        ],
                    )
                }
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                pub fn remove_proxies(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxies>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_proxies",
                        types::RemoveProxies {},
                        [
                            1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
                            185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
                            195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
                            6u8,
                        ],
                    )
                }
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                pub fn create_pure(
                    &self,
                    proxy_type: types::create_pure::ProxyType,
                    delay: types::create_pure::Delay,
                    index: types::create_pure::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreatePure>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "create_pure",
                        types::CreatePure {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            19u8, 88u8, 189u8, 255u8, 102u8, 59u8, 99u8, 243u8, 107u8, 116u8,
                            119u8, 73u8, 130u8, 88u8, 6u8, 235u8, 131u8, 19u8, 17u8, 177u8, 86u8,
                            145u8, 239u8, 212u8, 142u8, 72u8, 84u8, 213u8, 18u8, 77u8, 66u8, 2u8,
                        ],
                    )
                }
                #[doc = "Removes a previously spawned pure proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`pure` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                #[doc = "account whose `pure` call has corresponding parameters."]
                pub fn kill_pure(
                    &self,
                    spawner: types::kill_pure::Spawner,
                    proxy_type: types::kill_pure::ProxyType,
                    index: types::kill_pure::Index,
                    height: types::kill_pure::Height,
                    ext_index: types::kill_pure::ExtIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPure>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "kill_pure",
                        types::KillPure {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            22u8, 121u8, 12u8, 109u8, 184u8, 193u8, 145u8, 242u8, 107u8, 245u8,
                            158u8, 67u8, 236u8, 79u8, 104u8, 243u8, 189u8, 117u8, 129u8, 71u8,
                            254u8, 123u8, 234u8, 224u8, 24u8, 100u8, 117u8, 104u8, 18u8, 35u8,
                            128u8, 221u8,
                        ],
                    )
                }
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn announce(
                    &self,
                    real: types::announce::Real,
                    call_hash: types::announce::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Announce>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "announce",
                        types::Announce { real, call_hash },
                        [
                            73u8, 72u8, 93u8, 59u8, 122u8, 139u8, 93u8, 78u8, 107u8, 54u8, 114u8,
                            238u8, 16u8, 191u8, 252u8, 94u8, 29u8, 152u8, 198u8, 129u8, 43u8,
                            221u8, 145u8, 167u8, 203u8, 48u8, 151u8, 249u8, 88u8, 51u8, 40u8, 61u8,
                        ],
                    )
                }
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn remove_announcement(
                    &self,
                    real: types::remove_announcement::Real,
                    call_hash: types::remove_announcement::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveAnnouncement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_announcement",
                        types::RemoveAnnouncement { real, call_hash },
                        [
                            86u8, 6u8, 95u8, 195u8, 132u8, 136u8, 60u8, 248u8, 18u8, 27u8, 134u8,
                            14u8, 100u8, 143u8, 16u8, 81u8, 143u8, 95u8, 133u8, 84u8, 228u8, 31u8,
                            34u8, 195u8, 54u8, 209u8, 228u8, 120u8, 240u8, 195u8, 113u8, 29u8,
                        ],
                    )
                }
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                pub fn reject_announcement(
                    &self,
                    delegate: types::reject_announcement::Delegate,
                    call_hash: types::reject_announcement::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RejectAnnouncement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "reject_announcement",
                        types::RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            147u8, 84u8, 126u8, 36u8, 113u8, 100u8, 227u8, 241u8, 2u8, 107u8,
                            197u8, 139u8, 1u8, 132u8, 4u8, 243u8, 180u8, 198u8, 72u8, 112u8, 20u8,
                            175u8, 240u8, 109u8, 186u8, 65u8, 39u8, 91u8, 238u8, 59u8, 199u8,
                            197u8,
                        ],
                    )
                }
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy_announced(
                    &self,
                    delegate: types::proxy_announced::Delegate,
                    real: types::proxy_announced::Real,
                    force_proxy_type: types::proxy_announced::ForceProxyType,
                    call: types::proxy_announced::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProxyAnnounced>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "proxy_announced",
                        types::ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            133u8, 186u8, 95u8, 32u8, 196u8, 233u8, 127u8, 197u8, 94u8, 157u8,
                            129u8, 118u8, 172u8, 77u8, 23u8, 210u8, 187u8, 196u8, 14u8, 232u8,
                            33u8, 42u8, 235u8, 149u8, 35u8, 152u8, 157u8, 9u8, 172u8, 60u8, 84u8,
                            122u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: proxy_executed::Result,
            }
            pub mod proxy_executed {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A pure account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct PureCreated {
                pub pure: pure_created::Pure,
                pub who: pure_created::Who,
                pub proxy_type: pure_created::ProxyType,
                pub disambiguation_index: pure_created::DisambiguationIndex,
            }
            pub mod pure_created {
                use super::runtime_types;
                pub type Pure = runtime_types::account::AccountId20;
                pub type Who = runtime_types::account::AccountId20;
                pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                pub type DisambiguationIndex = ::core::primitive::u16;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PureCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "PureCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: announced::Real,
                pub proxy: announced::Proxy,
                pub call_hash: announced::CallHash,
            }
            pub mod announced {
                use super::runtime_types;
                pub type Real = runtime_types::account::AccountId20;
                pub type Proxy = runtime_types::account::AccountId20;
                pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: proxy_added::Delegator,
                pub delegatee: proxy_added::Delegatee,
                pub proxy_type: proxy_added::ProxyType,
                pub delay: proxy_added::Delay,
            }
            pub mod proxy_added {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Delegatee = runtime_types::account::AccountId20;
                pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                pub type Delay = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: proxy_removed::Delegator,
                pub delegatee: proxy_removed::Delegatee,
                pub proxy_type: proxy_removed::ProxyType,
                pub delay: proxy_removed::Delay,
            }
            pub mod proxy_removed {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Delegatee = runtime_types::account::AccountId20;
                pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                pub type Delay = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proxies {
                    use super::runtime_types;
                    pub type Proxies = (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                runtime_types::account::AccountId20,
                                runtime_types::mainnet_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    );
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod announcements {
                    use super::runtime_types;
                    pub type Announcements = (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                runtime_types::account::AccountId20,
                                ::subxt::ext::subxt_core::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    );
                    pub type Param0 = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proxies::Proxies,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Proxies",
                        (),
                        [
                            56u8, 78u8, 186u8, 12u8, 75u8, 146u8, 230u8, 193u8, 22u8, 102u8, 227u8,
                            172u8, 238u8, 57u8, 144u8, 80u8, 225u8, 60u8, 120u8, 78u8, 226u8,
                            106u8, 149u8, 16u8, 136u8, 27u8, 117u8, 235u8, 52u8, 43u8, 221u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proxies::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proxies::Param0,
                    >,
                    types::proxies::Proxies,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Proxies",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            56u8, 78u8, 186u8, 12u8, 75u8, 146u8, 230u8, 193u8, 22u8, 102u8, 227u8,
                            172u8, 238u8, 57u8, 144u8, 80u8, 225u8, 60u8, 120u8, 78u8, 226u8,
                            106u8, 149u8, 16u8, 136u8, 27u8, 117u8, 235u8, 52u8, 43u8, 221u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::announcements::Announcements,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Announcements",
                        (),
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::announcements::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::announcements::Param0,
                    >,
                    types::announcements::Announcements,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Announcements",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the vesting pallet."]
        pub type Error = runtime_types::pallet_vesting::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_vesting::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unlock any vested funds of the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct Vest;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vest {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unlock any vested funds of a `target` account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct VestOther {
                    pub target: vest_other::Target,
                }
                pub mod vest_other {
                    use super::runtime_types;
                    pub type Target = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VestOther {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest_other";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Create a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account receiving the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct VestedTransfer {
                    pub target: vested_transfer::Target,
                    pub schedule: vested_transfer::Schedule,
                }
                pub mod vested_transfer {
                    use super::runtime_types;
                    pub type Target = runtime_types::account::AccountId20;
                    pub type Schedule = runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The account whose funds should be transferred."]
                #[doc = "- `target`: The account that should be transferred the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct ForceVestedTransfer {
                    pub source: force_vested_transfer::Source,
                    pub target: force_vested_transfer::Target,
                    pub schedule: force_vested_transfer::Schedule,
                }
                pub mod force_vested_transfer {
                    use super::runtime_types;
                    pub type Source = runtime_types::account::AccountId20;
                    pub type Target = runtime_types::account::AccountId20;
                    pub type Schedule = runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceVestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                #[doc = "unmodified."]
                #[doc = ""]
                #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                #[doc = "and both will be removed."]
                #[doc = ""]
                #[doc = "Merged schedule attributes:"]
                #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                #[doc = "  current_block)`."]
                #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                pub struct MergeSchedules {
                    pub schedule1_index: merge_schedules::Schedule1Index,
                    pub schedule2_index: merge_schedules::Schedule2Index,
                }
                pub mod merge_schedules {
                    use super::runtime_types;
                    pub type Schedule1Index = ::core::primitive::u32;
                    pub type Schedule2Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MergeSchedules {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "merge_schedules";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force remove a vesting schedule"]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `target`: An account that has a vesting schedule"]
                #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                pub struct ForceRemoveVestingSchedule {
                    pub target: force_remove_vesting_schedule::Target,
                    pub schedule_index: force_remove_vesting_schedule::ScheduleIndex,
                }
                pub mod force_remove_vesting_schedule {
                    use super::runtime_types;
                    pub type Target = runtime_types::account::AccountId20;
                    pub type ScheduleIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceRemoveVestingSchedule {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_remove_vesting_schedule";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Unlock any vested funds of the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn vest(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vest>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "vest",
                        types::Vest {},
                        [
                            149u8, 89u8, 178u8, 148u8, 127u8, 127u8, 155u8, 60u8, 114u8, 126u8,
                            204u8, 123u8, 166u8, 70u8, 104u8, 208u8, 186u8, 69u8, 139u8, 181u8,
                            151u8, 154u8, 235u8, 161u8, 191u8, 35u8, 111u8, 60u8, 21u8, 165u8,
                            44u8, 122u8,
                        ],
                    )
                }
                #[doc = "Unlock any vested funds of a `target` account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn vest_other(
                    &self,
                    target: types::vest_other::Target,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VestOther>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "vest_other",
                        types::VestOther { target },
                        [
                            126u8, 225u8, 164u8, 54u8, 61u8, 4u8, 214u8, 109u8, 134u8, 125u8,
                            245u8, 80u8, 118u8, 206u8, 147u8, 69u8, 15u8, 169u8, 66u8, 153u8,
                            117u8, 44u8, 182u8, 28u8, 7u8, 63u8, 240u8, 85u8, 45u8, 128u8, 199u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "Create a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account receiving the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn vested_transfer(
                    &self,
                    target: types::vested_transfer::Target,
                    schedule: types::vested_transfer::Schedule,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VestedTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "vested_transfer",
                        types::VestedTransfer { target, schedule },
                        [
                            147u8, 224u8, 243u8, 96u8, 19u8, 145u8, 248u8, 225u8, 61u8, 143u8,
                            147u8, 109u8, 3u8, 205u8, 133u8, 156u8, 208u8, 228u8, 203u8, 139u8,
                            221u8, 162u8, 128u8, 185u8, 26u8, 18u8, 88u8, 80u8, 113u8, 74u8, 222u8,
                            84u8,
                        ],
                    )
                }
                #[doc = "Force a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The account whose funds should be transferred."]
                #[doc = "- `target`: The account that should be transferred the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn force_vested_transfer(
                    &self,
                    source: types::force_vested_transfer::Source,
                    target: types::force_vested_transfer::Target,
                    schedule: types::force_vested_transfer::Schedule,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceVestedTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "force_vested_transfer",
                        types::ForceVestedTransfer {
                            source,
                            target,
                            schedule,
                        },
                        [
                            48u8, 206u8, 26u8, 56u8, 227u8, 151u8, 95u8, 128u8, 188u8, 5u8, 15u8,
                            36u8, 2u8, 228u8, 25u8, 166u8, 151u8, 55u8, 171u8, 37u8, 89u8, 104u8,
                            114u8, 101u8, 158u8, 47u8, 159u8, 42u8, 248u8, 209u8, 243u8, 5u8,
                        ],
                    )
                }
                #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                #[doc = "unmodified."]
                #[doc = ""]
                #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                #[doc = "and both will be removed."]
                #[doc = ""]
                #[doc = "Merged schedule attributes:"]
                #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                #[doc = "  current_block)`."]
                #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                pub fn merge_schedules(
                    &self,
                    schedule1_index: types::merge_schedules::Schedule1Index,
                    schedule2_index: types::merge_schedules::Schedule2Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MergeSchedules>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "merge_schedules",
                        types::MergeSchedules {
                            schedule1_index,
                            schedule2_index,
                        },
                        [
                            45u8, 24u8, 13u8, 108u8, 26u8, 99u8, 61u8, 117u8, 195u8, 218u8, 182u8,
                            23u8, 188u8, 157u8, 181u8, 81u8, 38u8, 136u8, 31u8, 226u8, 8u8, 190u8,
                            33u8, 81u8, 86u8, 185u8, 156u8, 77u8, 157u8, 197u8, 41u8, 58u8,
                        ],
                    )
                }
                #[doc = "Force remove a vesting schedule"]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `target`: An account that has a vesting schedule"]
                #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                pub fn force_remove_vesting_schedule(
                    &self,
                    target: types::force_remove_vesting_schedule::Target,
                    schedule_index: types::force_remove_vesting_schedule::ScheduleIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceRemoveVestingSchedule,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "force_remove_vesting_schedule",
                        types::ForceRemoveVestingSchedule {
                            target,
                            schedule_index,
                        },
                        [
                            59u8, 200u8, 37u8, 202u8, 223u8, 78u8, 206u8, 243u8, 68u8, 145u8, 75u8,
                            109u8, 125u8, 178u8, 34u8, 61u8, 84u8, 7u8, 26u8, 77u8, 185u8, 198u8,
                            107u8, 14u8, 70u8, 135u8, 144u8, 11u8, 79u8, 232u8, 241u8, 162u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_vesting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
            #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
            pub struct VestingUpdated {
                pub account: vesting_updated::Account,
                pub unvested: vesting_updated::Unvested,
            }
            pub mod vesting_updated {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Unvested = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestingUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An \\[account\\] has become fully vested."]
            pub struct VestingCompleted {
                pub account: vesting_completed::Account,
            }
            pub mod vesting_completed {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestingCompleted {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod vesting {
                    use super::runtime_types;
                    pub type Vesting = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_vesting::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::vesting::Vesting,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "Vesting",
                        (),
                        [
                            30u8, 192u8, 234u8, 227u8, 129u8, 196u8, 160u8, 101u8, 186u8, 205u8,
                            248u8, 180u8, 120u8, 245u8, 8u8, 100u8, 32u8, 254u8, 217u8, 181u8,
                            121u8, 191u8, 189u8, 167u8, 199u8, 220u8, 249u8, 18u8, 105u8, 196u8,
                            59u8, 13u8,
                        ],
                    )
                }
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::vesting::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::vesting::Param0,
                    >,
                    types::vesting::Vesting,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "Vesting",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            30u8, 192u8, 234u8, 227u8, 129u8, 196u8, 160u8, 101u8, 186u8, 205u8,
                            248u8, 180u8, 120u8, 245u8, 8u8, 100u8, 32u8, 254u8, 217u8, 181u8,
                            121u8, 191u8, 189u8, 167u8, 199u8, 220u8, 249u8, 18u8, 105u8, 196u8,
                            59u8, 13u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " New networks start with latest version, as determined by the genesis build."]
                pub fn storage_version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::storage_version::StorageVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "StorageVersion",
                        (),
                        [
                            230u8, 137u8, 180u8, 133u8, 142u8, 124u8, 231u8, 234u8, 223u8, 10u8,
                            154u8, 98u8, 158u8, 253u8, 228u8, 80u8, 5u8, 9u8, 91u8, 210u8, 252u8,
                            9u8, 13u8, 195u8, 193u8, 164u8, 129u8, 113u8, 128u8, 218u8, 8u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount transferred to call `vested_transfer`."]
                pub fn min_vested_transfer(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_vesting_schedules(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Vesting",
                        "MaxVestingSchedules",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod escrow {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_escrow::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_escrow::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Deposits a specified amount of funds directly into the balance of a target account by transferring from the balance of the origin."]
                #[doc = "The deposited amount is reserved in the target account. The reserved funds can later be released partially or in full"]
                #[doc = "by an authorized escrow agent. This function ensures that the deposit meets or exceeds the minimum required balance."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, whose balance the funds are transferred from."]
                #[doc = "* `address` - The target account that will receive and hold the reserved funds."]
                #[doc = "* `value` - The amount to be deposited and reserved."]
                #[doc = "* `authorised_agent` - The agent authorized to manage and release the reserved funds."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::DepositTooLow` if the deposit amount is below the minimum threshold."]
                #[doc = "* `Error::<T>::BalanceTooLow` if the target account balance is below the existential deposit."]
                pub struct Deposit {
                    pub address: deposit::Address,
                    pub value: deposit::Value,
                    pub authorised_agent: deposit::AuthorisedAgent,
                }
                pub mod deposit {
                    use super::runtime_types;
                    pub type Address = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                    pub type AuthorisedAgent = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Deposit {
                    const PALLET: &'static str = "Escrow";
                    const CALL: &'static str = "deposit";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Releases a specified amount from the reserved balance of an account to its available balance."]
                #[doc = "This action can only be initiated by an authorized escrow agent and ensures that the release does not exceed"]
                #[doc = "the reserved amount. This method is used primarily to reduce or clear the reservations made previously by the deposit action."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                #[doc = "* `address` - The account holder of the deposited funds."]
                #[doc = "* `value` - The amount to be released from the reserved balance."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::InsufficientBalance` if the reserved balance in the account is less than the amount requested to be released."]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no deposit record for the given accounts, indicating that no such reserved amount exists."]
                pub struct Release {
                    pub address: release::Address,
                    pub value: release::Value,
                }
                pub mod release {
                    use super::runtime_types;
                    pub type Address = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Release {
                    const PALLET: &'static str = "Escrow";
                    const CALL: &'static str = "release";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Revokes a reserved deposit, transferring the remaining reserved funds to a specified destination account for a specified reason."]
                #[doc = "This function is typically used when a transaction or agreement fails to complete as planned, and the funds need to be returned or redirected."]
                #[doc = "Only authorized agents can initiate a revocation to ensure control and security over the process."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                #[doc = "* `address` - The account from which the reserved funds will be withdrawn."]
                #[doc = "* `destination` - The account to which the funds will be transferred."]
                #[doc = "* `reason` - A byte vector detailing the reason for the revocation, providing transparency and traceability."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account and agent combination,"]
                #[doc = "   indicating that no funds are available to be revoked."]
                pub struct Revoke {
                    pub address: revoke::Address,
                    pub destination: revoke::Destination,
                    pub reason: revoke::Reason,
                }
                pub mod revoke {
                    use super::runtime_types;
                    pub type Address = runtime_types::account::AccountId20;
                    pub type Destination = runtime_types::account::AccountId20;
                    pub type Reason =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Revoke {
                    const PALLET: &'static str = "Escrow";
                    const CALL: &'static str = "revoke";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Forcefully revokes a deposit under special conditions, overriding typical checks."]
                #[doc = "This function is intended for emergency or administrative use where standard revocation processes are insufficient or inappropriate."]
                #[doc = "It requires root privileges, underscoring its use in exceptional circumstances only."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, which must be a root call to ensure administrative authority."]
                #[doc = "* `address` - The account from which reserved funds will be moved."]
                #[doc = "* `agent` - The agent initially authorized to manage the deposit, involved for traceability and records."]
                #[doc = "* `destination` - The account to which the funds will be transferred, potentially different from the original depositor."]
                #[doc = "* `reason` - A byte vector detailing the reason for the forced revocation, providing necessary context for this exceptional action."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account, indicating that no funds are available to be forcibly revoked."]
                pub struct ForceRelease {
                    pub address: force_release::Address,
                    pub agent: force_release::Agent,
                    pub value: force_release::Value,
                }
                pub mod force_release {
                    use super::runtime_types;
                    pub type Address = runtime_types::account::AccountId20;
                    pub type Agent = runtime_types::account::AccountId20;
                    pub type Value = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceRelease {
                    const PALLET: &'static str = "Escrow";
                    const CALL: &'static str = "force_release";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Deposits a specified amount of funds directly into the balance of a target account by transferring from the balance of the origin."]
                #[doc = "The deposited amount is reserved in the target account. The reserved funds can later be released partially or in full"]
                #[doc = "by an authorized escrow agent. This function ensures that the deposit meets or exceeds the minimum required balance."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, whose balance the funds are transferred from."]
                #[doc = "* `address` - The target account that will receive and hold the reserved funds."]
                #[doc = "* `value` - The amount to be deposited and reserved."]
                #[doc = "* `authorised_agent` - The agent authorized to manage and release the reserved funds."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::DepositTooLow` if the deposit amount is below the minimum threshold."]
                #[doc = "* `Error::<T>::BalanceTooLow` if the target account balance is below the existential deposit."]
                pub fn deposit(
                    &self,
                    address: types::deposit::Address,
                    value: types::deposit::Value,
                    authorised_agent: types::deposit::AuthorisedAgent,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Deposit>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Escrow",
                        "deposit",
                        types::Deposit {
                            address,
                            value,
                            authorised_agent,
                        },
                        [
                            215u8, 81u8, 193u8, 161u8, 158u8, 26u8, 183u8, 105u8, 143u8, 98u8,
                            201u8, 158u8, 113u8, 237u8, 168u8, 161u8, 117u8, 96u8, 108u8, 29u8,
                            227u8, 245u8, 191u8, 12u8, 64u8, 215u8, 213u8, 189u8, 15u8, 75u8,
                            157u8, 170u8,
                        ],
                    )
                }
                #[doc = "Releases a specified amount from the reserved balance of an account to its available balance."]
                #[doc = "This action can only be initiated by an authorized escrow agent and ensures that the release does not exceed"]
                #[doc = "the reserved amount. This method is used primarily to reduce or clear the reservations made previously by the deposit action."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                #[doc = "* `address` - The account holder of the deposited funds."]
                #[doc = "* `value` - The amount to be released from the reserved balance."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::InsufficientBalance` if the reserved balance in the account is less than the amount requested to be released."]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no deposit record for the given accounts, indicating that no such reserved amount exists."]
                pub fn release(
                    &self,
                    address: types::release::Address,
                    value: types::release::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Release>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Escrow",
                        "release",
                        types::Release { address, value },
                        [
                            166u8, 230u8, 203u8, 214u8, 116u8, 37u8, 210u8, 53u8, 134u8, 125u8,
                            168u8, 216u8, 142u8, 58u8, 208u8, 75u8, 6u8, 239u8, 210u8, 163u8, 16u8,
                            107u8, 139u8, 100u8, 243u8, 252u8, 19u8, 238u8, 109u8, 10u8, 216u8,
                            175u8,
                        ],
                    )
                }
                #[doc = "Revokes a reserved deposit, transferring the remaining reserved funds to a specified destination account for a specified reason."]
                #[doc = "This function is typically used when a transaction or agreement fails to complete as planned, and the funds need to be returned or redirected."]
                #[doc = "Only authorized agents can initiate a revocation to ensure control and security over the process."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                #[doc = "* `address` - The account from which the reserved funds will be withdrawn."]
                #[doc = "* `destination` - The account to which the funds will be transferred."]
                #[doc = "* `reason` - A byte vector detailing the reason for the revocation, providing transparency and traceability."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account and agent combination,"]
                #[doc = "   indicating that no funds are available to be revoked."]
                pub fn revoke(
                    &self,
                    address: types::revoke::Address,
                    destination: types::revoke::Destination,
                    reason: types::revoke::Reason,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Revoke>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Escrow",
                        "revoke",
                        types::Revoke {
                            address,
                            destination,
                            reason,
                        },
                        [
                            27u8, 175u8, 69u8, 46u8, 169u8, 20u8, 47u8, 179u8, 48u8, 169u8, 240u8,
                            167u8, 254u8, 19u8, 34u8, 189u8, 18u8, 155u8, 143u8, 254u8, 131u8,
                            184u8, 120u8, 57u8, 205u8, 173u8, 5u8, 40u8, 110u8, 181u8, 2u8, 198u8,
                        ],
                    )
                }
                #[doc = "Forcefully revokes a deposit under special conditions, overriding typical checks."]
                #[doc = "This function is intended for emergency or administrative use where standard revocation processes are insufficient or inappropriate."]
                #[doc = "It requires root privileges, underscoring its use in exceptional circumstances only."]
                #[doc = ""]
                #[doc = "# Arguments"]
                #[doc = "* `origin` - The origin of the transaction, which must be a root call to ensure administrative authority."]
                #[doc = "* `address` - The account from which reserved funds will be moved."]
                #[doc = "* `agent` - The agent initially authorized to manage the deposit, involved for traceability and records."]
                #[doc = "* `destination` - The account to which the funds will be transferred, potentially different from the original depositor."]
                #[doc = "* `reason` - A byte vector detailing the reason for the forced revocation, providing necessary context for this exceptional action."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account, indicating that no funds are available to be forcibly revoked."]
                pub fn force_release(
                    &self,
                    address: types::force_release::Address,
                    agent: types::force_release::Agent,
                    value: types::force_release::Value,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceRelease>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Escrow",
                        "force_release",
                        types::ForceRelease {
                            address,
                            agent,
                            value,
                        },
                        [
                            222u8, 72u8, 32u8, 135u8, 248u8, 250u8, 89u8, 170u8, 152u8, 155u8,
                            219u8, 127u8, 111u8, 3u8, 245u8, 20u8, 75u8, 172u8, 39u8, 197u8, 192u8,
                            198u8, 92u8, 81u8, 211u8, 164u8, 88u8, 197u8, 82u8, 143u8, 53u8, 146u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_escrow::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A deposit was made."]
            pub struct Deposited {
                pub account: deposited::Account,
                pub value: deposited::Value,
                pub agent: deposited::Agent,
            }
            pub mod deposited {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Value = ::core::primitive::u128;
                pub type Agent = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Escrow";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Funds were released from a deposit."]
            pub struct Released {
                pub account: released::Account,
                pub value: released::Value,
                pub agent: released::Agent,
            }
            pub mod released {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Value = ::core::primitive::u128;
                pub type Agent = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Released {
                const PALLET: &'static str = "Escrow";
                const EVENT: &'static str = "Released";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A deposit was revoked and all deposited funds were transfered to the destination wallet."]
            pub struct Revoked {
                pub account: revoked::Account,
                pub destination: revoked::Destination,
                pub agent: revoked::Agent,
                pub value: revoked::Value,
                pub reason: revoked::Reason,
            }
            pub mod revoked {
                use super::runtime_types;
                pub type Account = runtime_types::account::AccountId20;
                pub type Destination = runtime_types::account::AccountId20;
                pub type Agent = runtime_types::account::AccountId20;
                pub type Value = ::core::primitive::u128;
                pub type Reason = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Revoked {
                const PALLET: &'static str = "Escrow";
                const EVENT: &'static str = "Revoked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod deposits {
                    use super::runtime_types;
                    pub type Deposits = ::core::primitive::u128;
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn deposits_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::deposits::Deposits,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Escrow",
                        "Deposits",
                        (),
                        [
                            188u8, 175u8, 249u8, 127u8, 39u8, 221u8, 47u8, 119u8, 45u8, 175u8,
                            97u8, 220u8, 65u8, 38u8, 63u8, 40u8, 119u8, 18u8, 103u8, 138u8, 249u8,
                            6u8, 219u8, 4u8, 60u8, 98u8, 219u8, 153u8, 79u8, 202u8, 93u8, 196u8,
                        ],
                    )
                }
                pub fn deposits_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::deposits::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::deposits::Param0,
                    >,
                    types::deposits::Deposits,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Escrow",
                        "Deposits",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            188u8, 175u8, 249u8, 127u8, 39u8, 221u8, 47u8, 119u8, 45u8, 175u8,
                            97u8, 220u8, 65u8, 38u8, 63u8, 40u8, 119u8, 18u8, 103u8, 138u8, 249u8,
                            6u8, 219u8, 4u8, 60u8, 98u8, 219u8, 153u8, 79u8, 202u8, 93u8, 196u8,
                        ],
                    )
                }
                pub fn deposits(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::deposits::Param0>,
                    _1: impl ::core::borrow::Borrow<types::deposits::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::deposits::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::deposits::Param1,
                        >,
                    ),
                    types::deposits::Deposits,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Escrow",
                        "Deposits",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            188u8, 175u8, 249u8, 127u8, 39u8, 221u8, 47u8, 119u8, 45u8, 175u8,
                            97u8, 220u8, 65u8, 38u8, 63u8, 40u8, 119u8, 18u8, 103u8, 138u8, 249u8,
                            6u8, 219u8, 4u8, 60u8, 98u8, 219u8, 153u8, 79u8, 202u8, 93u8, 196u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum deposit value allowed."]
                pub fn min_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Escrow",
                        "MinDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod myth_proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_myth_proxy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_myth_proxy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Adds a new proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegator to grant permission to a delegate account to act on their behalf"]
                #[doc = "for a specific subset of calls defined by `proxy_type`. Optionally, a sponsor can be specified who will"]
                #[doc = "reserve the deposit required for the proxy. The reserved deposit is returned when the proxy is removed."]
                #[doc = ""]
                #[doc = "Emits `ProxyCreated` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegator's account."]
                #[doc = "- `delegate`: The account that is granted the proxy permission."]
                #[doc = "- `proxy_type`: The type of proxy, which defines the subset of calls that the delegate can make on behalf of the delegator."]
                #[doc = "- `sponsor`: (Optional) The account that will reserve the deposit for the proxy. If not provided, the delegator's balance will be reserved."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorshipUnauthorized`: If the sponsor did not approve the delegator to use their funds."]
                pub struct AddProxy {
                    pub delegate: add_proxy::Delegate,
                    pub proxy_type: add_proxy::ProxyType,
                    pub sponsor: add_proxy::Sponsor,
                }
                pub mod add_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                    pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                    pub type Sponsor = ::core::option::Option<runtime_types::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddProxy {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "add_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Executes a call on behalf of the delegator."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegate account to execute a call on behalf of the delegator,"]
                #[doc = "provided the delegate has the appropriate proxy permission. The call must be within the"]
                #[doc = "subset of allowed calls defined by the proxy type."]
                #[doc = ""]
                #[doc = "Emits `ProxyExecuted` event on success. If the call fails, the error is returned."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegate's account."]
                #[doc = "- `address`: The delegator's account on whose behalf the call is made."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NotProxy`: If the delegate does not have proxy permission from the delegator."]
                #[doc = "- `frame_system::Error::<T>::CallFiltered`: If the call is not within the allowed subset of calls for the proxy."]
                pub struct Proxy {
                    pub address: proxy::Address,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy::Call>,
                }
                pub mod proxy {
                    use super::runtime_types;
                    pub type Address = runtime_types::account::AccountId20;
                    pub type Call = runtime_types::mainnet_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Proxy {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes an existing proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegator to remove a proxy permission previously granted to a delegate."]
                #[doc = "If a sponsor was specified during the proxy creation, the reserved deposit is returned to the sponsor."]
                #[doc = ""]
                #[doc = "Emits `ProxyRemoved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegator's account."]
                #[doc = "- `delegate`: The account whose proxy permission is to be removed."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                pub struct RemoveProxy {
                    pub delegate: remove_proxy::Delegate,
                }
                pub mod remove_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxy {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "remove_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Approves funding for a proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor agent to approve the reservation of funds for a proxy on behalf"]
                #[doc = "of the sponsor. The approval must be given before the proxy can be created using the sponsor's funds."]
                #[doc = ""]
                #[doc = "Emits `ProxySponsorshipApproved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor agent's account."]
                #[doc = "- `sponsor`: The sponsor's account that will reserve the funds."]
                #[doc = "- `delegator`: The delegator's account that will use the sponsor's funds."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorAgentUnauthorized`: If the caller is not an authorized agent of the sponsor."]
                pub struct ApproveProxyFunding {
                    pub sponsor: approve_proxy_funding::Sponsor,
                    pub delegator: approve_proxy_funding::Delegator,
                }
                pub mod approve_proxy_funding {
                    use super::runtime_types;
                    pub type Sponsor = runtime_types::account::AccountId20;
                    pub type Delegator = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveProxyFunding {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "approve_proxy_funding";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Registers a sponsor agent."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor to register an agent who is authorized to approve the reservation"]
                #[doc = "of funds for proxies on behalf of the sponsor. This helps in delegating the responsibility of"]
                #[doc = "managing proxy fund reservations while keeping the sponsor's credentials secure."]
                #[doc = ""]
                #[doc = "Emits `SponsorAgentRegistered` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `sponsor_agent`: The account to be registered as the sponsor's agent."]
                pub struct RegisterSponsorAgent {
                    pub sponsor_agent: register_sponsor_agent::SponsorAgent,
                }
                pub mod register_sponsor_agent {
                    use super::runtime_types;
                    pub type SponsorAgent = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterSponsorAgent {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "register_sponsor_agent";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Revokes a sponsor agent."]
                #[doc = ""]
                #[doc = "Revokes the authorization of a sponsor agent. Once revoked, the agent will no longer be able"]
                #[doc = "to approve the reservation of funds for proxies on behalf of the sponsor."]
                #[doc = "All previously approved fund reservations by this agent that have not yet been used to create proxies will also be invalidated."]
                #[doc = "Existing proxies created with the agent's approval will remain unaffected."]
                #[doc = ""]
                #[doc = "Emits `SponsorAgentRevoked` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `sponsor_agent`: The account to be revoked as the sponsor's agent."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorAgentUnauthorized`: If the specified agent is not currently authorized by the sponsor."]
                pub struct RevokeSponsorAgent {
                    pub sponsor_agent: revoke_sponsor_agent::SponsorAgent,
                }
                pub mod revoke_sponsor_agent {
                    use super::runtime_types;
                    pub type SponsorAgent = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RevokeSponsorAgent {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "revoke_sponsor_agent";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes a proxy sponsored by the caller."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor to remove a proxy that they have sponsored. The reserved deposit"]
                #[doc = "is returned to the sponsor upon removal of the proxy."]
                #[doc = ""]
                #[doc = "Emits `ProxyRemoved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `delegator`: The account that delegated its authority."]
                #[doc = "- `delegate`: The account that received the delegation."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                #[doc = "- `Unauthorized`: If the caller is not the sponsor of the specified proxy."]
                pub struct RemoveSponsoredProxy {
                    pub delegator: remove_sponsored_proxy::Delegator,
                    pub delegate: remove_sponsored_proxy::Delegate,
                }
                pub mod remove_sponsored_proxy {
                    use super::runtime_types;
                    pub type Delegator = runtime_types::account::AccountId20;
                    pub type Delegate = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveSponsoredProxy {
                    const PALLET: &'static str = "MythProxy";
                    const CALL: &'static str = "remove_sponsored_proxy";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Adds a new proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegator to grant permission to a delegate account to act on their behalf"]
                #[doc = "for a specific subset of calls defined by `proxy_type`. Optionally, a sponsor can be specified who will"]
                #[doc = "reserve the deposit required for the proxy. The reserved deposit is returned when the proxy is removed."]
                #[doc = ""]
                #[doc = "Emits `ProxyCreated` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegator's account."]
                #[doc = "- `delegate`: The account that is granted the proxy permission."]
                #[doc = "- `proxy_type`: The type of proxy, which defines the subset of calls that the delegate can make on behalf of the delegator."]
                #[doc = "- `sponsor`: (Optional) The account that will reserve the deposit for the proxy. If not provided, the delegator's balance will be reserved."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorshipUnauthorized`: If the sponsor did not approve the delegator to use their funds."]
                pub fn add_proxy(
                    &self,
                    delegate: types::add_proxy::Delegate,
                    proxy_type: types::add_proxy::ProxyType,
                    sponsor: types::add_proxy::Sponsor,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "add_proxy",
                        types::AddProxy {
                            delegate,
                            proxy_type,
                            sponsor,
                        },
                        [
                            40u8, 38u8, 21u8, 21u8, 214u8, 198u8, 134u8, 145u8, 46u8, 202u8, 198u8,
                            6u8, 53u8, 145u8, 235u8, 31u8, 246u8, 252u8, 148u8, 60u8, 4u8, 140u8,
                            214u8, 195u8, 250u8, 243u8, 120u8, 228u8, 92u8, 153u8, 185u8, 61u8,
                        ],
                    )
                }
                #[doc = "Executes a call on behalf of the delegator."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegate account to execute a call on behalf of the delegator,"]
                #[doc = "provided the delegate has the appropriate proxy permission. The call must be within the"]
                #[doc = "subset of allowed calls defined by the proxy type."]
                #[doc = ""]
                #[doc = "Emits `ProxyExecuted` event on success. If the call fails, the error is returned."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegate's account."]
                #[doc = "- `address`: The delegator's account on whose behalf the call is made."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NotProxy`: If the delegate does not have proxy permission from the delegator."]
                #[doc = "- `frame_system::Error::<T>::CallFiltered`: If the call is not within the allowed subset of calls for the proxy."]
                pub fn proxy(
                    &self,
                    address: types::proxy::Address,
                    call: types::proxy::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Proxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "proxy",
                        types::Proxy {
                            address,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            99u8, 243u8, 190u8, 119u8, 239u8, 49u8, 229u8, 203u8, 149u8, 208u8,
                            51u8, 44u8, 24u8, 35u8, 87u8, 63u8, 97u8, 207u8, 72u8, 60u8, 118u8,
                            87u8, 252u8, 197u8, 215u8, 134u8, 194u8, 154u8, 58u8, 25u8, 208u8,
                            143u8,
                        ],
                    )
                }
                #[doc = "Removes an existing proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a delegator to remove a proxy permission previously granted to a delegate."]
                #[doc = "If a sponsor was specified during the proxy creation, the reserved deposit is returned to the sponsor."]
                #[doc = ""]
                #[doc = "Emits `ProxyRemoved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The delegator's account."]
                #[doc = "- `delegate`: The account whose proxy permission is to be removed."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                pub fn remove_proxy(
                    &self,
                    delegate: types::remove_proxy::Delegate,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "remove_proxy",
                        types::RemoveProxy { delegate },
                        [
                            71u8, 181u8, 199u8, 219u8, 201u8, 156u8, 81u8, 140u8, 173u8, 163u8,
                            171u8, 105u8, 255u8, 34u8, 172u8, 171u8, 161u8, 44u8, 185u8, 188u8,
                            51u8, 74u8, 73u8, 6u8, 243u8, 110u8, 61u8, 8u8, 196u8, 208u8, 70u8,
                            184u8,
                        ],
                    )
                }
                #[doc = "Approves funding for a proxy."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor agent to approve the reservation of funds for a proxy on behalf"]
                #[doc = "of the sponsor. The approval must be given before the proxy can be created using the sponsor's funds."]
                #[doc = ""]
                #[doc = "Emits `ProxySponsorshipApproved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor agent's account."]
                #[doc = "- `sponsor`: The sponsor's account that will reserve the funds."]
                #[doc = "- `delegator`: The delegator's account that will use the sponsor's funds."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorAgentUnauthorized`: If the caller is not an authorized agent of the sponsor."]
                pub fn approve_proxy_funding(
                    &self,
                    sponsor: types::approve_proxy_funding::Sponsor,
                    delegator: types::approve_proxy_funding::Delegator,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveProxyFunding>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "approve_proxy_funding",
                        types::ApproveProxyFunding { sponsor, delegator },
                        [
                            32u8, 137u8, 156u8, 87u8, 116u8, 92u8, 116u8, 41u8, 241u8, 62u8, 122u8,
                            161u8, 216u8, 19u8, 158u8, 133u8, 58u8, 158u8, 123u8, 8u8, 79u8, 46u8,
                            165u8, 125u8, 124u8, 116u8, 103u8, 187u8, 13u8, 75u8, 80u8, 125u8,
                        ],
                    )
                }
                #[doc = "Registers a sponsor agent."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor to register an agent who is authorized to approve the reservation"]
                #[doc = "of funds for proxies on behalf of the sponsor. This helps in delegating the responsibility of"]
                #[doc = "managing proxy fund reservations while keeping the sponsor's credentials secure."]
                #[doc = ""]
                #[doc = "Emits `SponsorAgentRegistered` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `sponsor_agent`: The account to be registered as the sponsor's agent."]
                pub fn register_sponsor_agent(
                    &self,
                    sponsor_agent: types::register_sponsor_agent::SponsorAgent,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterSponsorAgent>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "register_sponsor_agent",
                        types::RegisterSponsorAgent { sponsor_agent },
                        [
                            246u8, 104u8, 197u8, 165u8, 77u8, 221u8, 22u8, 11u8, 196u8, 25u8,
                            181u8, 225u8, 52u8, 125u8, 161u8, 228u8, 215u8, 204u8, 214u8, 155u8,
                            173u8, 133u8, 92u8, 139u8, 42u8, 144u8, 37u8, 49u8, 64u8, 167u8, 44u8,
                            66u8,
                        ],
                    )
                }
                #[doc = "Revokes a sponsor agent."]
                #[doc = ""]
                #[doc = "Revokes the authorization of a sponsor agent. Once revoked, the agent will no longer be able"]
                #[doc = "to approve the reservation of funds for proxies on behalf of the sponsor."]
                #[doc = "All previously approved fund reservations by this agent that have not yet been used to create proxies will also be invalidated."]
                #[doc = "Existing proxies created with the agent's approval will remain unaffected."]
                #[doc = ""]
                #[doc = "Emits `SponsorAgentRevoked` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `sponsor_agent`: The account to be revoked as the sponsor's agent."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `SponsorAgentUnauthorized`: If the specified agent is not currently authorized by the sponsor."]
                pub fn revoke_sponsor_agent(
                    &self,
                    sponsor_agent: types::revoke_sponsor_agent::SponsorAgent,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RevokeSponsorAgent>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "revoke_sponsor_agent",
                        types::RevokeSponsorAgent { sponsor_agent },
                        [
                            170u8, 28u8, 4u8, 62u8, 105u8, 171u8, 217u8, 37u8, 253u8, 11u8, 185u8,
                            130u8, 119u8, 255u8, 65u8, 89u8, 174u8, 244u8, 44u8, 180u8, 113u8,
                            210u8, 151u8, 236u8, 189u8, 146u8, 81u8, 232u8, 16u8, 235u8, 125u8,
                            101u8,
                        ],
                    )
                }
                #[doc = "Removes a proxy sponsored by the caller."]
                #[doc = ""]
                #[doc = "This extrinsic allows a sponsor to remove a proxy that they have sponsored. The reserved deposit"]
                #[doc = "is returned to the sponsor upon removal of the proxy."]
                #[doc = ""]
                #[doc = "Emits `ProxyRemoved` event."]
                #[doc = ""]
                #[doc = "# Parameters"]
                #[doc = "- `origin`: The sponsor's account."]
                #[doc = "- `delegator`: The account that delegated its authority."]
                #[doc = "- `delegate`: The account that received the delegation."]
                #[doc = ""]
                #[doc = "# Errors"]
                #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                #[doc = "- `Unauthorized`: If the caller is not the sponsor of the specified proxy."]
                pub fn remove_sponsored_proxy(
                    &self,
                    delegator: types::remove_sponsored_proxy::Delegator,
                    delegate: types::remove_sponsored_proxy::Delegate,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveSponsoredProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MythProxy",
                        "remove_sponsored_proxy",
                        types::RemoveSponsoredProxy {
                            delegator,
                            delegate,
                        },
                        [
                            95u8, 97u8, 134u8, 178u8, 161u8, 100u8, 161u8, 208u8, 161u8, 35u8,
                            47u8, 69u8, 150u8, 148u8, 105u8, 231u8, 67u8, 19u8, 4u8, 77u8, 42u8,
                            242u8, 189u8, 156u8, 215u8, 75u8, 70u8, 143u8, 94u8, 109u8, 41u8,
                            122u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_myth_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new proxy permission was added."]
            pub struct ProxyCreated {
                pub delegator: proxy_created::Delegator,
                pub delegate: proxy_created::Delegate,
                pub proxy_type: proxy_created::ProxyType,
                pub sponsor: proxy_created::Sponsor,
            }
            pub mod proxy_created {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Delegate = runtime_types::account::AccountId20;
                pub type ProxyType = runtime_types::mainnet_runtime::ProxyType;
                pub type Sponsor = ::core::option::Option<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyCreated {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "ProxyCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy permission was removed."]
            pub struct ProxyRemoved {
                pub delegator: proxy_removed::Delegator,
                pub delegate: proxy_removed::Delegate,
                pub removed_by_sponsor: proxy_removed::RemovedBySponsor,
            }
            pub mod proxy_removed {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Delegate = runtime_types::account::AccountId20;
                pub type RemovedBySponsor =
                    ::core::option::Option<runtime_types::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Proxy funding was approved."]
            pub struct ProxySponsorshipApproved {
                pub delegator: proxy_sponsorship_approved::Delegator,
                pub sponsor: proxy_sponsorship_approved::Sponsor,
                pub approver: proxy_sponsorship_approved::Approver,
            }
            pub mod proxy_sponsorship_approved {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Sponsor = runtime_types::account::AccountId20;
                pub type Approver = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxySponsorshipApproved {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "ProxySponsorshipApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sponsor agent was registered."]
            pub struct SponsorAgentRegistered {
                pub sponsor: sponsor_agent_registered::Sponsor,
                pub agent: sponsor_agent_registered::Agent,
            }
            pub mod sponsor_agent_registered {
                use super::runtime_types;
                pub type Sponsor = runtime_types::account::AccountId20;
                pub type Agent = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SponsorAgentRegistered {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "SponsorAgentRegistered";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sponsor agent was revoked."]
            pub struct SponsorAgentRevoked {
                pub sponsor: sponsor_agent_revoked::Sponsor,
                pub agent: sponsor_agent_revoked::Agent,
            }
            pub mod sponsor_agent_revoked {
                use super::runtime_types;
                pub type Sponsor = runtime_types::account::AccountId20;
                pub type Agent = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SponsorAgentRevoked {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "SponsorAgentRevoked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Proxy call was executed."]
            #[doc = "This event is emitted only when the proxy call is successful."]
            pub struct ProxyExecuted {
                pub delegator: proxy_executed::Delegator,
                pub delegate: proxy_executed::Delegate,
            }
            pub mod proxy_executed {
                use super::runtime_types;
                pub type Delegator = runtime_types::account::AccountId20;
                pub type Delegate = runtime_types::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "MythProxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proxies {
                    use super::runtime_types;
                    pub type Proxies = runtime_types::pallet_myth_proxy::ProxyDefinition<
                        runtime_types::account::AccountId20,
                        runtime_types::mainnet_runtime::ProxyType,
                    >;
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::account::AccountId20;
                }
                pub mod sponsor_agents {
                    use super::runtime_types;
                    pub type SponsorAgents = runtime_types::account::AccountId20;
                    pub type Param0 = runtime_types::account::AccountId20;
                }
                pub mod sponsorship_approvals {
                    use super::runtime_types;
                    pub type SponsorshipApprovals = runtime_types::account::AccountId20;
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = runtime_types::account::AccountId20;
                }
                pub mod approvals_by_agent {
                    use super::runtime_types;
                    pub type ApprovalsByAgent = ();
                    pub type Param0 = runtime_types::account::AccountId20;
                    pub type Param1 = (
                        runtime_types::account::AccountId20,
                        runtime_types::account::AccountId20,
                    );
                }
                pub mod invalidated_agents {
                    use super::runtime_types;
                    pub type InvalidatedAgents = ();
                    pub type Param0 = runtime_types::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn proxies_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proxies::Proxies,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "Proxies",
                        (),
                        [
                            100u8, 173u8, 216u8, 182u8, 151u8, 193u8, 224u8, 123u8, 198u8, 179u8,
                            92u8, 60u8, 67u8, 30u8, 138u8, 123u8, 102u8, 240u8, 153u8, 185u8,
                            106u8, 18u8, 164u8, 201u8, 30u8, 79u8, 91u8, 77u8, 189u8, 248u8, 194u8,
                            180u8,
                        ],
                    )
                }
                pub fn proxies_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proxies::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proxies::Param0,
                    >,
                    types::proxies::Proxies,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "Proxies",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            100u8, 173u8, 216u8, 182u8, 151u8, 193u8, 224u8, 123u8, 198u8, 179u8,
                            92u8, 60u8, 67u8, 30u8, 138u8, 123u8, 102u8, 240u8, 153u8, 185u8,
                            106u8, 18u8, 164u8, 201u8, 30u8, 79u8, 91u8, 77u8, 189u8, 248u8, 194u8,
                            180u8,
                        ],
                    )
                }
                pub fn proxies(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proxies::Param0>,
                    _1: impl ::core::borrow::Borrow<types::proxies::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::proxies::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::proxies::Param1,
                        >,
                    ),
                    types::proxies::Proxies,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "Proxies",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            100u8, 173u8, 216u8, 182u8, 151u8, 193u8, 224u8, 123u8, 198u8, 179u8,
                            92u8, 60u8, 67u8, 30u8, 138u8, 123u8, 102u8, 240u8, 153u8, 185u8,
                            106u8, 18u8, 164u8, 201u8, 30u8, 79u8, 91u8, 77u8, 189u8, 248u8, 194u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " A mapping from a sponsor agent to the sponsor."]
                pub fn sponsor_agents_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::sponsor_agents::SponsorAgents,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "SponsorAgents",
                        (),
                        [
                            127u8, 204u8, 98u8, 165u8, 177u8, 179u8, 70u8, 87u8, 3u8, 217u8, 158u8,
                            117u8, 56u8, 79u8, 250u8, 146u8, 165u8, 251u8, 106u8, 32u8, 61u8,
                            142u8, 64u8, 23u8, 155u8, 210u8, 22u8, 147u8, 72u8, 100u8, 221u8, 36u8,
                        ],
                    )
                }
                #[doc = " A mapping from a sponsor agent to the sponsor."]
                pub fn sponsor_agents(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sponsor_agents::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::sponsor_agents::Param0,
                    >,
                    types::sponsor_agents::SponsorAgents,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "SponsorAgents",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            127u8, 204u8, 98u8, 165u8, 177u8, 179u8, 70u8, 87u8, 3u8, 217u8, 158u8,
                            117u8, 56u8, 79u8, 250u8, 146u8, 165u8, 251u8, 106u8, 32u8, 61u8,
                            142u8, 64u8, 23u8, 155u8, 210u8, 22u8, 147u8, 72u8, 100u8, 221u8, 36u8,
                        ],
                    )
                }
                #[doc = " A mapping from a delegator and a sponsor to the sponsor agent."]
                pub fn sponsorship_approvals_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::sponsorship_approvals::SponsorshipApprovals,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "SponsorshipApprovals",
                        (),
                        [
                            217u8, 142u8, 133u8, 54u8, 155u8, 190u8, 150u8, 175u8, 240u8, 240u8,
                            248u8, 138u8, 129u8, 235u8, 222u8, 116u8, 171u8, 139u8, 254u8, 172u8,
                            164u8, 75u8, 34u8, 93u8, 201u8, 255u8, 235u8, 186u8, 32u8, 170u8, 15u8,
                            94u8,
                        ],
                    )
                }
                #[doc = " A mapping from a delegator and a sponsor to the sponsor agent."]
                pub fn sponsorship_approvals_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sponsorship_approvals::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::sponsorship_approvals::Param0,
                    >,
                    types::sponsorship_approvals::SponsorshipApprovals,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "SponsorshipApprovals",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            217u8, 142u8, 133u8, 54u8, 155u8, 190u8, 150u8, 175u8, 240u8, 240u8,
                            248u8, 138u8, 129u8, 235u8, 222u8, 116u8, 171u8, 139u8, 254u8, 172u8,
                            164u8, 75u8, 34u8, 93u8, 201u8, 255u8, 235u8, 186u8, 32u8, 170u8, 15u8,
                            94u8,
                        ],
                    )
                }
                #[doc = " A mapping from a delegator and a sponsor to the sponsor agent."]
                pub fn sponsorship_approvals(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sponsorship_approvals::Param0>,
                    _1: impl ::core::borrow::Borrow<types::sponsorship_approvals::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::sponsorship_approvals::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::sponsorship_approvals::Param1,
                        >,
                    ),
                    types::sponsorship_approvals::SponsorshipApprovals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "SponsorshipApprovals",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            217u8, 142u8, 133u8, 54u8, 155u8, 190u8, 150u8, 175u8, 240u8, 240u8,
                            248u8, 138u8, 129u8, 235u8, 222u8, 116u8, 171u8, 139u8, 254u8, 172u8,
                            164u8, 75u8, 34u8, 93u8, 201u8, 255u8, 235u8, 186u8, 32u8, 170u8, 15u8,
                            94u8,
                        ],
                    )
                }
                #[doc = " A mapping from a sponsor agent to the approval."]
                #[doc = " This is used to clean up approvals after removing the agent."]
                pub fn approvals_by_agent_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::approvals_by_agent::ApprovalsByAgent,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "ApprovalsByAgent",
                        (),
                        [
                            215u8, 100u8, 68u8, 174u8, 212u8, 130u8, 74u8, 44u8, 117u8, 150u8,
                            230u8, 150u8, 112u8, 121u8, 11u8, 150u8, 132u8, 40u8, 173u8, 218u8,
                            17u8, 130u8, 215u8, 192u8, 221u8, 25u8, 12u8, 111u8, 211u8, 38u8, 84u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " A mapping from a sponsor agent to the approval."]
                #[doc = " This is used to clean up approvals after removing the agent."]
                pub fn approvals_by_agent_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::approvals_by_agent::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::approvals_by_agent::Param0,
                    >,
                    types::approvals_by_agent::ApprovalsByAgent,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "ApprovalsByAgent",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            215u8, 100u8, 68u8, 174u8, 212u8, 130u8, 74u8, 44u8, 117u8, 150u8,
                            230u8, 150u8, 112u8, 121u8, 11u8, 150u8, 132u8, 40u8, 173u8, 218u8,
                            17u8, 130u8, 215u8, 192u8, 221u8, 25u8, 12u8, 111u8, 211u8, 38u8, 84u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " A mapping from a sponsor agent to the approval."]
                #[doc = " This is used to clean up approvals after removing the agent."]
                pub fn approvals_by_agent(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::approvals_by_agent::Param0>,
                    _1: impl ::core::borrow::Borrow<types::approvals_by_agent::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::approvals_by_agent::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::approvals_by_agent::Param1,
                        >,
                    ),
                    types::approvals_by_agent::ApprovalsByAgent,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "ApprovalsByAgent",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            215u8, 100u8, 68u8, 174u8, 212u8, 130u8, 74u8, 44u8, 117u8, 150u8,
                            230u8, 150u8, 112u8, 121u8, 11u8, 150u8, 132u8, 40u8, 173u8, 218u8,
                            17u8, 130u8, 215u8, 192u8, 221u8, 25u8, 12u8, 111u8, 211u8, 38u8, 84u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Storage of agents that have been invalidated."]
                #[doc = " This is used to clean up approvals that are no longer valid."]
                pub fn invalidated_agents_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::invalidated_agents::InvalidatedAgents,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "InvalidatedAgents",
                        (),
                        [
                            197u8, 24u8, 246u8, 82u8, 221u8, 64u8, 3u8, 59u8, 135u8, 72u8, 92u8,
                            139u8, 79u8, 147u8, 146u8, 225u8, 207u8, 190u8, 251u8, 141u8, 128u8,
                            241u8, 82u8, 5u8, 106u8, 109u8, 112u8, 98u8, 188u8, 178u8, 27u8, 138u8,
                        ],
                    )
                }
                #[doc = " Storage of agents that have been invalidated."]
                #[doc = " This is used to clean up approvals that are no longer valid."]
                pub fn invalidated_agents(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::invalidated_agents::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::invalidated_agents::Param0,
                    >,
                    types::invalidated_agents::InvalidatedAgents,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MythProxy",
                        "InvalidatedAgents",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            197u8, 24u8, 246u8, 82u8, 221u8, 64u8, 3u8, 59u8, 135u8, 72u8, 92u8,
                            139u8, 79u8, 147u8, 146u8, 225u8, 207u8, 190u8, 251u8, 141u8, 128u8,
                            241u8, 82u8, 5u8, 106u8, 109u8, 112u8, 98u8, 188u8, 178u8, 27u8, 138u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod dmarket {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_dmarket::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_dmarket::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the Dmarket collection."]
                #[doc = ""]
                #[doc = "Only the root origin can execute this function."]
                #[doc = ""]
                #[doc = "Precondition:"]
                #[doc = "- The collection must already exist, otherwise the extrinsic will fail."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `collection_id`: The collectionID of the NFT collection to be set as the Dmarket Collection."]
                #[doc = ""]
                #[doc = ""]
                #[doc = "Emits CollectionUpdated when successful."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::force_set_collection` (defined in the `Config` trait)."]
                pub struct ForceSetCollection {
                    pub collection_id: force_set_collection::CollectionId,
                }
                pub mod force_set_collection {
                    use super::runtime_types;
                    pub type CollectionId = runtime_types::runtime_common::IncrementableU256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceSetCollection {
                    const PALLET: &'static str = "Dmarket";
                    const CALL: &'static str = "force_set_collection";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute a trade between a seller and a buyer for a specific NFT (item) in the configured DmarketCollection."]
                #[doc = ""]
                #[doc = "Preconditions:"]
                #[doc = "- The seller and buyer must be different accounts."]
                #[doc = "- The seller must be the current owner of the NFT item."]
                #[doc = "- The trade must not be expired, and signatures provided must be valid."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: The origin of the call, which must be part of the signed message of both seller and buyer."]
                #[doc = "- `seller`: The account ID of the seller who owns the NFT item."]
                #[doc = "- `buyer`: The account ID of the buyer who will purchase the NFT item."]
                #[doc = "- `trade`: The parameters of the trade, including item details, prices, and expiration times."]
                #[doc = "- `signatures`: The signatures from both the seller and buyer authorizing the trade."]
                #[doc = "- `fee_address`: The account ID where the transaction fee will be transferred."]
                #[doc = ""]
                #[doc = "Signed message schema:"]
                #[doc = "- Ask: (domain, sender, fee_address, item, price, expiration)."]
                #[doc = "- Bid: (domain, sender, fee_address, item, price, fee, expiration)."]
                #[doc = ""]
                #[doc = "Only callable if origin matches `sender` in both Ask and Bid signed messages."]
                #[doc = ""]
                #[doc = "Emits `Trade` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::execute_trade` (defined in the `Config` trait)."]
                pub struct ExecuteTrade {
                    pub seller: execute_trade::Seller,
                    pub buyer: execute_trade::Buyer,
                    pub trade: execute_trade::Trade,
                    pub signatures: execute_trade::Signatures,
                    pub fee_address: execute_trade::FeeAddress,
                }
                pub mod execute_trade {
                    use super::runtime_types;
                    pub type Seller = runtime_types::account::AccountId20;
                    pub type Buyer = runtime_types::account::AccountId20;
                    pub type Trade = runtime_types::pallet_dmarket::types::TradeParams<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                    pub type Signatures = runtime_types::pallet_dmarket::types::TradeSignatures<
                        runtime_types::account::EthereumSignature,
                    >;
                    pub type FeeAddress = runtime_types::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteTrade {
                    const PALLET: &'static str = "Dmarket";
                    const CALL: &'static str = "execute_trade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the Dmarket collection."]
                #[doc = ""]
                #[doc = "Only the root origin can execute this function."]
                #[doc = ""]
                #[doc = "Precondition:"]
                #[doc = "- The collection must already exist, otherwise the extrinsic will fail."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `collection_id`: The collectionID of the NFT collection to be set as the Dmarket Collection."]
                #[doc = ""]
                #[doc = ""]
                #[doc = "Emits CollectionUpdated when successful."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::force_set_collection` (defined in the `Config` trait)."]
                pub fn force_set_collection(
                    &self,
                    collection_id: types::force_set_collection::CollectionId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceSetCollection>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Dmarket",
                        "force_set_collection",
                        types::ForceSetCollection { collection_id },
                        [
                            113u8, 22u8, 238u8, 240u8, 110u8, 5u8, 29u8, 177u8, 141u8, 113u8, 60u8,
                            114u8, 210u8, 19u8, 1u8, 155u8, 230u8, 238u8, 55u8, 164u8, 20u8, 163u8,
                            205u8, 49u8, 247u8, 109u8, 201u8, 189u8, 50u8, 101u8, 255u8, 43u8,
                        ],
                    )
                }
                #[doc = "Execute a trade between a seller and a buyer for a specific NFT (item) in the configured DmarketCollection."]
                #[doc = ""]
                #[doc = "Preconditions:"]
                #[doc = "- The seller and buyer must be different accounts."]
                #[doc = "- The seller must be the current owner of the NFT item."]
                #[doc = "- The trade must not be expired, and signatures provided must be valid."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `origin`: The origin of the call, which must be part of the signed message of both seller and buyer."]
                #[doc = "- `seller`: The account ID of the seller who owns the NFT item."]
                #[doc = "- `buyer`: The account ID of the buyer who will purchase the NFT item."]
                #[doc = "- `trade`: The parameters of the trade, including item details, prices, and expiration times."]
                #[doc = "- `signatures`: The signatures from both the seller and buyer authorizing the trade."]
                #[doc = "- `fee_address`: The account ID where the transaction fee will be transferred."]
                #[doc = ""]
                #[doc = "Signed message schema:"]
                #[doc = "- Ask: (domain, sender, fee_address, item, price, expiration)."]
                #[doc = "- Bid: (domain, sender, fee_address, item, price, fee, expiration)."]
                #[doc = ""]
                #[doc = "Only callable if origin matches `sender` in both Ask and Bid signed messages."]
                #[doc = ""]
                #[doc = "Emits `Trade` event upon successful execution."]
                #[doc = ""]
                #[doc = "Weight: `WeightInfo::execute_trade` (defined in the `Config` trait)."]
                pub fn execute_trade(
                    &self,
                    seller: types::execute_trade::Seller,
                    buyer: types::execute_trade::Buyer,
                    trade: types::execute_trade::Trade,
                    signatures: types::execute_trade::Signatures,
                    fee_address: types::execute_trade::FeeAddress,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ExecuteTrade>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Dmarket",
                        "execute_trade",
                        types::ExecuteTrade {
                            seller,
                            buyer,
                            trade,
                            signatures,
                            fee_address,
                        },
                        [
                            130u8, 162u8, 189u8, 25u8, 66u8, 99u8, 212u8, 119u8, 6u8, 124u8, 209u8,
                            48u8, 255u8, 92u8, 53u8, 239u8, 5u8, 92u8, 43u8, 28u8, 177u8, 255u8,
                            188u8, 106u8, 199u8, 151u8, 20u8, 25u8, 254u8, 239u8, 38u8, 15u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_dmarket::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The fee signer account was updated."]
            pub struct CollectionUpdated {
                pub collection_id: collection_updated::CollectionId,
            }
            pub mod collection_updated {
                use super::runtime_types;
                pub type CollectionId = runtime_types::runtime_common::IncrementableU256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollectionUpdated {
                const PALLET: &'static str = "Dmarket";
                const EVENT: &'static str = "CollectionUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A successful trade is executed."]
            pub struct Trade {
                pub buyer: trade::Buyer,
                pub seller: trade::Seller,
                pub item: trade::Item,
                pub price: trade::Price,
                pub fee: trade::Fee,
            }
            pub mod trade {
                use super::runtime_types;
                pub type Buyer = runtime_types::account::AccountId20;
                pub type Seller = runtime_types::account::AccountId20;
                pub type Item = ::core::primitive::u128;
                pub type Price = ::core::primitive::u128;
                pub type Fee = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Trade {
                const PALLET: &'static str = "Dmarket";
                const EVENT: &'static str = "Trade";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod closed_asks {
                    use super::runtime_types;
                    pub type ClosedAsks = runtime_types::pallet_dmarket::types::OrderData<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod closed_bids {
                    use super::runtime_types;
                    pub type ClosedBids = runtime_types::pallet_dmarket::types::OrderData<
                        runtime_types::account::AccountId20,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod dmarket_collection {
                    use super::runtime_types;
                    pub type DmarketCollection = runtime_types::runtime_common::IncrementableU256;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn closed_asks_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::closed_asks::ClosedAsks,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Dmarket",
                        "ClosedAsks",
                        (),
                        [
                            104u8, 235u8, 119u8, 146u8, 123u8, 153u8, 183u8, 56u8, 180u8, 201u8,
                            240u8, 32u8, 211u8, 246u8, 72u8, 77u8, 84u8, 53u8, 247u8, 129u8, 155u8,
                            120u8, 2u8, 192u8, 230u8, 203u8, 252u8, 10u8, 130u8, 50u8, 165u8,
                            196u8,
                        ],
                    )
                }
                pub fn closed_asks(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::closed_asks::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::closed_asks::Param0,
                    >,
                    types::closed_asks::ClosedAsks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Dmarket",
                        "ClosedAsks",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            104u8, 235u8, 119u8, 146u8, 123u8, 153u8, 183u8, 56u8, 180u8, 201u8,
                            240u8, 32u8, 211u8, 246u8, 72u8, 77u8, 84u8, 53u8, 247u8, 129u8, 155u8,
                            120u8, 2u8, 192u8, 230u8, 203u8, 252u8, 10u8, 130u8, 50u8, 165u8,
                            196u8,
                        ],
                    )
                }
                pub fn closed_bids_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::closed_bids::ClosedBids,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Dmarket",
                        "ClosedBids",
                        (),
                        [
                            102u8, 105u8, 1u8, 144u8, 47u8, 248u8, 251u8, 28u8, 132u8, 142u8,
                            178u8, 90u8, 25u8, 124u8, 48u8, 21u8, 239u8, 175u8, 210u8, 147u8,
                            182u8, 204u8, 198u8, 8u8, 148u8, 218u8, 247u8, 31u8, 40u8, 86u8, 55u8,
                            70u8,
                        ],
                    )
                }
                pub fn closed_bids(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::closed_bids::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::closed_bids::Param0,
                    >,
                    types::closed_bids::ClosedBids,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Dmarket",
                        "ClosedBids",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            102u8, 105u8, 1u8, 144u8, 47u8, 248u8, 251u8, 28u8, 132u8, 142u8,
                            178u8, 90u8, 25u8, 124u8, 48u8, 21u8, 239u8, 175u8, 210u8, 147u8,
                            182u8, 204u8, 198u8, 8u8, 148u8, 218u8, 247u8, 31u8, 40u8, 86u8, 55u8,
                            70u8,
                        ],
                    )
                }
                pub fn dmarket_collection(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::dmarket_collection::DmarketCollection,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Dmarket",
                        "DmarketCollection",
                        (),
                        [
                            113u8, 240u8, 26u8, 202u8, 94u8, 172u8, 70u8, 12u8, 219u8, 242u8,
                            137u8, 255u8, 236u8, 119u8, 210u8, 96u8, 200u8, 255u8, 66u8, 111u8,
                            216u8, 203u8, 196u8, 61u8, 208u8, 151u8, 182u8, 237u8, 153u8, 200u8,
                            115u8, 117u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = "Chain Domain"]
                pub fn domain(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    [::core::primitive::u8; 8usize],
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Dmarket",
                        "Domain",
                        [
                            157u8, 118u8, 79u8, 88u8, 241u8, 22u8, 185u8, 37u8, 42u8, 20u8, 133u8,
                            240u8, 11u8, 25u8, 66u8, 154u8, 84u8, 163u8, 78u8, 92u8, 171u8, 82u8,
                            248u8, 76u8, 189u8, 70u8, 142u8, 249u8, 153u8, 84u8, 180u8, 60u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod account {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct AccountId20(pub [::core::primitive::u8; 20usize]);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct EthereumSignature(pub [::core::primitive::u8; 65usize]);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct EthereumSigner(pub [::core::primitive::u8; 20usize]);
        }
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_btree_map {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedBTreeMap<_0, _1>(
                    pub ::subxt::ext::subxt_core::utils::KeyedVec<_0, _1>,
                );
            }
            pub mod bounded_btree_set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedBTreeSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct WeakBoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
        }
        pub mod cumulus_pallet_parachain_system {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Set the current validation data."] # [doc = ""] # [doc = "This should be invoked exactly once per block. It will panic at the finalization"] # [doc = "phase if the call was not invoked."] # [doc = ""] # [doc = "The dispatch origin for this call must be `Inherent`"] # [doc = ""] # [doc = "As a side effect, this function upgrades the current validation function"] # [doc = "if the appropriate time has come."] set_validation_data { data : runtime_types :: cumulus_primitives_parachain_inherent :: ParachainInherentData , } , # [codec (index = 1)] sudo_send_upward_message { message : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: core :: primitive :: u8 > , } , }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to upgrade validation function while existing upgrade pending."]
                    OverlappingUpgrades,
                    #[codec(index = 1)]
                    #[doc = "Polkadot currently prohibits this parachain from upgrading its validation function."]
                    ProhibitedByPolkadot,
                    #[codec(index = 2)]
                    #[doc = "The supplied validation function has compiled into a blob larger than Polkadot is"]
                    #[doc = "willing to run."]
                    TooBig,
                    #[codec(index = 3)]
                    #[doc = "The inherent which supplies the validation data did not run this block."]
                    ValidationDataNotAvailable,
                    #[codec(index = 4)]
                    #[doc = "The inherent which supplies the host configuration did not run this block."]
                    HostConfigurationNotAvailable,
                    #[codec(index = 5)]
                    #[doc = "No validation function upgrade is currently scheduled."]
                    NotScheduled,
                    #[codec(index = 6)]
                    #[doc = "No code upgrade has been authorized."]
                    NothingAuthorized,
                    #[codec(index = 7)]
                    #[doc = "The given code upgrade has not been authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The validation function has been scheduled to apply."]
                    ValidationFunctionStored,
                    #[codec(index = 1)]
                    #[doc = "The validation function was applied as of the contained relay chain block number."]
                    ValidationFunctionApplied {
                        relay_chain_block_num: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "The relay-chain aborted the upgrade process."]
                    ValidationFunctionDiscarded,
                    #[codec(index = 3)]
                    #[doc = "Some downward messages have been received and will be processed."]
                    DownwardMessagesReceived { count: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Downward messages were processed using the given weight."]
                    DownwardMessagesProcessed {
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        dmq_head: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 5)]
                    #[doc = "An upward message was sent to the relay chain."]
                    UpwardMessageSent {
                        message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            pub mod relay_state_snapshot {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MessagingStateSnapshot { pub dmq_mqc_head : :: subxt :: ext :: subxt_core :: utils :: H256 , pub relay_dispatch_queue_remaining_capacity : runtime_types :: cumulus_pallet_parachain_system :: relay_state_snapshot :: RelayDispatchQueueRemainingCapacity , pub ingress_channels : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v8 :: AbridgedHrmpChannel ,) > , pub egress_channels : :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < (runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: polkadot_primitives :: v8 :: AbridgedHrmpChannel ,) > , }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RelayDispatchQueueRemainingCapacity {
                    pub remaining_count: ::core::primitive::u32,
                    pub remaining_size: ::core::primitive::u32,
                }
            }
            pub mod unincluded_segment {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Ancestor < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub para_head_hash : :: core :: option :: Option < _0 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v8 :: UpgradeGoAhead > , }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct HrmpChannelUpdate {
                    pub msg_count: ::core::primitive::u32,
                    pub total_bytes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SegmentTracker < _0 > { pub used_bandwidth : runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: UsedBandwidth , pub hrmp_watermark : :: core :: option :: Option < :: core :: primitive :: u32 > , pub consumed_go_ahead_signal : :: core :: option :: Option < runtime_types :: polkadot_primitives :: v8 :: UpgradeGoAhead > , # [codec (skip)] pub __ignore : :: core :: marker :: PhantomData < _0 > }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UsedBandwidth { pub ump_msg_count : :: core :: primitive :: u32 , pub ump_total_bytes : :: core :: primitive :: u32 , pub hrmp_outgoing : :: subxt :: ext :: subxt_core :: utils :: KeyedVec < runtime_types :: polkadot_parachain_primitives :: primitives :: Id , runtime_types :: cumulus_pallet_parachain_system :: unincluded_segment :: HrmpChannelUpdate > , }
            }
        }
        pub mod cumulus_pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {}
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Downward message is invalid XCM."]
                    #[doc = "\\[ id \\]"]
                    InvalidFormat([::core::primitive::u8; 32usize]),
                    #[codec(index = 1)]
                    #[doc = "Downward message is unsupported version of XCM."]
                    #[doc = "\\[ id \\]"]
                    UnsupportedVersion([::core::primitive::u8; 32usize]),
                    #[codec(index = 2)]
                    #[doc = "Downward message executed with the given outcome."]
                    #[doc = "\\[ id, outcome \\]"]
                    ExecutedDownward(
                        [::core::primitive::u8; 32usize],
                        runtime_types::staging_xcm::v5::traits::Outcome,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Origin {
                    #[codec(index = 0)]
                    Relay,
                    #[codec(index = 1)]
                    SiblingParachain(runtime_types::polkadot_parachain_primitives::primitives::Id),
                }
            }
        }
        pub mod cumulus_pallet_xcmp_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 1)]
                    #[doc = "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    suspend_xcm_execution,
                    #[codec(index = 2)]
                    #[doc = "Resumes all XCM executions for the XCMP queue."]
                    #[doc = ""]
                    #[doc = "Note that this function doesn't change the status of the in/out bound channels."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `ControllerOrigin`."]
                    resume_xcm_execution,
                    #[codec(index = 3)]
                    #[doc = "Overwrites the number of pages which must be in the queue for the other side to be"]
                    #[doc = "told to suspend their sending."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.suspend_value`"]
                    update_suspend_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Overwrites the number of pages which must be in the queue after which we drop any"]
                    #[doc = "further messages from the channel."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.drop_threshold`"]
                    update_drop_threshold { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "Overwrites the number of pages which the queue must be reduced to before it signals"]
                    #[doc = "that message sending may recommence after it has been suspended."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must pass `Root`."]
                    #[doc = "- `new`: Desired value for `QueueConfigData.resume_threshold`"]
                    update_resume_threshold { new: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Setting the queue config failed since one of its values was invalid."]
                    BadQueueConfig,
                    #[codec(index = 1)]
                    #[doc = "The execution is already suspended."]
                    AlreadySuspended,
                    #[codec(index = 2)]
                    #[doc = "The execution is already resumed."]
                    AlreadyResumed,
                    #[codec(index = 3)]
                    #[doc = "There are too many active outbound channels."]
                    TooManyActiveOutboundChannels,
                    #[codec(index = 4)]
                    #[doc = "The message is too big."]
                    TooBig,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An HRMP message was sent to a sibling parachain."]
                    XcmpMessageSent {
                        message_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct OutboundChannelDetails {
                pub recipient: runtime_types::polkadot_parachain_primitives::primitives::Id,
                pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
                pub signals_exist: ::core::primitive::bool,
                pub first_index: ::core::primitive::u16,
                pub last_index: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum OutboundState {
                #[codec(index = 0)]
                Ok,
                #[codec(index = 1)]
                Suspended,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct QueueConfigData {
                pub suspend_threshold: ::core::primitive::u32,
                pub drop_threshold: ::core::primitive::u32,
                pub resume_threshold: ::core::primitive::u32,
            }
        }
        pub mod cumulus_primitives_core {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum AggregateMessageOrigin {
                #[codec(index = 0)]
                Here,
                #[codec(index = 1)]
                Parent,
                #[codec(index = 2)]
                Sibling(runtime_types::polkadot_parachain_primitives::primitives::Id),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CollationInfo {
                pub upward_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
                    ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                >,
                pub horizontal_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
                    runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
                        runtime_types::polkadot_parachain_primitives::primitives::Id,
                    >,
                >,
                pub new_validation_code: ::core::option::Option<
                    runtime_types::polkadot_parachain_primitives::primitives::ValidationCode,
                >,
                pub processed_downward_messages: ::core::primitive::u32,
                pub hrmp_watermark: ::core::primitive::u32,
                pub head_data: runtime_types::polkadot_parachain_primitives::primitives::HeadData,
            }
        }
        pub mod cumulus_primitives_parachain_inherent {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct MessageQueueChain(pub ::subxt::ext::subxt_core::utils::H256);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ParachainInherentData {
                pub validation_data:
                    runtime_types::polkadot_primitives::v8::PersistedValidationData<
                        ::subxt::ext::subxt_core::utils::H256,
                        ::core::primitive::u32,
                    >,
                pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
                pub downward_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
                    runtime_types::polkadot_core_primitives::InboundDownwardMessage<
                        ::core::primitive::u32,
                    >,
                >,
                pub horizontal_messages: ::subxt::ext::subxt_core::utils::KeyedVec<
                    runtime_types::polkadot_parachain_primitives::primitives::Id,
                    ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::polkadot_core_primitives::InboundHrmpMessage<
                            ::core::primitive::u32,
                        >,
                    >,
                >,
            }
        }
        pub mod cumulus_primitives_storage_weight_reclaim {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct StorageWeightReclaim;
        }
        pub mod frame_metadata_hash_extension {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CheckMetadataHash {
                pub mode: runtime_types::frame_metadata_hash_extension::Mode,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Mode {
                #[codec(index = 0)]
                Disabled,
                #[codec(index = 1)]
                Enabled,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PostDispatchInfo {
                    pub actual_weight:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod messages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum ProcessMessageError {
                        #[codec(index = 0)]
                        BadFormat,
                        #[codec(index = 1)]
                        Corrupt,
                        #[codec(index = 2)]
                        Unsupported,
                        #[codec(index = 3)]
                        Overweight(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 4)]
                        Yield,
                        #[codec(index = 5)]
                        StackLimitReached,
                    }
                }
                pub mod preimages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Bounded<_0, _1> {
                        #[codec(index = 0)]
                        Legacy {
                            hash: ::subxt::ext::subxt_core::utils::H256,
                        },
                        #[codec(index = 1)]
                        Inline(
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Lookup {
                            hash: ::subxt::ext::subxt_core::utils::H256,
                            len: ::core::primitive::u32,
                        },
                        __Ignore(::core::marker::PhantomData<(_0, _1)>),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod fungible {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                            :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                        #[codec(dumb_trait_bound)]
                        #[decode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                        )]
                        #[encode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                        )]
                        pub struct HoldConsideration(pub ::core::primitive::u128);
                    }
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                            :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                        #[codec(dumb_trait_bound)]
                        #[decode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                        )]
                        #[encode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                        )]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                        #[derive(
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                            :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                        #[codec(dumb_trait_bound)]
                        #[decode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                        )]
                        #[encode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                        )]
                        pub struct IdAmount<_0, _1> {
                            pub id: _0,
                            pub amount: _1,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "Can be executed by every `origin`."]
                    remark {
                        remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "Set the new runtime code."]
                    set_code {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                    #[doc = "version!"]
                    set_code_without_checks {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                    #[doc = "later."]
                    #[doc = ""]
                    #[doc = "This call requires Root origin."]
                    authorize_upgrade {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 10)]
                    #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                    #[doc = "later."]
                    #[doc = ""]
                    #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                    #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                    #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                    #[doc = ""]
                    #[doc = "This call requires Root origin."]
                    authorize_upgrade_without_checks {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 11)]
                    #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                    #[doc = ""]
                    #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                    #[doc = "remains unchanged and that the spec version has increased."]
                    #[doc = ""]
                    #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                    #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                    #[doc = ""]
                    #[doc = "All origins are allowed."]
                    apply_authorized_upgrade {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                    #[codec(index = 6)]
                    #[doc = "A multi-block migration is ongoing and prevents the current code from being replaced."]
                    MultiBlockMigrationsOngoing,
                    #[codec(index = 7)]
                    #[doc = "No upgrade authorized."]
                    NothingAuthorized,
                    #[codec(index = 8)]
                    #[doc = "The submitted code is not authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_system::DispatchEventInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_system::DispatchEventInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: runtime_types::account::AccountId20,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "An upgrade was authorized."]
                    UpgradeAuthorized {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                        check_version: ::core::primitive::bool,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CodeUpgradeAuthorization {
                pub code_hash: ::subxt::ext::subxt_core::utils::H256,
                pub check_version: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DispatchEventInfo {
                pub weight: runtime_types::sp_weights::weight_v2::Weight,
                pub class: runtime_types::frame_support::dispatch::DispatchClass,
                pub pays_fee: runtime_types::frame_support::dispatch::Pays,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod mainnet_runtime {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 16)]
                Council(
                    runtime_types::pallet_collective::RawOrigin<
                        runtime_types::account::AccountId20,
                    >,
                ),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ProxyType {
                #[codec(index = 0)]
                Any,
                #[codec(index = 1)]
                NonTransfer,
                #[codec(index = 2)]
                CancelProxy,
                #[codec(index = 3)]
                Balances,
                #[codec(index = 4)]
                RestrictProxyManagement,
                #[codec(index = 5)]
                Staking,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 3)]
                ParachainInfo(runtime_types::staging_parachain_info::pallet::Call),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 5)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 6)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 7)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 12)]
                Nfts(runtime_types::pallet_nfts::pallet::Call),
                #[codec(index = 13)]
                Marketplace(runtime_types::pallet_marketplace::pallet::Call),
                #[codec(index = 14)]
                Multibatching(runtime_types::pallet_multibatching::pallet::Call),
                #[codec(index = 15)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 16)]
                Council(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 17)]
                Democracy(runtime_types::pallet_democracy::pallet::Call),
                #[codec(index = 18)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 21)]
                CollatorStaking(runtime_types::pallet_collator_staking::pallet::Call),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Call),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Call),
                #[codec(index = 33)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
                #[codec(index = 40)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 41)]
                Vesting(runtime_types::pallet_vesting::pallet::Call),
                #[codec(index = 50)]
                Escrow(runtime_types::pallet_escrow::pallet::Call),
                #[codec(index = 51)]
                MythProxy(runtime_types::pallet_myth_proxy::pallet::Call),
                #[codec(index = 52)]
                Dmarket(runtime_types::pallet_dmarket::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 5)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
                #[codec(index = 6)]
                Preimage(runtime_types::pallet_preimage::pallet::Error),
                #[codec(index = 7)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Error),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 12)]
                Nfts(runtime_types::pallet_nfts::pallet::Error),
                #[codec(index = 13)]
                Marketplace(runtime_types::pallet_marketplace::pallet::Error),
                #[codec(index = 14)]
                Multibatching(runtime_types::pallet_multibatching::pallet::Error),
                #[codec(index = 15)]
                Sudo(runtime_types::pallet_sudo::pallet::Error),
                #[codec(index = 16)]
                Council(runtime_types::pallet_collective::pallet::Error),
                #[codec(index = 17)]
                Democracy(runtime_types::pallet_democracy::pallet::Error),
                #[codec(index = 18)]
                Treasury(runtime_types::pallet_treasury::pallet::Error),
                #[codec(index = 21)]
                CollatorStaking(runtime_types::pallet_collator_staking::pallet::Error),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Error),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
                #[codec(index = 33)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Error),
                #[codec(index = 40)]
                Proxy(runtime_types::pallet_proxy::pallet::Error),
                #[codec(index = 41)]
                Vesting(runtime_types::pallet_vesting::pallet::Error),
                #[codec(index = 50)]
                Escrow(runtime_types::pallet_escrow::pallet::Error),
                #[codec(index = 51)]
                MythProxy(runtime_types::pallet_myth_proxy::pallet::Error),
                #[codec(index = 52)]
                Dmarket(runtime_types::pallet_dmarket::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 1)]
                ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 5)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 6)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 7)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 10)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 11)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 12)]
                Nfts(runtime_types::pallet_nfts::pallet::Event),
                #[codec(index = 13)]
                Marketplace(runtime_types::pallet_marketplace::pallet::Event),
                #[codec(index = 14)]
                Multibatching(runtime_types::pallet_multibatching::pallet::Event),
                #[codec(index = 15)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 16)]
                Council(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 17)]
                Democracy(runtime_types::pallet_democracy::pallet::Event),
                #[codec(index = 18)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 21)]
                CollatorStaking(runtime_types::pallet_collator_staking::pallet::Event),
                #[codec(index = 22)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 30)]
                XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
                #[codec(index = 31)]
                PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
                #[codec(index = 32)]
                CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
                #[codec(index = 33)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
                #[codec(index = 40)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 41)]
                Vesting(runtime_types::pallet_vesting::pallet::Event),
                #[codec(index = 50)]
                Escrow(runtime_types::pallet_escrow::pallet::Event),
                #[codec(index = 51)]
                MythProxy(runtime_types::pallet_myth_proxy::pallet::Event),
                #[codec(index = 52)]
                Dmarket(runtime_types::pallet_dmarket::pallet::Event),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeFreezeReason {
                #[codec(index = 21)]
                CollatorStaking(runtime_types::pallet_collator_staking::pallet::FreezeReason),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeHoldReason {
                #[codec(index = 6)]
                Preimage(runtime_types::pallet_preimage::pallet::HoldReason),
                #[codec(index = 13)]
                Marketplace(runtime_types::pallet_marketplace::pallet::HoldReason),
                #[codec(index = 16)]
                Council(runtime_types::pallet_collective::pallet::HoldReason),
                #[codec(index = 50)]
                Escrow(runtime_types::pallet_escrow::pallet::HoldReason),
                #[codec(index = 51)]
                MythProxy(runtime_types::pallet_myth_proxy::pallet::HoldReason),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SessionKeys {
                pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    transfer_allow_death {
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Exactly as `transfer_allow_death`, except the origin must be root and the source account"]
                    #[doc = "may be specified."]
                    force_transfer {
                        source: runtime_types::account::AccountId20,
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not"]
                    #[doc = "kill the origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer_allow_death`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true)."]
                    transfer_all {
                        dest: runtime_types::account::AccountId20,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Unreserve some balance from a user by force."]
                    #[doc = ""]
                    #[doc = "Can only be called by ROOT."]
                    force_unreserve {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Upgrade a specified account."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `Signed`."]
                    #[doc = "- `who`: The account to be upgraded."]
                    #[doc = ""]
                    #[doc = "This will waive the transaction fee if at least all but 10% of the accounts needed to"]
                    #[doc = "be upgraded. (We let some not have to be upgraded just in order to allow for the"]
                    #[doc = "possibility of churn)."]
                    upgrade_accounts {
                        who: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set the regular balance of a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    force_set_balance {
                        who: runtime_types::account::AccountId20,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Adjust the total issuance in a saturating way."]
                    #[doc = ""]
                    #[doc = "Can only be called by root and always needs a positive `delta`."]
                    #[doc = ""]
                    #[doc = "# Example"]
                    force_adjust_total_issuance {
                        direction: runtime_types::pallet_balances::types::AdjustmentDirection,
                        #[codec(compact)]
                        delta: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Burn the specified liquid free balance from the origin account."]
                    #[doc = ""]
                    #[doc = "If the origin's account ends up below the existential deposit as a result"]
                    #[doc = "of the burn and `keep_alive` is false, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,"]
                    #[doc = "this `burn` operation will reduce total issuance by the amount _burned_."]
                    burn {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        keep_alive: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value."]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal."]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value."]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit."]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account."]
                    Expendability,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account."]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist."]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed `MaxReserves`."]
                    TooManyReserves,
                    #[codec(index = 8)]
                    #[doc = "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."]
                    TooManyHolds,
                    #[codec(index = 9)]
                    #[doc = "Number of freezes exceed `MaxFreezes`."]
                    TooManyFreezes,
                    #[codec(index = 10)]
                    #[doc = "The issuance cannot be modified since it is already deactivated."]
                    IssuanceDeactivated,
                    #[codec(index = 11)]
                    #[doc = "The delta cannot be zero."]
                    DeltaZero,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: runtime_types::account::AccountId20,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: runtime_types::account::AccountId20,
                        free: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Some amount was minted into an account."]
                    Minted {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some amount was burned from an account."]
                    Burned {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some amount was suspended from an account (it can be restored later)."]
                    Suspended {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Some amount was restored into an account."]
                    Restored {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "An account was upgraded."]
                    Upgraded {
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
                    Issued { amount: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
                    Rescinded { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "Some balance was locked."]
                    Locked {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "Some balance was unlocked."]
                    Unlocked {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Some balance was frozen."]
                    Frozen {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "Some balance was thawed."]
                    Thawed {
                        who: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 21)]
                    #[doc = "The `TotalIssuance` was forcefully changed."]
                    TotalIssuanceForced {
                        old: ::core::primitive::u128,
                        new: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountData<_0> {
                    pub free: _0,
                    pub reserved: _0,
                    pub frozen: _0,
                    pub flags: runtime_types::pallet_balances::types::ExtraFlags,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum AdjustmentDirection {
                    #[codec(index = 0)]
                    Increase,
                    #[codec(index = 1)]
                    Decrease,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BalanceLock<_0> {
                    pub id: [::core::primitive::u8; 8usize],
                    pub amount: _0,
                    pub reasons: runtime_types::pallet_balances::types::Reasons,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ExtraFlags(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Reasons {
                    #[codec(index = 0)]
                    Fee,
                    #[codec(index = 1)]
                    Misc,
                    #[codec(index = 2)]
                    All,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ReserveData<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
            }
        }
        pub mod pallet_collator_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the list of invulnerable (fixed) collators. These collators must:"]
                    #[doc = "  - Have registered session keys."]
                    #[doc = "  - Not currently be collator candidates (the call will fail if an entry is already a candidate)."]
                    #[doc = ""]
                    #[doc = "If the provided list is empty, it also ensures that the total number of eligible collators"]
                    #[doc = "does not fall below the configured minimum."]
                    #[doc = ""]
                    #[doc = "This call does not inherently maintain mutual exclusivity with `Candidates`, but in practice,"]
                    #[doc = "accounts that are already candidates will be rejected. If you need to convert a candidate"]
                    #[doc = "to be invulnerable, remove them from the set of candidates first, then call this function."]
                    #[doc = ""]
                    #[doc = "Must be called by the `UpdateOrigin`."]
                    set_invulnerables {
                        new: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the ideal number of collators. If lowering this number, then the"]
                    #[doc = "number of running collators could be higher than this figure. Aside from that edge case,"]
                    #[doc = "there should be no other way to have more candidates than the desired number."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    set_desired_candidates { max: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "Set the candidacy bond amount, which represents the required amount to reserve for an"]
                    #[doc = "account to become a candidate. The candidacy bond does not count as stake."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    set_min_candidacy_bond { bond: ::core::primitive::u128 },
                    #[codec(index = 3)]
                    #[doc = "Register this account as a collator candidate. The account must (a) already have"]
                    #[doc = "registered session keys and (b) be able to reserve the `CandidacyBond`."]
                    #[doc = "The `CandidacyBond` amount is automatically reserved from the balance of the caller."]
                    #[doc = ""]
                    #[doc = "This call is not available to `Invulnerable` collators."]
                    register_as_candidate { bond: ::core::primitive::u128 },
                    #[codec(index = 4)]
                    #[doc = "Deregister `origin` as a collator candidate. No rewards will be delivered to this"]
                    #[doc = "candidate and its stakers after this moment."]
                    #[doc = ""]
                    #[doc = "This call will fail if the total number of candidates would drop below `MinEligibleCollators`."]
                    leave_intent,
                    #[codec(index = 5)]
                    #[doc = "Add a new account `who` to the list of `Invulnerables` collators. `who` must have"]
                    #[doc = "registered session keys. If `who` is a candidate, the operation will be aborted."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    add_invulnerable {
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must"]
                    #[doc = "be sorted."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    remove_invulnerable {
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 7)]
                    #[doc = "Allows a user to stake on a set of collator candidates."]
                    #[doc = ""]
                    #[doc = "The call will fail if:"]
                    #[doc = "    - `origin` does not have the at least [`MinStake`] deposited in the candidate."]
                    #[doc = "    - one of the `targets` is not in the [`Candidates`] map."]
                    #[doc = "    - the user does not have sufficient locked balance to stake."]
                    #[doc = "    - zero targets are passed."]
                    stake {
                        targets: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_collator_staking::pallet::StakeTarget<
                                runtime_types::account::AccountId20,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "Removes stake from a collator candidate."]
                    #[doc = ""]
                    #[doc = "The amount unstaked will remain locked if the stake was removed from a candidate."]
                    unstake_from {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 9)]
                    #[doc = "Removes all stake of a user from all candidates."]
                    #[doc = ""]
                    #[doc = "The amount unstaked from candidates will remain locked."]
                    unstake_all,
                    #[codec(index = 10)]
                    #[doc = "Releases all pending [`ReleaseRequest`] and candidacy bond for a given account."]
                    #[doc = ""]
                    #[doc = "This will unlock all funds in [`ReleaseRequest`] that have already expired."]
                    release,
                    #[codec(index = 11)]
                    #[doc = "Sets the percentage of rewards that should be auto-compounded."]
                    #[doc = ""]
                    #[doc = "This operation will also claim all pending rewards."]
                    #[doc = "Rewards will be autocompounded when calling the `claim_rewards` extrinsic."]
                    set_autocompound_percentage {
                        percent: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 12)]
                    #[doc = "Sets the percentage of rewards that collators will take for producing blocks."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    set_collator_reward_percentage {
                        percent: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 13)]
                    #[doc = "Sets the extra rewards for producing blocks. Once the session finishes, the provided amount times"]
                    #[doc = "the total number of blocks produced during the session will be transferred from the given account"]
                    #[doc = "to the pallet's pot account to be distributed as rewards."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    set_extra_reward {
                        extra_reward: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Sets minimum amount that can be staked on a candidate."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    set_minimum_stake {
                        new_min_stake: ::core::primitive::u128,
                    },
                    #[codec(index = 15)]
                    #[doc = "Stops the extra rewards."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be the `UpdateOrigin`."]
                    stop_extra_reward,
                    #[codec(index = 16)]
                    #[doc = "Transfers funds to the extra reward pot account for distribution."]
                    #[doc = ""]
                    #[doc = "**Parameters**:"]
                    #[doc = "- `origin`: Signed account initiating the transfer."]
                    #[doc = "- `amount`: Amount to transfer."]
                    #[doc = ""]
                    #[doc = "**Errors**:"]
                    #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                    top_up_extra_rewards { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "Locks free balance from the caller to be used for staking."]
                    #[doc = ""]
                    #[doc = "**Parameters**:"]
                    #[doc = "- `origin`: Signed account initiating the lock."]
                    #[doc = "- `amount`: Amount to lock."]
                    #[doc = ""]
                    #[doc = "**Errors**:"]
                    #[doc = "- `Error::<T>::InvalidFundingAmount`: Amount is zero."]
                    lock { amount: ::core::primitive::u128 },
                    #[codec(index = 18)]
                    #[doc = "Adds staked funds to the [`ReleaseRequest`] queue."]
                    #[doc = ""]
                    #[doc = "Funds will actually be released after [`StakeUnlockDelay`]."]
                    unlock {
                        maybe_amount: ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 19)]
                    #[doc = "Updates the candidacy bond for this candidate."]
                    #[doc = ""]
                    #[doc = "For this operation to succeed, the caller must:"]
                    #[doc = "  - Be a candidate."]
                    #[doc = "  - Have sufficient free balance to be locked."]
                    update_candidacy_bond { amount: ::core::primitive::u128 },
                    #[codec(index = 20)]
                    #[doc = "Claims all pending rewards for stakers and candidates."]
                    #[doc = ""]
                    #[doc = "Distributes rewards accumulated over previous sessions"]
                    #[doc = "and ensures that rewards are only claimable for sessions where the"]
                    #[doc = "caller has participated. Rewards for the current session cannot be claimed."]
                    #[doc = ""]
                    #[doc = "**Errors**:"]
                    #[doc = "- `Error::<T>::NoPendingClaim`: Caller has no rewards to claim."]
                    claim_rewards,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CandidacyBondRelease<_0, _1> {
                    pub bond: _0,
                    pub block: _1,
                    pub reason:
                        runtime_types::pallet_collator_staking::pallet::CandidacyBondReleaseReason,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum CandidacyBondReleaseReason {
                    #[codec(index = 0)]
                    Idle,
                    #[codec(index = 1)]
                    Left,
                    #[codec(index = 2)]
                    Replaced,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CandidateInfo<_0> {
                    pub stake: _0,
                    pub stakers: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CandidateStakeInfo<_0> {
                    pub session: ::core::primitive::u32,
                    pub stake: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The pallet has too many candidates."]
                    TooManyCandidates,
                    #[codec(index = 1)]
                    #[doc = "Leaving would result in too few candidates."]
                    TooFewEligibleCollators,
                    #[codec(index = 2)]
                    #[doc = "Account is already a candidate."]
                    AlreadyCandidate,
                    #[codec(index = 3)]
                    #[doc = "Account is not a candidate."]
                    NotCandidate,
                    #[codec(index = 4)]
                    #[doc = "There are too many Invulnerables."]
                    TooManyInvulnerables,
                    #[codec(index = 5)]
                    #[doc = "At least one of the invulnerables is duplicated"]
                    DuplicatedInvulnerables,
                    #[codec(index = 6)]
                    #[doc = "Account is already an Invulnerable."]
                    AlreadyInvulnerable,
                    #[codec(index = 7)]
                    #[doc = "Account is not an Invulnerable."]
                    NotInvulnerable,
                    #[codec(index = 8)]
                    #[doc = "Account has no associated validator ID."]
                    NoAssociatedCollatorId,
                    #[codec(index = 9)]
                    #[doc = "Collator ID is not yet registered."]
                    CollatorNotRegistered,
                    #[codec(index = 10)]
                    #[doc = "Amount not sufficient to be staked."]
                    InsufficientStake,
                    #[codec(index = 11)]
                    #[doc = "DesiredCandidates is out of bounds."]
                    TooManyDesiredCandidates,
                    #[codec(index = 12)]
                    #[doc = "Too many unstaking requests. Claim some of them first."]
                    TooManyReleaseRequests,
                    #[codec(index = 13)]
                    #[doc = "Invalid value for MinStake. It must be lower than or equal to `MinStake`."]
                    InvalidMinStake,
                    #[codec(index = 14)]
                    #[doc = "Invalid value for CandidacyBond. It must be higher than or equal to `MinCandidacyBond`."]
                    InvalidCandidacyBond,
                    #[codec(index = 15)]
                    #[doc = "Number of staked candidates is greater than `MaxStakedCandidates`."]
                    TooManyStakedCandidates,
                    #[codec(index = 16)]
                    #[doc = "Extra reward cannot be zero."]
                    InvalidExtraReward,
                    #[codec(index = 17)]
                    #[doc = "Extra rewards are already zero."]
                    ExtraRewardAlreadyDisabled,
                    #[codec(index = 18)]
                    #[doc = "The amount to fund the extra reward pot must be greater than zero."]
                    InvalidFundingAmount,
                    #[codec(index = 19)]
                    #[doc = "Cannot add more stakers to a given candidate."]
                    TooManyStakers,
                    #[codec(index = 20)]
                    #[doc = "The user does not have enough balance to be locked for staking."]
                    InsufficientFreeBalance,
                    #[codec(index = 21)]
                    #[doc = "The user does not have enough locked balance to stake."]
                    InsufficientLockedBalance,
                    #[codec(index = 22)]
                    #[doc = "Cannot unlock such amount."]
                    CannotUnlock,
                    #[codec(index = 23)]
                    #[doc = "User must stake at least on one candidate."]
                    TooFewCandidates,
                    #[codec(index = 24)]
                    #[doc = "Rewards from previous sessions have not yet been claimed."]
                    PreviousRewardsNotClaimed,
                    #[codec(index = 25)]
                    #[doc = "User has not Staked on the given Candidate."]
                    NoStakeOnCandidate,
                    #[codec(index = 26)]
                    #[doc = "No rewards to claim as previous claim happened on the same session."]
                    NoPendingClaim,
                    #[codec(index = 27)]
                    #[doc = "Candidate has not been removed in the current session."]
                    NotRemovedCandidate,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New Invulnerables were set."]
                    NewInvulnerables {
                        invulnerables: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "A new Invulnerable was added."]
                    InvulnerableAdded {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "An Invulnerable was removed."]
                    InvulnerableRemoved {
                        account_id: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "The number of desired candidates was set."]
                    NewDesiredCandidates {
                        desired_candidates: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "The minimum candidacy bond was set."]
                    NewMinCandidacyBond {
                        bond_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "A new candidate joined."]
                    CandidateAdded {
                        account: runtime_types::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "A candidate was removed."]
                    CandidateRemoved {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 7)]
                    #[doc = "An account was unable to be added to the Invulnerables because they did not have keys"]
                    #[doc = "registered. Other Invulnerables may have been set."]
                    InvalidInvulnerableSkipped {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "A staker added stake to a candidate."]
                    StakeAdded {
                        account: runtime_types::account::AccountId20,
                        candidate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Stake was claimed after a penalty period."]
                    StakeReleased {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "An unstake request was created."]
                    ReleaseRequestCreated {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                        block: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "A staker removed stake from a candidate"]
                    StakeRemoved {
                        account: runtime_types::account::AccountId20,
                        candidate: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "A staking reward was delivered."]
                    StakingRewardReceived {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Autocompound percentage was set."]
                    AutoCompoundPercentageSet {
                        account: runtime_types::account::AccountId20,
                        percentage: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 14)]
                    #[doc = "Autocompounding was disabled."]
                    AutoCompoundDisabled {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "Collator reward percentage was set."]
                    CollatorRewardPercentageSet {
                        percentage: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 16)]
                    #[doc = "The extra reward was set."]
                    ExtraRewardSet { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "The extra reward was removed."]
                    ExtraRewardRemoved {
                        amount_left: ::core::primitive::u128,
                        receiver: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 18)]
                    #[doc = "The minimum amount to stake was changed."]
                    NewMinStake { min_stake: ::core::primitive::u128 },
                    #[codec(index = 19)]
                    #[doc = "A session just ended."]
                    SessionEnded {
                        index: ::core::primitive::u32,
                        rewards: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "The extra reward pot account was funded."]
                    ExtraRewardPotFunded {
                        pot: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 21)]
                    #[doc = "The staking locked amount got extended."]
                    LockExtended {
                        account: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 22)]
                    #[doc = "A candidate's candidacy bond got updated."]
                    CandidacyBondUpdated {
                        candidate: runtime_types::account::AccountId20,
                        new_bond: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum FreezeReason {
                    #[codec(index = 0)]
                    Staking,
                    #[codec(index = 1)]
                    CandidacyBond,
                    #[codec(index = 2)]
                    Releasing,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ReleaseRequest<_0, _1> {
                    pub block: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SessionInfo<_0, _1> {
                    pub rewards: _1,
                    pub claimed_rewards: _1,
                    pub candidates: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct StakeTarget<_0, _1> {
                    pub candidate: _0,
                    pub stake: _1,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UserStakeInfo<_0, _1, _2> {
                    pub stake: _1,
                    pub maybe_last_unstake: ::core::option::Option<(_1, _2)>,
                    pub candidates: _0,
                    pub maybe_last_reward_session: ::core::option::Option<_2>,
                }
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                        prime: ::core::option::Option<runtime_types::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Disapprove the proposal and burn the cost held for storing this proposal."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: must be the `KillOrigin`."]
                    #[doc = "- `proposal_hash`: The hash of the proposal that should be killed."]
                    #[doc = ""]
                    #[doc = "Emits `Killed` and `ProposalCostBurned` if any cost was held for a given proposal."]
                    kill {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Release the cost held for storing a proposal once the given proposal is completed."]
                    #[doc = ""]
                    #[doc = "If there is no associated cost for the given proposal, this call will have no effect."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: must be `Signed` or `Root`."]
                    #[doc = "- `proposal_hash`: The hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Emits `ProposalCostReleased` if any cost held for a given proposal."]
                    release_proposal_cost {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                    #[codec(index = 10)]
                    #[doc = "Prime account is not a member"]
                    PrimeAccountNotMember,
                    #[codec(index = 11)]
                    #[doc = "Proposal is still active."]
                    ProposalActive,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A proposal was killed."]
                    Killed {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some cost for storing a proposal was burned."]
                    ProposalCostBurned {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        who: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some cost for storing a proposal was released."]
                    ProposalCostReleased {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        who: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    ProposalSubmission,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                pub nays: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Propose a sensitive action to be taken."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender must"]
                    #[doc = "have funds to cover the deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the proposal preimage."]
                    #[doc = "- `value`: The amount of deposit (must be at least `MinimumDeposit`)."]
                    #[doc = ""]
                    #[doc = "Emits `Proposed`."]
                    propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::mainnet_runtime::RuntimeCall,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Signals agreement with a particular proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the sender"]
                    #[doc = "must have funds to cover the deposit, equal to the original deposit."]
                    #[doc = ""]
                    #[doc = "- `proposal`: The index of the proposal to second."]
                    second {
                        #[codec(compact)]
                        proposal: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;"]
                    #[doc = "otherwise it is a vote to keep the status quo."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to vote for."]
                    #[doc = "- `vote`: The vote configuration."]
                    vote {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancellationOrigin`."]
                    #[doc = ""]
                    #[doc = "-`ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    emergency_cancel { ref_index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "Schedule a referendum to be tabled once it is legal to schedule an external"]
                    #[doc = "referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `ExternalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    external_propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::mainnet_runtime::RuntimeCall,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a majority-carries referendum to be tabled next once it is legal to schedule"]
                    #[doc = "an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalMajorityOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_majority {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::mainnet_runtime::RuntimeCall,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to"]
                    #[doc = "schedule an external referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `ExternalDefaultOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal."]
                    #[doc = ""]
                    #[doc = "Unlike `external_propose`, blacklisting has no effect on this and it may replace a"]
                    #[doc = "pre-scheduled `external_propose` call."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    external_propose_default {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::mainnet_runtime::RuntimeCall,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Schedule the currently externally-proposed majority-carries referendum to be tabled"]
                    #[doc = "immediately. If there is no externally-proposed referendum currently, or if there is one"]
                    #[doc = "but it is not a majority-carries referendum then it fails."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `FastTrackOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The hash of the current external proposal."]
                    #[doc = "- `voting_period`: The period that is allowed for voting on this proposal. Increased to"]
                    #[doc = "\tMust be always greater than zero."]
                    #[doc = "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`."]
                    #[doc = "- `delay`: The number of block after voting has ended in approval and this should be"]
                    #[doc = "  enacted. This doesn't have a minimum amount."]
                    #[doc = ""]
                    #[doc = "Emits `Started`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    fast_track {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        voting_period: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Veto and blacklist the external proposal hash."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `VetoOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist."]
                    #[doc = ""]
                    #[doc = "Emits `Vetoed`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(V + log(V))` where V is number of `existing vetoers`"]
                    veto_external {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Remove a referendum."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `ref_index`: The index of the referendum to cancel."]
                    #[doc = ""]
                    #[doc = "# Weight: `O(1)`."]
                    cancel_referendum {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "Delegate the voting power (with some given conviction) of the sending account."]
                    #[doc = ""]
                    #[doc = "The balance delegated is locked for as long as it's delegated, and thereafter for the"]
                    #[doc = "time appropriate for the conviction's lock period."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signing account must either:"]
                    #[doc = "  - be delegating already; or"]
                    #[doc = "  - have no voting activity (if there is, then it will need to be removed/consolidated"]
                    #[doc = "    through `reap_vote` or `unvote`)."]
                    #[doc = ""]
                    #[doc = "- `to`: The account whose voting the `target` account's voting power will follow."]
                    #[doc = "- `conviction`: The conviction that will be attached to the delegated votes. When the"]
                    #[doc = "  account is undelegated, the funds will be locked for the corresponding period."]
                    #[doc = "- `balance`: The amount of the account's balance to be used in delegating. This must not"]
                    #[doc = "  be more than the account's current balance."]
                    #[doc = ""]
                    #[doc = "Emits `Delegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    delegate {
                        to: runtime_types::account::AccountId20,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Undelegate the voting power of the sending account."]
                    #[doc = ""]
                    #[doc = "Tokens may be unlocked following once an amount of time consistent with the lock period"]
                    #[doc = "of the conviction with which the delegation was issued."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_ and the signing account must be"]
                    #[doc = "currently delegating."]
                    #[doc = ""]
                    #[doc = "Emits `Undelegated`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` where R is the number of referendums the voter delegating to has"]
                    #[doc = "  voted on. Weight is charged as if maximum votes."]
                    undelegate,
                    #[codec(index = 12)]
                    #[doc = "Clears all public proposals."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`."]
                    clear_public_proposals,
                    #[codec(index = 13)]
                    #[doc = "Unlock tokens that have an expired lock."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account to remove the lock on."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R)` with R number of vote of target."]
                    unlock {
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If:"]
                    #[doc = "- the referendum was cancelled, or"]
                    #[doc = "- the referendum is ongoing, or"]
                    #[doc = "- the referendum has ended such that"]
                    #[doc = "  - the vote of the account was in opposition to the result; or"]
                    #[doc = "  - there was no conviction to the account's vote; or"]
                    #[doc = "  - the account made a split vote"]
                    #[doc = "...then the vote is removed cleanly and a following call to `unlock` may result in more"]
                    #[doc = "funds being available."]
                    #[doc = ""]
                    #[doc = "If, however, the referendum has ended and:"]
                    #[doc = "- it finished corresponding to the vote of the account, and"]
                    #[doc = "- the account made a standard vote with conviction, and"]
                    #[doc = "- the lock period of the conviction is not over"]
                    #[doc = "...then the lock will be aggregated into the overall account's lock, which may involve"]
                    #[doc = "*overlocking* (where the two locks are combined into a single lock that is the maximum"]
                    #[doc = "of both the amount locked and the time is it locked for)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_, and the signer must have a vote"]
                    #[doc = "registered for referendum `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_vote { index: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    #[doc = "Remove a vote for a referendum."]
                    #[doc = ""]
                    #[doc = "If the `target` is equal to the signer, then this function is exactly equivalent to"]
                    #[doc = "`remove_vote`. If not equal to the signer, then the vote must have expired,"]
                    #[doc = "either because the referendum was cancelled, because the voter lost the referendum or"]
                    #[doc = "because the conviction period is over."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account of the vote to be removed; this account must have voted for"]
                    #[doc = "  referendum `index`."]
                    #[doc = "- `index`: The index of referendum of the vote to be removed."]
                    #[doc = ""]
                    #[doc = "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on."]
                    #[doc = "  Weight is calculated for the maximum number of vote."]
                    remove_other_vote {
                        target: runtime_types::account::AccountId20,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    #[doc = "Permanently place a proposal into the blacklist. This prevents it from ever being"]
                    #[doc = "proposed again."]
                    #[doc = ""]
                    #[doc = "If called on a queued public or external proposal, then this will result in it being"]
                    #[doc = "removed. If the `ref_index` supplied is an active referendum with the proposal hash,"]
                    #[doc = "then it will be cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `BlacklistOrigin`."]
                    #[doc = ""]
                    #[doc = "- `proposal_hash`: The proposal hash to blacklist permanently."]
                    #[doc = "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be"]
                    #[doc = "cancelled."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a"]
                    #[doc = "  reasonable value)."]
                    blacklist {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 17)]
                    #[doc = "Remove a proposal."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be `CancelProposalOrigin`."]
                    #[doc = ""]
                    #[doc = "- `prop_index`: The index of the proposal to cancel."]
                    #[doc = ""]
                    #[doc = "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"]
                    cancel_proposal {
                        #[codec(compact)]
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "Set or clear a metadata of a proposal or a referendum."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: Must correspond to the `MetadataOwner`."]
                    #[doc = "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`"]
                    #[doc = "      threshold."]
                    #[doc = "    - `Signed` by a creator for a public proposal."]
                    #[doc = "    - `Signed` to clear a metadata for a finished referendum."]
                    #[doc = "    - `Root` to set a metadata for an ongoing referendum."]
                    #[doc = "- `owner`: an identifier of a metadata owner."]
                    #[doc = "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."]
                    set_metadata {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        maybe_hash: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Value too low"]
                    ValueLow,
                    #[codec(index = 1)]
                    #[doc = "Proposal does not exist"]
                    ProposalMissing,
                    #[codec(index = 2)]
                    #[doc = "Cannot cancel the same proposal twice"]
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    #[doc = "Proposal already made"]
                    DuplicateProposal,
                    #[codec(index = 4)]
                    #[doc = "Proposal still blacklisted"]
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    #[doc = "Next external proposal not simple majority"]
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    #[doc = "Invalid hash"]
                    InvalidHash,
                    #[codec(index = 7)]
                    #[doc = "No external proposal"]
                    NoProposal,
                    #[codec(index = 8)]
                    #[doc = "Identity may not veto a proposal twice"]
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    #[doc = "Vote given for invalid referendum"]
                    ReferendumInvalid,
                    #[codec(index = 10)]
                    #[doc = "No proposals waiting"]
                    NoneWaiting,
                    #[codec(index = 11)]
                    #[doc = "The given account did not vote on the referendum."]
                    NotVoter,
                    #[codec(index = 12)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 13)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 14)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 15)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 16)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    VotesExist,
                    #[codec(index = 17)]
                    #[doc = "The instant referendum origin is currently disallowed."]
                    InstantNotAllowed,
                    #[codec(index = 18)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 19)]
                    #[doc = "Invalid upper bound."]
                    WrongUpperBound,
                    #[codec(index = 20)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 21)]
                    #[doc = "Maximum number of items reached."]
                    TooMany,
                    #[codec(index = 22)]
                    #[doc = "Voting period too low"]
                    VotingPeriodLow,
                    #[codec(index = 23)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion has been proposed by a public account."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "A public proposal has been tabled for referendum vote."]
                    Tabled {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "An external proposal has been tabled."]
                    ExternalTabled,
                    #[codec(index = 3)]
                    #[doc = "A referendum has begun."]
                    Started {
                        ref_index: ::core::primitive::u32,
                        threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proposal has been approved by referendum."]
                    Passed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "A proposal has been rejected by referendum."]
                    NotPassed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled { ref_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "An account has delegated their vote to another account."]
                    Delegated {
                        who: runtime_types::account::AccountId20,
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "An account has cancelled a previous delegation operation."]
                    Undelegated {
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 9)]
                    #[doc = "An external proposal has been vetoed."]
                    Vetoed {
                        who: runtime_types::account::AccountId20,
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        until: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "A proposal_hash has been blacklisted permanently."]
                    Blacklisted {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 11)]
                    #[doc = "An account has voted in a referendum"]
                    Voted {
                        voter: runtime_types::account::AccountId20,
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "An account has seconded a proposal"]
                    Seconded {
                        seconder: runtime_types::account::AccountId20,
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    #[doc = "A proposal got canceled."]
                    ProposalCanceled { prop_index: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a proposal or a referendum has been set."]
                    MetadataSet {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a proposal or a referendum has been cleared."]
                    MetadataCleared {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been transferred to new owner."]
                    MetadataTransferred {
                        prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum MetadataOwner {
                    #[codec(index = 0)]
                    External,
                    #[codec(index = 1)]
                    Proposal(::core::primitive::u32),
                    #[codec(index = 2)]
                    Referendum(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum ReferendumInfo<_0, _1, _2> {
                    #[codec(index = 0)]
                    Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
                    #[codec(index = 1)]
                    Finished {
                        approved: ::core::primitive::bool,
                        end: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ReferendumStatus<_0, _1, _2> {
                    pub end: _0,
                    pub proposal: _1,
                    pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    pub delay: _0,
                    pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_democracy::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Voting<_0, _1, _2> {
                    #[codec(index = 0)]
                    Direct {
                        votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            _2,
                            runtime_types::pallet_democracy::vote::AccountVote<_0>,
                        )>,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                    #[codec(index = 1)]
                    Delegating {
                        balance: _0,
                        target: _1,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
        }
        pub mod pallet_dmarket {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the Dmarket collection."]
                    #[doc = ""]
                    #[doc = "Only the root origin can execute this function."]
                    #[doc = ""]
                    #[doc = "Precondition:"]
                    #[doc = "- The collection must already exist, otherwise the extrinsic will fail."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `collection_id`: The collectionID of the NFT collection to be set as the Dmarket Collection."]
                    #[doc = ""]
                    #[doc = ""]
                    #[doc = "Emits CollectionUpdated when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::force_set_collection` (defined in the `Config` trait)."]
                    force_set_collection {
                        collection_id: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 1)]
                    #[doc = "Execute a trade between a seller and a buyer for a specific NFT (item) in the configured DmarketCollection."]
                    #[doc = ""]
                    #[doc = "Preconditions:"]
                    #[doc = "- The seller and buyer must be different accounts."]
                    #[doc = "- The seller must be the current owner of the NFT item."]
                    #[doc = "- The trade must not be expired, and signatures provided must be valid."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `origin`: The origin of the call, which must be part of the signed message of both seller and buyer."]
                    #[doc = "- `seller`: The account ID of the seller who owns the NFT item."]
                    #[doc = "- `buyer`: The account ID of the buyer who will purchase the NFT item."]
                    #[doc = "- `trade`: The parameters of the trade, including item details, prices, and expiration times."]
                    #[doc = "- `signatures`: The signatures from both the seller and buyer authorizing the trade."]
                    #[doc = "- `fee_address`: The account ID where the transaction fee will be transferred."]
                    #[doc = ""]
                    #[doc = "Signed message schema:"]
                    #[doc = "- Ask: (domain, sender, fee_address, item, price, expiration)."]
                    #[doc = "- Bid: (domain, sender, fee_address, item, price, fee, expiration)."]
                    #[doc = ""]
                    #[doc = "Only callable if origin matches `sender` in both Ask and Bid signed messages."]
                    #[doc = ""]
                    #[doc = "Emits `Trade` event upon successful execution."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::execute_trade` (defined in the `Config` trait)."]
                    execute_trade {
                        seller: runtime_types::account::AccountId20,
                        buyer: runtime_types::account::AccountId20,
                        trade: runtime_types::pallet_dmarket::types::TradeParams<
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                        >,
                        signatures: runtime_types::pallet_dmarket::types::TradeSignatures<
                            runtime_types::account::EthereumSignature,
                        >,
                        fee_address: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The item was not found."]
                    ItemNotFound,
                    #[codec(index = 1)]
                    #[doc = "Item can only be operated by the Item owner."]
                    SellerNotItemOwner,
                    #[codec(index = 2)]
                    #[doc = "The bid with the provided parameters has already been executed."]
                    BidAlreadyExecuted,
                    #[codec(index = 3)]
                    #[doc = "The ask with the provided parameters has already been executed."]
                    AskAlreadyExecuted,
                    #[codec(index = 4)]
                    #[doc = "Buyer balance is not enough to pay for trade costs."]
                    BuyerBalanceTooLow,
                    #[codec(index = 5)]
                    #[doc = "Bid expiration timestamp must be in the future."]
                    BidExpired,
                    #[codec(index = 6)]
                    #[doc = "Ask expiration timestamp must be in the future."]
                    AskExpired,
                    #[codec(index = 7)]
                    #[doc = "The signature provided by the buyer is invalid."]
                    InvalidBuyerSignature,
                    #[codec(index = 8)]
                    #[doc = "The signature provided by the seller is invalid."]
                    InvalidSellerSignature,
                    #[codec(index = 9)]
                    #[doc = "Same buyer and seller not allowed."]
                    BuyerIsSeller,
                    #[codec(index = 10)]
                    #[doc = "Invalid Signed message."]
                    BadSignedMessage,
                    #[codec(index = 11)]
                    #[doc = "Dmarket collection already set to the provided value."]
                    CollectionAlreadyInUse,
                    #[codec(index = 12)]
                    #[doc = "Dmarket collection has not been set."]
                    CollectionNotSet,
                    #[codec(index = 13)]
                    #[doc = "The provided Dmarket collect was not found."]
                    CollectionNotFound,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The fee signer account was updated."]
                    CollectionUpdated {
                        collection_id: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 1)]
                    #[doc = "A successful trade is executed."]
                    Trade {
                        buyer: runtime_types::account::AccountId20,
                        seller: runtime_types::account::AccountId20,
                        item: ::core::primitive::u128,
                        price: ::core::primitive::u128,
                        fee: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct OrderData<_0> {
                    pub caller: _0,
                    pub fee_address: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct TradeParams<_0, _1, _2> {
                    pub price: _0,
                    pub fee: _0,
                    pub item: _1,
                    pub ask_expiration: _2,
                    pub bid_expiration: _2,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct TradeSignatures<_0> {
                    pub ask_signature: _0,
                    pub bid_signature: _0,
                }
            }
        }
        pub mod pallet_escrow {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Deposits a specified amount of funds directly into the balance of a target account by transferring from the balance of the origin."]
                    #[doc = "The deposited amount is reserved in the target account. The reserved funds can later be released partially or in full"]
                    #[doc = "by an authorized escrow agent. This function ensures that the deposit meets or exceeds the minimum required balance."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = "* `origin` - The origin of the transaction, whose balance the funds are transferred from."]
                    #[doc = "* `address` - The target account that will receive and hold the reserved funds."]
                    #[doc = "* `value` - The amount to be deposited and reserved."]
                    #[doc = "* `authorised_agent` - The agent authorized to manage and release the reserved funds."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "* `Error::<T>::DepositTooLow` if the deposit amount is below the minimum threshold."]
                    #[doc = "* `Error::<T>::BalanceTooLow` if the target account balance is below the existential deposit."]
                    deposit {
                        address: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                        authorised_agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Releases a specified amount from the reserved balance of an account to its available balance."]
                    #[doc = "This action can only be initiated by an authorized escrow agent and ensures that the release does not exceed"]
                    #[doc = "the reserved amount. This method is used primarily to reduce or clear the reservations made previously by the deposit action."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                    #[doc = "* `address` - The account holder of the deposited funds."]
                    #[doc = "* `value` - The amount to be released from the reserved balance."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "* `Error::<T>::InsufficientBalance` if the reserved balance in the account is less than the amount requested to be released."]
                    #[doc = "* `Error::<T>::NoSuchDeposit` if there is no deposit record for the given accounts, indicating that no such reserved amount exists."]
                    release {
                        address: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Revokes a reserved deposit, transferring the remaining reserved funds to a specified destination account for a specified reason."]
                    #[doc = "This function is typically used when a transaction or agreement fails to complete as planned, and the funds need to be returned or redirected."]
                    #[doc = "Only authorized agents can initiate a revocation to ensure control and security over the process."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = "* `origin` - The origin of the transaction, should be an authorized escrow agent."]
                    #[doc = "* `address` - The account from which the reserved funds will be withdrawn."]
                    #[doc = "* `destination` - The account to which the funds will be transferred."]
                    #[doc = "* `reason` - A byte vector detailing the reason for the revocation, providing transparency and traceability."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account and agent combination,"]
                    #[doc = "   indicating that no funds are available to be revoked."]
                    revoke {
                        address: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        reason: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Forcefully revokes a deposit under special conditions, overriding typical checks."]
                    #[doc = "This function is intended for emergency or administrative use where standard revocation processes are insufficient or inappropriate."]
                    #[doc = "It requires root privileges, underscoring its use in exceptional circumstances only."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = "* `origin` - The origin of the transaction, which must be a root call to ensure administrative authority."]
                    #[doc = "* `address` - The account from which reserved funds will be moved."]
                    #[doc = "* `agent` - The agent initially authorized to manage the deposit, involved for traceability and records."]
                    #[doc = "* `destination` - The account to which the funds will be transferred, potentially different from the original depositor."]
                    #[doc = "* `reason` - A byte vector detailing the reason for the forced revocation, providing necessary context for this exceptional action."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "* `Error::<T>::NoSuchDeposit` if there is no record of the reserved deposit for the given account, indicating that no funds are available to be forcibly revoked."]
                    force_release {
                        address: runtime_types::account::AccountId20,
                        agent: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "When trying to release more funds than are on deposit."]
                    InsufficientBalance,
                    #[codec(index = 1)]
                    #[doc = "When the deposit value is less then configured value."]
                    DepositTooLow,
                    #[codec(index = 2)]
                    #[doc = "When trying to release or revoke a deposit that does not exist."]
                    NoSuchDeposit,
                    #[codec(index = 3)]
                    #[doc = "When the account balance is below the existential deposit before depositing."]
                    BalanceTooLow,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A deposit was made."]
                    Deposited {
                        account: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                        agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Funds were released from a deposit."]
                    Released {
                        account: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                        agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "A deposit was revoked and all deposited funds were transfered to the destination wallet."]
                    Revoked {
                        account: runtime_types::account::AccountId20,
                        destination: runtime_types::account::AccountId20,
                        agent: runtime_types::account::AccountId20,
                        value: ::core::primitive::u128,
                        reason: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    Escrow,
                }
            }
        }
        pub mod pallet_marketplace {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the authority role, granting owner rights."]
                    #[doc = ""]
                    #[doc = "Only the root origin can execute this function."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `authority`: The account ID of the administrator to be set as the pallet's authority."]
                    #[doc = ""]
                    #[doc = "Emits AuthorityUpdated when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::force_set_authority` (defined in the `Config` trait)."]
                    force_set_authority {
                        authority: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Sets the fee signer address, allowing the designated account that signs fees."]
                    #[doc = ""]
                    #[doc = "Only an account with the authority role can execute this function."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `fee_signer`: The account ID of the fee signer to be set."]
                    #[doc = ""]
                    #[doc = "Emits `FeeSignerAddressUpdate` event upon successful execution."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::set_fee_signer_address` (defined in the `Config` trait)."]
                    set_fee_signer_address {
                        fee_signer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Allows the authority account to set the payout address, which receives fee payments from trades."]
                    #[doc = ""]
                    #[doc = "Only an account with the authority role can execute this function."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `payout_address`: The account ID of the address to be set as the payout address."]
                    #[doc = ""]
                    #[doc = "Emits `PayoutAddressUpdated` event upon successful execution."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::set_payout_address` (defined in the `Config` trait)."]
                    set_payout_address {
                        payout_address: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Create an Ask or Bid Order for a specific NFT (collection ID, Item ID)."]
                    #[doc = ""]
                    #[doc = "Asks:"]
                    #[doc = "- An owner of an NFT can create an ask on the item with a price, expiration, and signature."]
                    #[doc = "- The signature must come from the feeSigner account."]
                    #[doc = "- The expiration must be above `MinOrderDuration`."]
                    #[doc = "- After the ask is created, the NFT is locked so it can't be transferred."]
                    #[doc = ""]
                    #[doc = "Bids:"]
                    #[doc = "- A bid can be created on an existing item, with a price to pay, a fee, and expiration."]
                    #[doc = "- The signature must come from the feeSigner account."]
                    #[doc = "- The amount the bidder is willing to pay is locked from the user's Balance."]
                    #[doc = ""]
                    #[doc = "Match Exists:"]
                    #[doc = "- If a match between an Ask and Bid exists, the trade is triggered."]
                    #[doc = "- The seller receives the funds, and the bidder receives the unlocked item."]
                    #[doc = "- Fees go to payoutAddress."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `order`: The details of the order to be created (including type, collection, item, price, expiration, fee, and signature)."]
                    #[doc = "- `execution`: Execution mode to indicate whether order creation should proceed if a valid match exists."]
                    #[doc = ""]
                    #[doc = "Emits `OrderCreated` event upon successful execution."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::create_order` (defined in the `Config` trait)."]
                    create_order {
                        order: runtime_types::pallet_marketplace::types::Order<
                            runtime_types::runtime_common::IncrementableU256,
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                            ::core::primitive::u64,
                            runtime_types::account::EthereumSignature,
                            runtime_types::account::AccountId20,
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >,
                        execution: runtime_types::pallet_marketplace::types::Execution,
                    },
                    #[codec(index = 4)]
                    #[doc = "Cancellation of an Ask or Bid order."]
                    #[doc = ""]
                    #[doc = "Callable by either the authority or the order creator."]
                    #[doc = ""]
                    #[doc = "If the order is an Ask, the item is unlocked."]
                    #[doc = "If the order is a Bid, the bidder's balance is unlocked."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `order_type`: The type of the order to be canceled (Ask or Bid)."]
                    #[doc = "- `collection`: The collection ID of the NFT associated with the order."]
                    #[doc = "- `item`: The item ID of the NFT associated with the order."]
                    #[doc = "- `price`: The price associated with the order (used for Bid orders)."]
                    #[doc = ""]
                    #[doc = "Emits `OrderCanceled` event upon successful execution."]
                    #[doc = ""]
                    #[doc = "Weight: `WeightInfo::cancel_order` (defined in the `Config` trait)."]
                    cancel_order {
                        order_type: runtime_types::pallet_marketplace::types::OrderType,
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        price: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The account is not the authority."]
                    NotAuthority,
                    #[codec(index = 1)]
                    #[doc = "Tried to store an account that is already set for this storage value."]
                    AccountAlreadySet,
                    #[codec(index = 2)]
                    #[doc = "The fee signer address doesn't exist."]
                    FeeSignerAddressNotSet,
                    #[codec(index = 3)]
                    #[doc = "The payout address doesn't exist."]
                    PayoutAddressNotSet,
                    #[codec(index = 4)]
                    #[doc = "The item was not found."]
                    ItemNotFound,
                    #[codec(index = 5)]
                    #[doc = "The provided price is too low."]
                    InvalidPrice,
                    #[codec(index = 6)]
                    #[doc = "Expiration time provided is too low."]
                    InvalidExpiration,
                    #[codec(index = 7)]
                    #[doc = "Fee percent provided is too low."]
                    InvalidFeePercent,
                    #[codec(index = 8)]
                    #[doc = "Ask or Bid with the same characteristics already exists."]
                    OrderAlreadyExists,
                    #[codec(index = 9)]
                    #[doc = "A valid match must exist to execute the order."]
                    ValidMatchMustExist,
                    #[codec(index = 10)]
                    #[doc = "Item can only be operated by the Item owner."]
                    NotItemOwner,
                    #[codec(index = 11)]
                    #[doc = "Invalid Signed message."]
                    BadSignedMessage,
                    #[codec(index = 12)]
                    #[doc = "The Item is already locked and can't be used."]
                    ItemAlreadyLocked,
                    #[codec(index = 13)]
                    #[doc = "Nonce has already been used."]
                    AlreadyUsedNonce,
                    #[codec(index = 14)]
                    #[doc = "The item is already owned by the account trying to bid on it."]
                    BidOnOwnedItem,
                    #[codec(index = 15)]
                    #[doc = "Not allowed for the buyer of an item to be the same as the seller."]
                    BuyerIsSeller,
                    #[codec(index = 16)]
                    #[doc = "The ask is already past its expiration time."]
                    OrderExpired,
                    #[codec(index = 17)]
                    #[doc = "The order was not found."]
                    OrderNotFound,
                    #[codec(index = 18)]
                    #[doc = "User Balance is insufficient for the required action."]
                    InsufficientFunds,
                    #[codec(index = 19)]
                    #[doc = "The caller is not the order creator or the admin account of the pallet."]
                    NotOrderCreatorOrAdmin,
                    #[codec(index = 20)]
                    #[doc = "The provided nonce had an invalid size."]
                    BadNonce,
                    #[codec(index = 21)]
                    #[doc = "An overflow happened."]
                    Overflow,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The pallet's authority was updated."]
                    AuthorityUpdated {
                        authority: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "The fee signer account was updated."]
                    FeeSignerAddressUpdate {
                        fee_signer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "The payout address account was updated."]
                    PayoutAddressUpdated {
                        payout_address: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "An Ask/Bid order was created."]
                    OrderCreated {
                        who: runtime_types::account::AccountId20,
                        order_type: runtime_types::pallet_marketplace::types::OrderType,
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        price: ::core::primitive::u128,
                        expires_at: ::core::primitive::u64,
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "A trade of Ask and Bid was executed."]
                    OrderExecuted {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        seller: runtime_types::account::AccountId20,
                        buyer: runtime_types::account::AccountId20,
                        price: ::core::primitive::u128,
                        seller_fee: ::core::primitive::u128,
                        buyer_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "The order was canceled by the order creator or the pallet's authority."]
                    OrderCanceled {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        who: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    MarketplaceBid,
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Ask<_0, _1, _2, _3> {
                    pub seller: _0,
                    pub price: _1,
                    pub expiration: _2,
                    pub fee: _1,
                    pub escrow_agent: ::core::option::Option<_0>,
                    #[codec(skip)]
                    pub __ignore: ::core::marker::PhantomData<_3>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Bid<_0, _1, _2> {
                    pub buyer: _0,
                    pub expiration: _2,
                    pub fee: _1,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Execution {
                    #[codec(index = 0)]
                    Force,
                    #[codec(index = 1)]
                    AllowCreation,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Order<_0, _1, _2, _3, _4, _5, _6> {
                    pub order_type: runtime_types::pallet_marketplace::types::OrderType,
                    pub collection: _0,
                    pub item: _1,
                    pub price: _2,
                    pub expires_at: _3,
                    pub fee: _2,
                    pub escrow_agent: ::core::option::Option<_5>,
                    pub signature_data:
                        runtime_types::pallet_marketplace::types::SignatureData<_4, _6>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum OrderType {
                    #[codec(index = 0)]
                    Ask,
                    #[codec(index = 1)]
                    Bid,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SignatureData<_0, _1> {
                    pub signature: _0,
                    pub nonce: _1,
                }
            }
        }
        pub mod pallet_message_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Remove a page which has no more messages remaining to be processed or is stale."]
                    reap_page {
                        message_origin:
                            runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        page_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Execute an overweight message."]
                    #[doc = ""]
                    #[doc = "Temporary processing errors will be propagated whereas permanent errors are treated"]
                    #[doc = "as success condition."]
                    #[doc = ""]
                    #[doc = "- `origin`: Must be `Signed`."]
                    #[doc = "- `message_origin`: The origin from which the message to be executed arrived."]
                    #[doc = "- `page`: The page in the queue in which the message to be executed is sitting."]
                    #[doc = "- `index`: The index into the queue of the message to be executed."]
                    #[doc = "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution"]
                    #[doc = "  of the message."]
                    #[doc = ""]
                    #[doc = "Benchmark complexity considerations: O(index + weight_limit)."]
                    execute_overweight {
                        message_origin:
                            runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        page: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Page is not reapable because it has items remaining to be processed and is not old"]
                    #[doc = "enough."]
                    NotReapable,
                    #[codec(index = 1)]
                    #[doc = "Page to be reaped does not exist."]
                    NoPage,
                    #[codec(index = 2)]
                    #[doc = "The referenced message could not be found."]
                    NoMessage,
                    #[codec(index = 3)]
                    #[doc = "The message was already processed and cannot be processed again."]
                    AlreadyProcessed,
                    #[codec(index = 4)]
                    #[doc = "The message is queued for future execution."]
                    Queued,
                    #[codec(index = 5)]
                    #[doc = "There is temporarily not enough weight to continue servicing messages."]
                    InsufficientWeight,
                    #[codec(index = 6)]
                    #[doc = "This message is temporarily unprocessable."]
                    #[doc = ""]
                    #[doc = "Such errors are expected, but not guaranteed, to resolve themselves eventually through"]
                    #[doc = "retrying."]
                    TemporarilyUnprocessable,
                    #[codec(index = 7)]
                    #[doc = "The queue is paused and no message can be executed from it."]
                    #[doc = ""]
                    #[doc = "This can change at any time and may resolve in the future by re-trying."]
                    QueuePaused,
                    #[codec(index = 8)]
                    #[doc = "Another call is in progress and needs to finish before this call can happen."]
                    RecursiveDisallowed,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
                    ProcessingFailed {
                        id: ::subxt::ext::subxt_core::utils::H256,
                        origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        error: runtime_types::frame_support::traits::messages::ProcessMessageError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Message is processed."]
                    Processed {
                        id: ::subxt::ext::subxt_core::utils::H256,
                        origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        success: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Message placed in overweight queue."]
                    OverweightEnqueued {
                        id: [::core::primitive::u8; 32usize],
                        origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        page_index: ::core::primitive::u32,
                        message_index: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "This page was reaped."]
                    PageReaped {
                        origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
                        index: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct BookState<_0> {
                pub begin: ::core::primitive::u32,
                pub end: ::core::primitive::u32,
                pub count: ::core::primitive::u32,
                pub ready_neighbours:
                    ::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
                pub message_count: ::core::primitive::u64,
                pub size: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Neighbours<_0> {
                pub prev: _0,
                pub next: _0,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Page<_0> {
                pub remaining: _0,
                pub remaining_size: _0,
                pub first_index: _0,
                pub first: _0,
                pub last: _0,
                pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
        }
        pub mod pallet_multibatching {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Approval {
                    pub from: runtime_types::account::EthereumSigner,
                    pub signature: runtime_types::account::EthereumSignature,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BatchedCall {
                    pub from: runtime_types::account::EthereumSigner,
                    pub call: runtime_types::mainnet_runtime::RuntimeCall,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Execute multiple calls from multiple callers in a single batch."]
                    #[doc = ""]
                    #[doc = "If one of the calls fails, the whole batch reverts."]
                    #[doc = ""]
                    #[doc = "This utility is primarily intended to support cases where the calls"]
                    #[doc = "are interdependent - think a trade operation where Alice intends"]
                    #[doc = "to transfer an nft item X to Bob if and only if Bob sends an nft"]
                    #[doc = "item Y to Alice. For that reason it is designed in such a way"]
                    #[doc = "that every caller must sign the batch as a whole instead of only"]
                    #[doc = "their own calls. This has a pleasant side effect of reducing the"]
                    #[doc = "execution cost compared to signing each call separately, as only"]
                    #[doc = "one signature is required per each unique caller."]
                    #[doc = ""]
                    #[doc = "As the data signed by callers is a well-formed call, this allows"]
                    #[doc = "users to validate what they're signing by just decoding the data"]
                    #[doc = "using a third-party tool before signing them, e.g. by just going"]
                    #[doc = "to the decode tab on the official Parachain Explorer"]
                    #[doc = "<https://polkadot.js.org/apps/#/extrinsics/decode>."]
                    #[doc = ""]
                    #[doc = "# Arguments"]
                    #[doc = ""]
                    #[doc = "- `domain` - the domain of this operation that must be unique per"]
                    #[doc = "pallet instance across networks."]
                    #[doc = "- `sender` - must be the same as the sender of the transaction"]
                    #[doc = "- `bias` - an arbitrary 32 byte array that can be used to avoid"]
                    #[doc = "hash collisions."]
                    #[doc = "- `calls` - a sequence of calls to execute on behalf of their"]
                    #[doc = "respective callers."]
                    #[doc = "- `approvals` - a set of signatures, one signature per a unique"]
                    #[doc = "caller."]
                    #[doc = ""]
                    #[doc = "# Usage"]
                    #[doc = ""]
                    #[doc = "- Prepare a complete `batch()` call with empty vec for `approvals`"]
                    #[doc = "parameter."]
                    #[doc = "- Encode the call into scale-encoded bytes."]
                    #[doc = "- Form the `approvals` array by having every caller that has"]
                    #[doc = "calls in the batch sign these bytes, one signature per caller."]
                    #[doc = "- Send the `batch()` call with the same data and the collected"]
                    #[doc = "approvals."]
                    #[doc = ""]
                    batch {
                        domain: [::core::primitive::u8; 8usize],
                        sender: runtime_types::account::AccountId20,
                        bias: [::core::primitive::u8; 32usize],
                        expires_at: ::core::primitive::u64,
                        calls: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::BatchedCall,
                        >,
                        approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::Approval,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Execute multiple calls from multiple callers in a single batch."]
                    #[doc = ""]
                    #[doc = "If one of the calls fails, the whole batch reverts."]
                    #[doc = ""]
                    #[doc = "This function works the same as [Pallet::batch], but the bytes signed by"]
                    #[doc = "approvers must be wrapped in between <Bytes> ... </Bytes>."]
                    #[doc = "This is how the rawSign is currently implemented in modern substrate clients."]
                    #[doc = ""]
                    batch_v2 {
                        domain: [::core::primitive::u8; 8usize],
                        sender: runtime_types::account::AccountId20,
                        bias: [::core::primitive::u8; 32usize],
                        expires_at: ::core::primitive::u64,
                        calls: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::BatchedCall,
                        >,
                        approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multibatching::pallet::Approval,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    AlreadyApplied,
                    #[codec(index = 1)]
                    BatchSenderIsNotOrigin,
                    #[codec(index = 2)]
                    NoCalls,
                    #[codec(index = 3)]
                    NoApprovals,
                    #[codec(index = 4)]
                    InvalidDomain,
                    #[codec(index = 5)]
                    InvalidCallOrigin(::core::primitive::u16),
                    #[codec(index = 6)]
                    InvalidSignature(::core::primitive::u16),
                    #[codec(index = 7)]
                    Expired,
                    #[codec(index = 8)]
                    UnsortedApprovals,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    BatchApplied {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                    #[doc = "multi-signature, but do not participate in the approval process."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                    as_multi_threshold_1 {
                        other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "If there are enough, then dispatch the call."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                    #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                    #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                    #[doc = "may be found in the deposited `MultisigExecuted` event."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S + Z + Call)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- The weight of the `call`."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                    #[doc = "for this operation will be unreserved on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                    #[doc = "transaction for this dispatch."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- One event."]
                    #[doc = "- I/O: 1 read `O(S)`, one remove."]
                    #[doc = "- Storage: removes one item."]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::account::AccountId20,
                        >,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: runtime_types::account::AccountId20,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: runtime_types::account::AccountId20,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: runtime_types::account::AccountId20,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_myth_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Adds a new proxy."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a delegator to grant permission to a delegate account to act on their behalf"]
                    #[doc = "for a specific subset of calls defined by `proxy_type`. Optionally, a sponsor can be specified who will"]
                    #[doc = "reserve the deposit required for the proxy. The reserved deposit is returned when the proxy is removed."]
                    #[doc = ""]
                    #[doc = "Emits `ProxyCreated` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The delegator's account."]
                    #[doc = "- `delegate`: The account that is granted the proxy permission."]
                    #[doc = "- `proxy_type`: The type of proxy, which defines the subset of calls that the delegate can make on behalf of the delegator."]
                    #[doc = "- `sponsor`: (Optional) The account that will reserve the deposit for the proxy. If not provided, the delegator's balance will be reserved."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `SponsorshipUnauthorized`: If the sponsor did not approve the delegator to use their funds."]
                    add_proxy {
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        sponsor: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Executes a call on behalf of the delegator."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a delegate account to execute a call on behalf of the delegator,"]
                    #[doc = "provided the delegate has the appropriate proxy permission. The call must be within the"]
                    #[doc = "subset of allowed calls defined by the proxy type."]
                    #[doc = ""]
                    #[doc = "Emits `ProxyExecuted` event on success. If the call fails, the error is returned."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The delegate's account."]
                    #[doc = "- `address`: The delegator's account on whose behalf the call is made."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `NotProxy`: If the delegate does not have proxy permission from the delegator."]
                    #[doc = "- `frame_system::Error::<T>::CallFiltered`: If the call is not within the allowed subset of calls for the proxy."]
                    proxy {
                        address: runtime_types::account::AccountId20,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Removes an existing proxy."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a delegator to remove a proxy permission previously granted to a delegate."]
                    #[doc = "If a sponsor was specified during the proxy creation, the reserved deposit is returned to the sponsor."]
                    #[doc = ""]
                    #[doc = "Emits `ProxyRemoved` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The delegator's account."]
                    #[doc = "- `delegate`: The account whose proxy permission is to be removed."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                    remove_proxy {
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Approves funding for a proxy."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a sponsor agent to approve the reservation of funds for a proxy on behalf"]
                    #[doc = "of the sponsor. The approval must be given before the proxy can be created using the sponsor's funds."]
                    #[doc = ""]
                    #[doc = "Emits `ProxySponsorshipApproved` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The sponsor agent's account."]
                    #[doc = "- `sponsor`: The sponsor's account that will reserve the funds."]
                    #[doc = "- `delegator`: The delegator's account that will use the sponsor's funds."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `SponsorAgentUnauthorized`: If the caller is not an authorized agent of the sponsor."]
                    approve_proxy_funding {
                        sponsor: runtime_types::account::AccountId20,
                        delegator: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "Registers a sponsor agent."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a sponsor to register an agent who is authorized to approve the reservation"]
                    #[doc = "of funds for proxies on behalf of the sponsor. This helps in delegating the responsibility of"]
                    #[doc = "managing proxy fund reservations while keeping the sponsor's credentials secure."]
                    #[doc = ""]
                    #[doc = "Emits `SponsorAgentRegistered` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The sponsor's account."]
                    #[doc = "- `sponsor_agent`: The account to be registered as the sponsor's agent."]
                    register_sponsor_agent {
                        sponsor_agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "Revokes a sponsor agent."]
                    #[doc = ""]
                    #[doc = "Revokes the authorization of a sponsor agent. Once revoked, the agent will no longer be able"]
                    #[doc = "to approve the reservation of funds for proxies on behalf of the sponsor."]
                    #[doc = "All previously approved fund reservations by this agent that have not yet been used to create proxies will also be invalidated."]
                    #[doc = "Existing proxies created with the agent's approval will remain unaffected."]
                    #[doc = ""]
                    #[doc = "Emits `SponsorAgentRevoked` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The sponsor's account."]
                    #[doc = "- `sponsor_agent`: The account to be revoked as the sponsor's agent."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `SponsorAgentUnauthorized`: If the specified agent is not currently authorized by the sponsor."]
                    revoke_sponsor_agent {
                        sponsor_agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Removes a proxy sponsored by the caller."]
                    #[doc = ""]
                    #[doc = "This extrinsic allows a sponsor to remove a proxy that they have sponsored. The reserved deposit"]
                    #[doc = "is returned to the sponsor upon removal of the proxy."]
                    #[doc = ""]
                    #[doc = "Emits `ProxyRemoved` event."]
                    #[doc = ""]
                    #[doc = "# Parameters"]
                    #[doc = "- `origin`: The sponsor's account."]
                    #[doc = "- `delegator`: The account that delegated its authority."]
                    #[doc = "- `delegate`: The account that received the delegation."]
                    #[doc = ""]
                    #[doc = "# Errors"]
                    #[doc = "- `NoSuchProxy`: If the proxy does not exist."]
                    #[doc = "- `Unauthorized`: If the caller is not the sponsor of the specified proxy."]
                    remove_sponsored_proxy {
                        delegator: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The caller does not have the necessary permissions."]
                    Unauthorized,
                    #[codec(index = 1)]
                    #[doc = "The specified proxy does not exist."]
                    NoSuchProxy,
                    #[codec(index = 2)]
                    #[doc = "The delegator is not authorized to use the sponsor's funds."]
                    SponsorshipUnauthorized,
                    #[codec(index = 3)]
                    #[doc = "The sponsor agent is not authorized to use the sponsor's funds."]
                    SponsorAgentUnauthorized,
                    #[codec(index = 4)]
                    #[doc = "The delegate doesn't have proxy permission from the delegator."]
                    NotProxy,
                    #[codec(index = 5)]
                    #[doc = "The sponsor agent is already registered."]
                    SponsorAgentAlreadyRegistered,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new proxy permission was added."]
                    ProxyCreated {
                        delegator: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        sponsor: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A proxy permission was removed."]
                    ProxyRemoved {
                        delegator: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        removed_by_sponsor:
                            ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Proxy funding was approved."]
                    ProxySponsorshipApproved {
                        delegator: runtime_types::account::AccountId20,
                        sponsor: runtime_types::account::AccountId20,
                        approver: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "A sponsor agent was registered."]
                    SponsorAgentRegistered {
                        sponsor: runtime_types::account::AccountId20,
                        agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "A sponsor agent was revoked."]
                    SponsorAgentRevoked {
                        sponsor: runtime_types::account::AccountId20,
                        agent: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "Proxy call was executed."]
                    #[doc = "This event is emitted only when the proxy call is successful."]
                    ProxyExecuted {
                        delegator: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    ProxyDeposit,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1> {
                pub proxy_type: _1,
                pub sponsor: ::core::option::Option<_0>,
            }
        }
        pub mod pallet_nfts {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Issue a new collection of non-fungible items from a public origin."]
                    #[doc = ""]
                    #[doc = "This new collection has no items initially and its owner is the origin."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must have sufficient funds free."]
                    #[doc = ""]
                    #[doc = "`CollectionDeposit` funds of sender are reserved."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `admin`: The admin of this collection. The admin is the initial address of each"]
                    #[doc = "member of the collection's admin team."]
                    #[doc = ""]
                    #[doc = "Emits `Created` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    create {
                        admin: runtime_types::account::AccountId20,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Issue a new collection of non-fungible items from a privileged origin."]
                    #[doc = ""]
                    #[doc = "This new collection has no items initially."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "Unlike `create`, no funds are reserved."]
                    #[doc = ""]
                    #[doc = "- `owner`: The owner of this collection of items. The owner has full superuser"]
                    #[doc = "  permissions over this item, but may later change and configure the permissions using"]
                    #[doc = "  `transfer_ownership` and `set_team`."]
                    #[doc = ""]
                    #[doc = "Emits `ForceCreated` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_create {
                        owner: runtime_types::account::AccountId20,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Destroy a collection of fungible items."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                    #[doc = "owner of the `collection`."]
                    #[doc = ""]
                    #[doc = "NOTE: The collection must have 0 items to be destroyed."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection to be destroyed."]
                    #[doc = "- `witness`: Information on the items minted in the collection. This must be"]
                    #[doc = "correct."]
                    #[doc = ""]
                    #[doc = "Emits `Destroyed` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(m + c + a)` where:"]
                    #[doc = "- `m = witness.item_metadatas`"]
                    #[doc = "- `c = witness.item_configs`"]
                    #[doc = "- `a = witness.attributes`"]
                    destroy {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        witness: runtime_types::pallet_nfts::types::DestroyWitness,
                    },
                    #[codec(index = 3)]
                    #[doc = "Mint an item of a particular collection."]
                    #[doc = ""]
                    #[doc = "The origin must be Signed and the sender must comply with the `mint_settings` rules."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be minted."]
                    #[doc = "- `maybe_item`: An identifier of the new item. If the collection mints serially, this should be `None`."]
                    #[doc = "- `mint_to`: Account into which the item will be minted."]
                    #[doc = "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned"]
                    #[doc = "  item_id from that collection needs to be provided within the witness data object. If"]
                    #[doc = "  the mint price is set, then it should be additionally confirmed in the `witness_data`."]
                    #[doc = ""]
                    #[doc = "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    mint {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        mint_to: runtime_types::account::AccountId20,
                        witness_data: ::core::option::Option<
                            runtime_types::pallet_nfts::types::MintWitness<
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Mint an item of a particular collection from a privileged origin."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the"]
                    #[doc = "Issuer of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be minted."]
                    #[doc = "- `maybe_item`: An identifier of the new item."]
                    #[doc = "- `mint_to`: Account into which the item will be minted."]
                    #[doc = "- `item_config`: A config of the new item."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` event when successful."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_mint {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        mint_to: runtime_types::account::AccountId20,
                        item_config: runtime_types::pallet_nfts::types::ItemConfig,
                    },
                    #[codec(index = 5)]
                    #[doc = "Destroy a single item."]
                    #[doc = ""]
                    #[doc = "The origin must conform to `ForceOrigin` or must be Signed and the signing account must"]
                    #[doc = "be the owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be burned."]
                    #[doc = "- `item`: The item to be burned."]
                    #[doc = ""]
                    #[doc = "Emits `Burned`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    burn {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Move an item from the sender account to another."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the signing account must be either:"]
                    #[doc = "- the Owner of the `item`;"]
                    #[doc = "- the approved delegate for the `item` (in this case, the approval is reset)."]
                    #[doc = ""]
                    #[doc = "Arguments:"]
                    #[doc = "- `collection`: The collection of the item to be transferred."]
                    #[doc = "- `item`: The item to be transferred."]
                    #[doc = "- `dest`: The account to receive ownership of the item."]
                    #[doc = ""]
                    #[doc = "Emits `Transferred`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        dest: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 7)]
                    #[doc = "Re-evaluate the deposits on some items."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the items to be reevaluated."]
                    #[doc = "- `items`: The items of the collection whose deposits will be reevaluated."]
                    #[doc = ""]
                    #[doc = "NOTE: This exists as a best-effort function. Any items which are unknown or"]
                    #[doc = "in the case that the owner account does not have reservable funds to pay for a"]
                    #[doc = "deposit increase are ignored. Generally the owner isn't going to call this on items"]
                    #[doc = "whose existing deposit is less than the refreshed deposit as it would only cost them,"]
                    #[doc = "so it's of little consequence."]
                    #[doc = ""]
                    #[doc = "It will still return an error in the case that the collection is unknown or the signer"]
                    #[doc = "is not permitted to call it."]
                    #[doc = ""]
                    #[doc = "Weight: `O(items.len())`"]
                    redeposit {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        items: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u128>,
                    },
                    #[codec(index = 8)]
                    #[doc = "Disallow further unprivileged transfer of an item."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be changed."]
                    #[doc = "- `item`: The item to become non-transferable."]
                    #[doc = ""]
                    #[doc = "Emits `ItemTransferLocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    lock_item_transfer {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Re-allow unprivileged transfer of an item."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Freezer of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be changed."]
                    #[doc = "- `item`: The item to become transferable."]
                    #[doc = ""]
                    #[doc = "Emits `ItemTransferUnlocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    unlock_item_transfer {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Disallows specified settings for the whole collection."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection to be locked."]
                    #[doc = "- `lock_settings`: The settings to be locked."]
                    #[doc = ""]
                    #[doc = "Note: it's possible to only lock(set) the setting, but not to unset it."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionLocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    lock_collection {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        lock_settings: runtime_types::pallet_nfts::types::BitFlags1<
                            runtime_types::pallet_nfts::types::CollectionSetting,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "Change the Owner of a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and the sender should be the Owner of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection whose owner should be changed."]
                    #[doc = "- `owner`: The new Owner of this collection. They must have called"]
                    #[doc = "  `set_accept_ownership` with `collection` in order for this operation to succeed."]
                    #[doc = ""]
                    #[doc = "Emits `OwnerChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    transfer_ownership {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        new_owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 12)]
                    #[doc = "Change the Issuer, Admin and Freezer of a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                    #[doc = "`collection`."]
                    #[doc = ""]
                    #[doc = "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it"]
                    #[doc = "after to `Some(account)`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection whose team should be changed."]
                    #[doc = "- `issuer`: The new Issuer of this collection."]
                    #[doc = "- `admin`: The new Admin of this collection."]
                    #[doc = "- `freezer`: The new Freezer of this collection."]
                    #[doc = ""]
                    #[doc = "Emits `TeamChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_team {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        issuer: ::core::option::Option<runtime_types::account::AccountId20>,
                        admin: ::core::option::Option<runtime_types::account::AccountId20>,
                        freezer: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 13)]
                    #[doc = "Change the Owner of a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection."]
                    #[doc = "- `owner`: The new Owner of this collection."]
                    #[doc = ""]
                    #[doc = "Emits `OwnerChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_collection_owner {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "Change the config of a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection."]
                    #[doc = "- `config`: The new config of this collection."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionConfigChanged`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_collection_config {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 15)]
                    #[doc = "Approve an item to be transferred by a delegated third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                    #[doc = "`item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item to be approved for delegated transfer."]
                    #[doc = "- `item`: The item to be approved for delegated transfer."]
                    #[doc = "- `delegate`: The account to delegate permission to transfer the item."]
                    #[doc = "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the"]
                    #[doc = "\tnumber of blocks after which the approval will expire"]
                    #[doc = ""]
                    #[doc = "Emits `TransferApproved` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    approve_transfer {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                        maybe_deadline: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 16)]
                    #[doc = "Cancel one of the transfer approvals for a specific item."]
                    #[doc = ""]
                    #[doc = "Origin must be either:"]
                    #[doc = "- the `Force` origin;"]
                    #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                    #[doc = ""]
                    #[doc = "Arguments:"]
                    #[doc = "- `collection`: The collection of the item of whose approval will be cancelled."]
                    #[doc = "- `item`: The item of the collection of whose approval will be cancelled."]
                    #[doc = "- `delegate`: The account that is going to loose their approval."]
                    #[doc = ""]
                    #[doc = "Emits `ApprovalCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    cancel_approval {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 17)]
                    #[doc = "Cancel all the approvals of a specific item."]
                    #[doc = ""]
                    #[doc = "Origin must be either:"]
                    #[doc = "- the `Force` origin;"]
                    #[doc = "- `Signed` with the signer being the Owner of the `item`;"]
                    #[doc = ""]
                    #[doc = "Arguments:"]
                    #[doc = "- `collection`: The collection of the item of whose approvals will be cleared."]
                    #[doc = "- `item`: The item of the collection of whose approvals will be cleared."]
                    #[doc = ""]
                    #[doc = "Emits `AllApprovalsCancelled` on success."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_all_transfer_approvals {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "Disallows changing the metadata or attributes of the item."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin"]
                    #[doc = "of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection if the `item`."]
                    #[doc = "- `item`: An item to be locked."]
                    #[doc = "- `lock_metadata`: Specifies whether the metadata should be locked."]
                    #[doc = "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace"]
                    #[doc = "  should be locked."]
                    #[doc = ""]
                    #[doc = "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only."]
                    #[doc = "When the metadata or attributes are locked, it won't be possible the unlock them."]
                    #[doc = ""]
                    #[doc = "Emits `ItemPropertiesLocked`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    lock_item_properties {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        lock_metadata: ::core::primitive::bool,
                        lock_attributes: ::core::primitive::bool,
                    },
                    #[codec(index = 19)]
                    #[doc = "Set an attribute for a collection or item."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must conform to the namespace ruleset:"]
                    #[doc = "- `CollectionOwner` namespace could be modified by the `collection` Admin only;"]
                    #[doc = "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`"]
                    #[doc = "  should be set in that case;"]
                    #[doc = "- `Account(AccountId)` namespace could be modified only when the `origin` was given a"]
                    #[doc = "  permission to do so;"]
                    #[doc = ""]
                    #[doc = "The funds of `origin` are reserved according to the formula:"]
                    #[doc = "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                    #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                    #[doc = "- `namespace`: Attribute's namespace."]
                    #[doc = "- `key`: The key of the attribute."]
                    #[doc = "- `value`: The value to which to set the attribute."]
                    #[doc = ""]
                    #[doc = "Emits `AttributeSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_attribute {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 20)]
                    #[doc = "Force-set an attribute for a collection or item."]
                    #[doc = ""]
                    #[doc = "Origin must be `ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "If the attribute already exists and it was set by another account, the deposit"]
                    #[doc = "will be returned to the previous owner."]
                    #[doc = ""]
                    #[doc = "- `set_as`: An optional owner of the attribute."]
                    #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                    #[doc = "- `maybe_item`: The identifier of the item whose metadata to set."]
                    #[doc = "- `namespace`: Attribute's namespace."]
                    #[doc = "- `key`: The key of the attribute."]
                    #[doc = "- `value`: The value to which to set the attribute."]
                    #[doc = ""]
                    #[doc = "Emits `AttributeSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    force_set_attribute {
                        set_as: ::core::option::Option<runtime_types::account::AccountId20>,
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "Clear an attribute for a collection or item."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the"]
                    #[doc = "attribute."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the collection's owner."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                    #[doc = "- `maybe_item`: The identifier of the item whose metadata to clear."]
                    #[doc = "- `namespace`: Attribute's namespace."]
                    #[doc = "- `key`: The key of the attribute."]
                    #[doc = ""]
                    #[doc = "Emits `AttributeCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_attribute {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "Approve item's attributes to be changed by a delegated third-party account."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be an owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: A collection of the item."]
                    #[doc = "- `item`: The item that holds attributes."]
                    #[doc = "- `delegate`: The account to delegate permission to change attributes of the item."]
                    #[doc = ""]
                    #[doc = "Emits `ItemAttributesApprovalAdded` on success."]
                    approve_item_attributes {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 23)]
                    #[doc = "Cancel the previously provided approval to change item's attributes."]
                    #[doc = "All the previously set attributes by the `delegate` will be removed."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be an owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: Collection that the item is contained within."]
                    #[doc = "- `item`: The item that holds attributes."]
                    #[doc = "- `delegate`: The previously approved account to remove."]
                    #[doc = ""]
                    #[doc = "Emits `ItemAttributesApprovalRemoved` on success."]
                    cancel_item_attributes_approval {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                        witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
                    },
                    #[codec(index = 24)]
                    #[doc = "Set the metadata for an item."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                    #[doc = "`collection`."]
                    #[doc = ""]
                    #[doc = "If the origin is Signed, then funds of signer are reserved according to the formula:"]
                    #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection whose item's metadata to set."]
                    #[doc = "- `item`: The identifier of the item whose metadata to set."]
                    #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                    #[doc = ""]
                    #[doc = "Emits `ItemMetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_metadata {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 25)]
                    #[doc = "Clear the metadata for an item."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the"]
                    #[doc = "`collection`."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the collection's owner."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection whose item's metadata to clear."]
                    #[doc = "- `item`: The identifier of the item whose metadata to clear."]
                    #[doc = ""]
                    #[doc = "Emits `ItemMetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_metadata {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    #[doc = "Set the metadata for a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                    #[doc = "the `collection`."]
                    #[doc = ""]
                    #[doc = "If the origin is `Signed`, then funds of signer are reserved according to the formula:"]
                    #[doc = "`MetadataDepositBase + DepositPerByte * data.len` taking into"]
                    #[doc = "account any already reserved funds."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the item whose metadata to update."]
                    #[doc = "- `data`: The general information of this item. Limited in length by `StringLimit`."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionMetadataSet`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    set_collection_metadata {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 27)]
                    #[doc = "Clear the metadata for a collection."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of"]
                    #[doc = "the `collection`."]
                    #[doc = ""]
                    #[doc = "Any deposit is freed for the collection's owner."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection whose metadata to clear."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionMetadataCleared`."]
                    #[doc = ""]
                    #[doc = "Weight: `O(1)`"]
                    clear_collection_metadata {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 28)]
                    #[doc = "Set (or reset) the acceptance of ownership for a particular account."]
                    #[doc = ""]
                    #[doc = "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a"]
                    #[doc = "provider reference."]
                    #[doc = ""]
                    #[doc = "- `maybe_collection`: The identifier of the collection whose ownership the signer is"]
                    #[doc = "  willing to accept, or if `None`, an indication that the signer is willing to accept no"]
                    #[doc = "  ownership transferal."]
                    #[doc = ""]
                    #[doc = "Emits `OwnershipAcceptanceChanged`."]
                    set_accept_ownership {
                        maybe_collection: ::core::option::Option<
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 29)]
                    #[doc = "Set the maximum number of items a collection could have."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of"]
                    #[doc = "the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection to change."]
                    #[doc = "- `max_supply`: The maximum number of items a collection could have."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionMaxSupplySet` event when successful."]
                    set_collection_max_supply {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        max_supply: ::core::primitive::u128,
                    },
                    #[codec(index = 30)]
                    #[doc = "Update mint settings."]
                    #[doc = ""]
                    #[doc = "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer"]
                    #[doc = "of the `collection`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The identifier of the collection to change."]
                    #[doc = "- `mint_settings`: The new mint settings."]
                    #[doc = ""]
                    #[doc = "Emits `CollectionMintSettingsUpdated` event when successful."]
                    update_mint_settings {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        mint_settings: runtime_types::pallet_nfts::types::MintSettings<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 31)]
                    #[doc = "Set (or reset) the price for an item."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be the owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item."]
                    #[doc = "- `item`: The item to set the price for."]
                    #[doc = "- `price`: The price for the item. Pass `None`, to reset the price."]
                    #[doc = "- `buyer`: Restricts the buy operation to a specific account."]
                    #[doc = ""]
                    #[doc = "Emits `ItemPriceSet` on success if the price is not `None`."]
                    #[doc = "Emits `ItemPriceRemoved` on success if the price is `None`."]
                    set_price {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        price: ::core::option::Option<::core::primitive::u128>,
                        whitelisted_buyer:
                            ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 32)]
                    #[doc = "Allows to buy an item if it's up for sale."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must not be the owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item."]
                    #[doc = "- `item`: The item the sender wants to buy."]
                    #[doc = "- `bid_price`: The price the sender is willing to pay."]
                    #[doc = ""]
                    #[doc = "Emits `ItemBought` on success."]
                    buy_item {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        bid_price: ::core::primitive::u128,
                    },
                    #[codec(index = 33)]
                    #[doc = "Allows to pay the tips."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `tips`: Tips array."]
                    #[doc = ""]
                    #[doc = "Emits `TipSent` on every tip transfer."]
                    pay_tips {
                        tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_nfts::types::ItemTip<
                                runtime_types::runtime_common::IncrementableU256,
                                ::core::primitive::u128,
                                runtime_types::account::AccountId20,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 34)]
                    #[doc = "Register a new atomic swap, declaring an intention to send an `item` in exchange for"]
                    #[doc = "`desired_item` from origin to target on the current blockchain."]
                    #[doc = "The target can execute the swap during the specified `duration` of blocks (if set)."]
                    #[doc = "Additionally, the price could be set for the desired `item`."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be an owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item."]
                    #[doc = "- `item`: The item an owner wants to give."]
                    #[doc = "- `desired_collection`: The collection of the desired item."]
                    #[doc = "- `desired_item`: The desired item an owner wants to receive."]
                    #[doc = "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`."]
                    #[doc = "- `duration`: A deadline for the swap. Specified by providing the number of blocks"]
                    #[doc = "\tafter which the swap will expire."]
                    #[doc = ""]
                    #[doc = "Emits `SwapCreated` on success."]
                    create_swap {
                        offered_collection: runtime_types::runtime_common::IncrementableU256,
                        offered_item: ::core::primitive::u128,
                        desired_collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_desired_item: ::core::option::Option<::core::primitive::u128>,
                        maybe_price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    #[doc = "Cancel an atomic swap."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = "Origin must be an owner of the `item` if the deadline hasn't expired."]
                    #[doc = ""]
                    #[doc = "- `collection`: The collection of the item."]
                    #[doc = "- `item`: The item an owner wants to give."]
                    #[doc = ""]
                    #[doc = "Emits `SwapCancelled` on success."]
                    cancel_swap {
                        offered_collection: runtime_types::runtime_common::IncrementableU256,
                        offered_item: ::core::primitive::u128,
                    },
                    #[codec(index = 36)]
                    #[doc = "Claim an atomic swap."]
                    #[doc = "This method executes a pending swap, that was created by a counterpart before."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be an owner of the `item`."]
                    #[doc = ""]
                    #[doc = "- `send_collection`: The collection of the item to be sent."]
                    #[doc = "- `send_item`: The item to be sent."]
                    #[doc = "- `receive_collection`: The collection of the item to be received."]
                    #[doc = "- `receive_item`: The item to be received."]
                    #[doc = "- `witness_price`: A price that was previously agreed on."]
                    #[doc = ""]
                    #[doc = "Emits `SwapClaimed` on success."]
                    claim_swap {
                        send_collection: runtime_types::runtime_common::IncrementableU256,
                        send_item: ::core::primitive::u128,
                        receive_collection: runtime_types::runtime_common::IncrementableU256,
                        receive_item: ::core::primitive::u128,
                        witness_price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 37)]
                    #[doc = "Mint an item by providing the pre-signed approval."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed."]
                    #[doc = ""]
                    #[doc = "- `mint_data`: The pre-signed approval that consists of the information about the item,"]
                    #[doc = "  its metadata, attributes, who can mint it (`None` for anyone) and until what block"]
                    #[doc = "  number."]
                    #[doc = "- `signature`: The signature of the `data` object."]
                    #[doc = "- `signer`: The `data` object's signer. Should be an Issuer of the collection."]
                    #[doc = ""]
                    #[doc = "Emits `Issued` on success."]
                    #[doc = "Emits `AttributeSet` if the attributes were provided."]
                    #[doc = "Emits `ItemMetadataSet` if the metadata was not empty."]
                    mint_pre_signed {
                        mint_data: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::pallet_nfts::types::PreSignedMint<
                                runtime_types::runtime_common::IncrementableU256,
                                ::core::primitive::u128,
                                runtime_types::account::AccountId20,
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                            >,
                        >,
                        signature: runtime_types::account::EthereumSignature,
                        signer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 38)]
                    #[doc = "Set attributes for an item by providing the pre-signed approval."]
                    #[doc = ""]
                    #[doc = "Origin must be Signed and must be an owner of the `data.item`."]
                    #[doc = ""]
                    #[doc = "- `data`: The pre-signed approval that consists of the information about the item,"]
                    #[doc = "  attributes to update and until what block number."]
                    #[doc = "- `signature`: The signature of the `data` object."]
                    #[doc = "- `signer`: The `data` object's signer. Should be an Admin of the collection for the"]
                    #[doc = "  `CollectionOwner` namespace."]
                    #[doc = ""]
                    #[doc = "Emits `AttributeSet` for each provided attribute."]
                    #[doc = "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before."]
                    #[doc = "Emits `PreSignedAttributesSet` on success."]
                    set_attributes_pre_signed {
                        data: runtime_types::pallet_nfts::types::PreSignedAttributes<
                            runtime_types::runtime_common::IncrementableU256,
                            ::core::primitive::u128,
                            runtime_types::account::AccountId20,
                            ::core::primitive::u32,
                        >,
                        signature: runtime_types::account::EthereumSignature,
                        signer: runtime_types::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 1)]
                    #[doc = "The given item ID is unknown."]
                    UnknownCollection,
                    #[codec(index = 2)]
                    #[doc = "The item ID has already been used for an item."]
                    AlreadyExists,
                    #[codec(index = 3)]
                    #[doc = "The approval had a deadline that expired, so the approval isn't valid anymore."]
                    ApprovalExpired,
                    #[codec(index = 4)]
                    #[doc = "The owner turned out to be different to what was expected."]
                    WrongOwner,
                    #[codec(index = 5)]
                    #[doc = "The witness data given does not match the current state of the chain."]
                    BadWitness,
                    #[codec(index = 6)]
                    #[doc = "Collection ID is already taken."]
                    CollectionIdInUse,
                    #[codec(index = 7)]
                    #[doc = "Items within that collection are non-transferable."]
                    ItemsNonTransferable,
                    #[codec(index = 8)]
                    #[doc = "The provided account is not a delegate."]
                    NotDelegate,
                    #[codec(index = 9)]
                    #[doc = "The delegate turned out to be different to what was expected."]
                    WrongDelegate,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The named owner has not signed ownership acceptance of the collection."]
                    Unaccepted,
                    #[codec(index = 12)]
                    #[doc = "The item is locked (non-transferable)."]
                    ItemLocked,
                    #[codec(index = 13)]
                    #[doc = "Item's attributes are locked."]
                    LockedItemAttributes,
                    #[codec(index = 14)]
                    #[doc = "Collection's attributes are locked."]
                    LockedCollectionAttributes,
                    #[codec(index = 15)]
                    #[doc = "Item's metadata is locked."]
                    LockedItemMetadata,
                    #[codec(index = 16)]
                    #[doc = "Collection's metadata is locked."]
                    LockedCollectionMetadata,
                    #[codec(index = 17)]
                    #[doc = "All items have been minted."]
                    MaxSupplyReached,
                    #[codec(index = 18)]
                    #[doc = "The max supply is locked and can't be changed."]
                    MaxSupplyLocked,
                    #[codec(index = 19)]
                    #[doc = "The provided max supply is less than the number of items a collection already has."]
                    MaxSupplyTooSmall,
                    #[codec(index = 20)]
                    #[doc = "The given item ID is unknown."]
                    UnknownItem,
                    #[codec(index = 21)]
                    #[doc = "Swap doesn't exist."]
                    UnknownSwap,
                    #[codec(index = 22)]
                    #[doc = "The given item has no metadata set."]
                    MetadataNotFound,
                    #[codec(index = 23)]
                    #[doc = "The provided attribute can't be found."]
                    AttributeNotFound,
                    #[codec(index = 24)]
                    #[doc = "Item is not for sale."]
                    NotForSale,
                    #[codec(index = 25)]
                    #[doc = "The provided bid is too low."]
                    BidTooLow,
                    #[codec(index = 26)]
                    #[doc = "The item has reached its approval limit."]
                    ReachedApprovalLimit,
                    #[codec(index = 27)]
                    #[doc = "The deadline has already expired."]
                    DeadlineExpired,
                    #[codec(index = 28)]
                    #[doc = "The duration provided should be less than or equal to `MaxDeadlineDuration`."]
                    WrongDuration,
                    #[codec(index = 29)]
                    #[doc = "The method is disabled by system settings."]
                    MethodDisabled,
                    #[codec(index = 30)]
                    #[doc = "The provided setting can't be set."]
                    WrongSetting,
                    #[codec(index = 31)]
                    #[doc = "Item's config already exists and should be equal to the provided one."]
                    InconsistentItemConfig,
                    #[codec(index = 32)]
                    #[doc = "Config for a collection or an item can't be found."]
                    NoConfig,
                    #[codec(index = 33)]
                    #[doc = "Some roles were not cleared."]
                    RolesNotCleared,
                    #[codec(index = 34)]
                    #[doc = "Mint has not started yet."]
                    MintNotStarted,
                    #[codec(index = 35)]
                    #[doc = "Mint has already ended."]
                    MintEnded,
                    #[codec(index = 36)]
                    #[doc = "The provided Item was already used for claiming."]
                    AlreadyClaimed,
                    #[codec(index = 37)]
                    #[doc = "The provided data is incorrect."]
                    IncorrectData,
                    #[codec(index = 38)]
                    #[doc = "The extrinsic was sent by the wrong origin."]
                    WrongOrigin,
                    #[codec(index = 39)]
                    #[doc = "The provided signature is incorrect."]
                    WrongSignature,
                    #[codec(index = 40)]
                    #[doc = "The provided metadata might be too long."]
                    IncorrectMetadata,
                    #[codec(index = 41)]
                    #[doc = "Can't set more attributes per one call."]
                    MaxAttributesLimitReached,
                    #[codec(index = 42)]
                    #[doc = "The provided namespace isn't supported in this call."]
                    WrongNamespace,
                    #[codec(index = 43)]
                    #[doc = "Can't delete non-empty collections."]
                    CollectionNotEmpty,
                    #[codec(index = 44)]
                    #[doc = "The witness data should be provided."]
                    WitnessRequired,
                    #[codec(index = 45)]
                    #[doc = "It is required to specify the collection's maximum supply."]
                    MaxSupplyRequired,
                    #[codec(index = 46)]
                    #[doc = "ItemId must be under the collection's maximum supply."]
                    InvalidItemId,
                    #[codec(index = 47)]
                    #[doc = "When serial minting is enabled items must be consecutive."]
                    ItemIdNotSerial,
                    #[codec(index = 48)]
                    #[doc = "The collection must be configured for serial minting."]
                    SerialMintEnabled,
                    #[codec(index = 49)]
                    #[doc = "The item as already burned."]
                    AlreadyBurned,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A `collection` was created."]
                    Created {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        creator: runtime_types::account::AccountId20,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "A `collection` was force-created."]
                    ForceCreated {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "A `collection` was destroyed."]
                    Destroyed {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 3)]
                    #[doc = "An `item` was issued."]
                    Issued {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "An `item` was transferred."]
                    Transferred {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        from: runtime_types::account::AccountId20,
                        to: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "An `item` was destroyed."]
                    Burned {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "An `item` became non-transferable."]
                    ItemTransferLocked {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "An `item` became transferable."]
                    ItemTransferUnlocked {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "`item` metadata or attributes were locked."]
                    ItemPropertiesLocked {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        lock_metadata: ::core::primitive::bool,
                        lock_attributes: ::core::primitive::bool,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some `collection` was locked."]
                    CollectionLocked {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 10)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        new_owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 11)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        issuer: ::core::option::Option<runtime_types::account::AccountId20>,
                        admin: ::core::option::Option<runtime_types::account::AccountId20>,
                        freezer: ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 12)]
                    #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
                    #[doc = "a `delegate`."]
                    TransferApproved {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                        deadline: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 13)]
                    #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
                    #[doc = "`collection` was cancelled by its `owner`."]
                    ApprovalCancelled {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "All approvals of an item got cancelled."]
                    AllApprovalsCancelled {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        owner: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "A `collection` has had its config changed by the `Force` origin."]
                    CollectionConfigChanged {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 16)]
                    #[doc = "New metadata has been set for a `collection`."]
                    CollectionMetadataSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "Metadata has been cleared for a `collection`."]
                    CollectionMetadataCleared {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 18)]
                    #[doc = "New metadata has been set for an item."]
                    ItemMetadataSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 19)]
                    #[doc = "Metadata has been cleared for an item."]
                    ItemMetadataCleared {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "The deposit for a set of `item`s within a `collection` has been updated."]
                    Redeposited {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        successful_items:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u128>,
                    },
                    #[codec(index = 21)]
                    #[doc = "New attribute metadata has been set for a `collection` or `item`."]
                    AttributeSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
                    AttributeCleared {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        maybe_item: ::core::option::Option<::core::primitive::u128>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 23)]
                    #[doc = "A new approval to modify item attributes was added."]
                    ItemAttributesApprovalAdded {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 24)]
                    #[doc = "A new approval to modify item attributes was removed."]
                    ItemAttributesApprovalRemoved {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        delegate: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 25)]
                    #[doc = "Ownership acceptance has changed for an account."]
                    OwnershipAcceptanceChanged {
                        who: runtime_types::account::AccountId20,
                        maybe_collection: ::core::option::Option<
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 26)]
                    #[doc = "Max supply has been set for a collection."]
                    CollectionMaxSupplySet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        max_supply: ::core::primitive::u128,
                    },
                    #[codec(index = 27)]
                    #[doc = "Mint settings for a collection had changed."]
                    CollectionMintSettingsUpdated {
                        collection: runtime_types::runtime_common::IncrementableU256,
                    },
                    #[codec(index = 28)]
                    #[doc = "Event gets emitted when the `NextCollectionId` gets incremented."]
                    NextCollectionIdIncremented {
                        next_id: ::core::option::Option<
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                    },
                    #[codec(index = 29)]
                    #[doc = "The price was set for the item."]
                    ItemPriceSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        price: ::core::primitive::u128,
                        whitelisted_buyer:
                            ::core::option::Option<runtime_types::account::AccountId20>,
                    },
                    #[codec(index = 30)]
                    #[doc = "The price for the item was removed."]
                    ItemPriceRemoved {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                    },
                    #[codec(index = 31)]
                    #[doc = "An item was bought."]
                    ItemBought {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        price: ::core::primitive::u128,
                        seller: runtime_types::account::AccountId20,
                        buyer: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 32)]
                    #[doc = "A tip was sent."]
                    TipSent {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        sender: runtime_types::account::AccountId20,
                        receiver: runtime_types::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 33)]
                    #[doc = "An `item` swap intent was created."]
                    SwapCreated {
                        offered_collection: runtime_types::runtime_common::IncrementableU256,
                        offered_item: ::core::primitive::u128,
                        desired_collection: runtime_types::runtime_common::IncrementableU256,
                        desired_item: ::core::option::Option<::core::primitive::u128>,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 34)]
                    #[doc = "The swap was cancelled."]
                    SwapCancelled {
                        offered_collection: runtime_types::runtime_common::IncrementableU256,
                        offered_item: ::core::primitive::u128,
                        desired_collection: runtime_types::runtime_common::IncrementableU256,
                        desired_item: ::core::option::Option<::core::primitive::u128>,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    #[doc = "The swap has been claimed."]
                    SwapClaimed {
                        sent_collection: runtime_types::runtime_common::IncrementableU256,
                        sent_item: ::core::primitive::u128,
                        sent_item_owner: runtime_types::account::AccountId20,
                        received_collection: runtime_types::runtime_common::IncrementableU256,
                        received_item: ::core::primitive::u128,
                        received_item_owner: runtime_types::account::AccountId20,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 36)]
                    #[doc = "New attributes have been set for an `item` of the `collection`."]
                    PreSignedAttributesSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::primitive::u128,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            runtime_types::account::AccountId20,
                        >,
                    },
                    #[codec(index = 37)]
                    #[doc = "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`"]
                    #[doc = "within that `collection`."]
                    PalletAttributeSet {
                        collection: runtime_types::runtime_common::IncrementableU256,
                        item: ::core::option::Option<::core::primitive::u128>,
                        attribute: runtime_types::pallet_nfts::types::PalletAttributes<
                            runtime_types::runtime_common::IncrementableU256,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AttributeDeposit<_0, _1> {
                    pub account: ::core::option::Option<_1>,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum AttributeNamespace<_0> {
                    #[codec(index = 0)]
                    Pallet,
                    #[codec(index = 1)]
                    CollectionOwner,
                    #[codec(index = 2)]
                    ItemOwner,
                    #[codec(index = 3)]
                    Account(_0),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BitFlags1<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BitFlags2<_0>(
                    pub ::core::primitive::u8,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CancelAttributesApprovalWitness {
                    pub account_attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollectionConfig<_0, _1, _2> {
                    pub settings: runtime_types::pallet_nfts::types::BitFlags1<
                        runtime_types::pallet_nfts::types::CollectionSetting,
                    >,
                    pub max_supply: ::core::option::Option<_0>,
                    pub mint_settings: runtime_types::pallet_nfts::types::MintSettings<_0, _1, _2>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollectionDetails<_0, _1> {
                    pub owner: _0,
                    pub owner_deposit: _1,
                    pub items: ::core::primitive::u128,
                    pub minted_items: ::core::primitive::u128,
                    pub highest_item_id: ::core::option::Option<_1>,
                    pub item_metadatas: ::core::primitive::u128,
                    pub item_configs: ::core::primitive::u128,
                    pub attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollectionMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum CollectionRole {
                    #[codec(index = 1)]
                    Issuer,
                    #[codec(index = 2)]
                    Freezer,
                    #[codec(index = 4)]
                    Admin,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum CollectionSetting {
                    #[codec(index = 1)]
                    TransferableItems,
                    #[codec(index = 2)]
                    UnlockedMetadata,
                    #[codec(index = 4)]
                    UnlockedAttributes,
                    #[codec(index = 8)]
                    UnlockedMaxSupply,
                    #[codec(index = 16)]
                    DepositRequired,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DestroyWitness {
                    #[codec(compact)]
                    pub item_metadatas: ::core::primitive::u128,
                    #[codec(compact)]
                    pub item_configs: ::core::primitive::u128,
                    #[codec(compact)]
                    pub attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemConfig {
                    pub settings: runtime_types::pallet_nfts::types::BitFlags1<
                        runtime_types::pallet_nfts::types::ItemSetting,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemDeposit<_0, _1> {
                    pub account: _1,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemDetails<_0, _1, _2> {
                    pub owner: _0,
                    pub approvals: _2,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemMetadataDeposit<_0, _1> {
                    pub account: ::core::option::Option<_1>,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum ItemSetting {
                    #[codec(index = 1)]
                    Transferable,
                    #[codec(index = 2)]
                    UnlockedMetadata,
                    #[codec(index = 4)]
                    UnlockedAttributes,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ItemTip<_0, _1, _2, _3> {
                    pub collection: _0,
                    pub item: _1,
                    pub receiver: _2,
                    pub amount: _3,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MintSettings<_0, _1, _2> {
                    pub mint_type: runtime_types::pallet_nfts::types::MintType<_2>,
                    pub price: ::core::option::Option<_0>,
                    pub start_block: ::core::option::Option<_1>,
                    pub end_block: ::core::option::Option<_1>,
                    pub default_item_settings: runtime_types::pallet_nfts::types::BitFlags1<
                        runtime_types::pallet_nfts::types::ItemSetting,
                    >,
                    pub serial_mint: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum MintType<_0> {
                    #[codec(index = 0)]
                    Issuer,
                    #[codec(index = 1)]
                    Public,
                    #[codec(index = 2)]
                    HolderOf(_0),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MintWitness<_0, _1> {
                    pub owned_item: ::core::option::Option<_0>,
                    pub mint_price: ::core::option::Option<_0>,
                    #[codec(skip)]
                    pub __ignore: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum PalletAttributes<_0> {
                    #[codec(index = 0)]
                    UsedToClaim(_0),
                    #[codec(index = 1)]
                    TransferDisabled,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum PalletFeature {
                    #[codec(index = 1)]
                    Trading,
                    #[codec(index = 2)]
                    Attributes,
                    #[codec(index = 4)]
                    Approvals,
                    #[codec(index = 8)]
                    Swaps,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PendingSwap<_0, _1, _2, _3> {
                    pub desired_collection: _0,
                    pub desired_item: ::core::option::Option<_1>,
                    pub price: ::core::option::Option<_2>,
                    pub deadline: _3,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PreSignedAttributes<_0, _1, _2, _3> {
                    pub collection: _0,
                    pub item: _1,
                    pub attributes: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    )>,
                    pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<_2>,
                    pub deadline: _3,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PreSignedMint<_0, _1, _2, _3, _4> {
                    pub collection: _0,
                    pub maybe_item: ::core::option::Option<_1>,
                    pub attributes: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    )>,
                    pub metadata: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    pub only_account: ::core::option::Option<_2>,
                    pub deadline: _3,
                    pub mint_price: ::core::option::Option<_1>,
                    #[codec(skip)]
                    pub __ignore: ::core::marker::PhantomData<_4>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum PriceDirection {
                    #[codec(index = 0)]
                    Send,
                    #[codec(index = 1)]
                    Receive,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PriceWithDirection<_0> {
                    pub amount: _0,
                    pub direction: runtime_types::pallet_nfts::types::PriceDirection,
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a preimage on-chain."]
                    #[doc = ""]
                    #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                    #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                    note_preimage {
                        bytes: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Clear an unrequested preimage from the runtime storage."]
                    #[doc = ""]
                    #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                    #[doc = ""]
                    #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                    #[doc = "- `len`: The length of the preimage of `hash`."]
                    unnote_preimage {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 2)]
                    #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                    #[doc = ""]
                    #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                    #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                    request_preimage {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "Clear a previously made request for a preimage."]
                    #[doc = ""]
                    #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                    unrequest_preimage {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "Ensure that the a bulk of pre-images is upgraded."]
                    #[doc = ""]
                    #[doc = "The caller pays no fee if at least 90% of pre-images were successfully updated."]
                    ensure_updated {
                        hashes: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::utils::H256,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooBig,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                    #[codec(index = 6)]
                    #[doc = "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."]
                    TooMany,
                    #[codec(index = 7)]
                    #[doc = "Too few hashes were requested to be upgraded (i.e. zero)."]
                    TooFew,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    Preimage,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum OldRequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested {
                    deposit: (_0, _1),
                    len: ::core::primitive::u32,
                },
                #[codec(index = 1)]
                Requested {
                    deposit: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    len: ::core::option::Option<::core::primitive::u32>,
                },
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested {
                    ticket: (_0, _1),
                    len: ::core::primitive::u32,
                },
                #[codec(index = 1)]
                Requested {
                    maybe_ticket: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    maybe_len: ::core::option::Option<::core::primitive::u32>,
                },
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    proxy {
                        real: runtime_types::account::AccountId20,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::mainnet_runtime::ProxyType>,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                    #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    add_proxy {
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Unregister a proxy account for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                    #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                    remove_proxy {
                        delegate: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Unregister all proxy accounts for the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                    #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                    remove_proxies,
                    #[codec(index = 4)]
                    #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                    #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin."]
                    #[doc = ""]
                    #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                    #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                    #[doc = "allow for maximum flexibility."]
                    #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                    #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                    #[doc = "want to use `0`."]
                    #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                    #[doc = "zero."]
                    #[doc = ""]
                    #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                    #[doc = "same sender, with the same parameters."]
                    #[doc = ""]
                    #[doc = "Fails if there are insufficient funds to pay for deposit."]
                    create_pure {
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "Removes a previously spawned pure proxy."]
                    #[doc = ""]
                    #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                    #[doc = "inaccessible."]
                    #[doc = ""]
                    #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                    #[doc = "`pure` with corresponding parameters."]
                    #[doc = ""]
                    #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                    #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                    #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                    #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                    #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                    #[doc = ""]
                    #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                    #[doc = "account whose `pure` call has corresponding parameters."]
                    kill_pure {
                        spawner: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u32,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                    #[doc = ""]
                    #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                    #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                    #[doc = ""]
                    #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                    #[doc = ""]
                    #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                    #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    announce {
                        real: runtime_types::account::AccountId20,
                        call_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "Remove a given announcement."]
                    #[doc = ""]
                    #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                    #[doc = "the deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                    remove_announcement {
                        real: runtime_types::account::AccountId20,
                        call_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "Remove the given announcement of a delegate."]
                    #[doc = ""]
                    #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                    #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `delegate`: The account that previously announced the call."]
                    #[doc = "- `call_hash`: The hash of the call to be made."]
                    reject_announcement {
                        delegate: runtime_types::account::AccountId20,
                        call_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                    #[doc = "`add_proxy`."]
                    #[doc = ""]
                    #[doc = "Removes any corresponding announcement(s)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                    #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                    #[doc = "- `call`: The call to be made by the `real` account."]
                    proxy_announced {
                        delegate: runtime_types::account::AccountId20,
                        real: runtime_types::account::AccountId20,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::mainnet_runtime::ProxyType>,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A proxy was executed correctly, with the given."]
                    ProxyExecuted {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A pure account has been created by new proxy with given"]
                    #[doc = "disambiguation index and proxy type."]
                    PureCreated {
                        pure: runtime_types::account::AccountId20,
                        who: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "An announcement was placed to make a call in the future."]
                    Announced {
                        real: runtime_types::account::AccountId20,
                        proxy: runtime_types::account::AccountId20,
                        call_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proxy was added."]
                    ProxyAdded {
                        delegator: runtime_types::account::AccountId20,
                        delegatee: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proxy was removed."]
                    ProxyRemoved {
                        delegator: runtime_types::account::AccountId20,
                        delegatee: runtime_types::account::AccountId20,
                        proxy_type: runtime_types::mainnet_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Anonymously schedule a task."]
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Cancel an anonymously scheduled task."]
                    cancel {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Schedule a named task."]
                    schedule_named {
                        id: [::core::primitive::u8; 32usize],
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a named scheduled task."]
                    cancel_named {
                        id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 4)]
                    #[doc = "Anonymously schedule a task after a delay."]
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a named task after a delay."]
                    schedule_named_after {
                        id: [::core::primitive::u8; 32usize],
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Set a retry configuration for a task so that, in case its scheduled run fails, it will"]
                    #[doc = "be retried after `period` blocks, for a total amount of `retries` retries or until it"]
                    #[doc = "succeeds."]
                    #[doc = ""]
                    #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                    #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                    #[doc = "normally while the task is retrying."]
                    #[doc = ""]
                    #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                    #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                    #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                    #[doc = "original `total_retries`."]
                    set_retry {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        retries: ::core::primitive::u8,
                        period: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Set a retry configuration for a named task so that, in case its scheduled run fails, it"]
                    #[doc = "will be retried after `period` blocks, for a total amount of `retries` retries or until"]
                    #[doc = "it succeeds."]
                    #[doc = ""]
                    #[doc = "Tasks which need to be scheduled for a retry are still subject to weight metering and"]
                    #[doc = "agenda space, same as a regular task. If a periodic task fails, it will be scheduled"]
                    #[doc = "normally while the task is retrying."]
                    #[doc = ""]
                    #[doc = "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic"]
                    #[doc = "clones of the original task. Their retry configuration will be derived from the"]
                    #[doc = "original task's configuration, but will have a lower value for `remaining` than the"]
                    #[doc = "original `total_retries`."]
                    set_retry_named {
                        id: [::core::primitive::u8; 32usize],
                        retries: ::core::primitive::u8,
                        period: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Removes the retry configuration of a task."]
                    cancel_retry {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                    },
                    #[codec(index = 9)]
                    #[doc = "Cancel the retry configuration of a named task."]
                    cancel_retry_named {
                        id: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                    #[codec(index = 4)]
                    #[doc = "Attempt to use a non-named function on a named task."]
                    Named,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Scheduled some task."]
                    Scheduled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Canceled some task."]
                    Canceled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Dispatched some task."]
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set a retry configuration for some task."]
                    RetrySet {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        period: ::core::primitive::u32,
                        retries: ::core::primitive::u8,
                    },
                    #[codec(index = 4)]
                    #[doc = "Cancel a retry configuration for some task."]
                    RetryCancelled {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    #[doc = "The call for the provided hash was not found so the task has been aborted."]
                    CallUnavailable {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 6)]
                    #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
                    PeriodicFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 7)]
                    #[doc = "The given task was unable to be retried since the agenda is full at that block or there"]
                    #[doc = "was not enough weight to reschedule it."]
                    RetryFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 8)]
                    #[doc = "The given task can never be executed since it is overweight."]
                    PermanentlyOverweight {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RetryConfig<_0> {
                pub total_retries: ::core::primitive::u8,
                pub remaining: ::core::primitive::u8,
                pub period: _0,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Scheduled<_0, _1, _2, _3, _4> {
                pub maybe_id: ::core::option::Option<_0>,
                pub priority: ::core::primitive::u8,
                pub call: _1,
                pub maybe_periodic: ::core::option::Option<(_2, _2)>,
                pub origin: _3,
                #[codec(skip)]
                pub __ignore: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the session key(s) of the function caller to `keys`."]
                    #[doc = "Allows an account to set its session key prior to becoming a validator."]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be signed."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                    #[doc = "  fixed."]
                    set_keys {
                        keys: runtime_types::mainnet_runtime::SessionKeys,
                        proof: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Removes any session key(s) of the function caller."]
                    #[doc = ""]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                    #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                    #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                    #[doc = "usually means being a stash account)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                    #[doc = "  `T::Keys::key_ids()` which is fixed."]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    sudo {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    sudo_unchecked_weight {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    set_key {
                        new: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    sudo_as {
                        who: runtime_types::account::AccountId20,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Permanently removes the sudo key."]
                    #[doc = ""]
                    #[doc = "**This cannot be un-done.**"]
                    remove_key,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the Sudo pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account."]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo call just took place."]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The sudo key has been updated."]
                    KeyChanged {
                        old: ::core::option::Option<runtime_types::account::AccountId20>,
                        new: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "The key was permanently removed."]
                    KeyRemoved,
                    #[codec(index = 3)]
                    #[doc = "A [sudo_as](Pallet::sudo_as) call just took place."]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "[`Config::MinimumPeriod`]."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _None_."]
                    #[doc = ""]
                    #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                    #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                    #[doc = "block to execute any other calls."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: runtime_types::account::AccountId20,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FeeDetails<_0> {
                    pub inclusion_fee: ::core::option::Option<
                        runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
                    >,
                    pub tip: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InclusionFee<_0> {
                    pub base_fee: _0,
                    pub len_fee: _0,
                    pub adjusted_weight_fee: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RuntimeDispatchInfo<_0, _1> {
                    pub weight: _1,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub partial_fee: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 3)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                    #[doc = ""]
                    #[doc = "### Details"]
                    #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                    #[doc = "beneficiary."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The destination account for the transfer."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::SpendApproved`] if successful."]
                    spend_local {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::RejectOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "The original deposit will no longer be returned."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `proposal_id`: The index of a proposal"]
                    #[doc = ""]
                    #[doc = "### Complexity"]
                    #[doc = "- O(A) where `A` is the number of approvals"]
                    #[doc = ""]
                    #[doc = "### Errors"]
                    #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                    #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                    #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                    #[doc = "  in the first place."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                    #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                    #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                    #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                    #[doc = "the [`Config::PayoutPeriod`]."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The beneficiary of the spend."]
                    #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                    #[doc = "  the past if the resulting spend has not yet expired according to the"]
                    #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                    #[doc = "  approval."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                    spend {
                        asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box<()>,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::account::AccountId20,
                        >,
                        valid_from: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Claim a spend."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be signed"]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                    #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                    #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                    #[doc = "dispatchable before retrying with the current function."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::Paid`] if successful."]
                    payout { index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "Check the status of the spend and remove it from the storage if processed."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be signed."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "The status check is a prerequisite for retrying a failed payout."]
                    #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                    #[doc = "function. In such instances, transaction fees are refunded."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                    #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                    check_status { index: ::core::primitive::u32 },
                    #[codec(index = 8)]
                    #[doc = "Void previously approved spend."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::RejectOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                    void_spend { index: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "No proposal, bounty or spend at that index."]
                    InvalidIndex,
                    #[codec(index = 1)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 2)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 3)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                    #[codec(index = 4)]
                    #[doc = "The balance of the asset kind is not convertible to the balance of the native asset."]
                    FailedToConvertBalance,
                    #[codec(index = 5)]
                    #[doc = "The spend has expired and cannot be claimed."]
                    SpendExpired,
                    #[codec(index = 6)]
                    #[doc = "The spend is not yet eligible for payout."]
                    EarlyPayout,
                    #[codec(index = 7)]
                    #[doc = "The payment has already been attempted."]
                    AlreadyAttempted,
                    #[codec(index = 8)]
                    #[doc = "There was some issue with the mechanism of payment."]
                    PayoutError,
                    #[codec(index = 9)]
                    #[doc = "The payout was not yet attempted/claimed."]
                    NotAttempted,
                    #[codec(index = 10)]
                    #[doc = "The payment has neither failed nor succeeded yet."]
                    Inconclusive,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 5)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "The inactive funds of the pallet have been updated."]
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "A new asset spend proposal has been approved."]
                    AssetSpendApproved {
                        index: ::core::primitive::u32,
                        asset_kind: (),
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::account::AccountId20,
                        valid_from: ::core::primitive::u32,
                        expire_at: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "An approved spend was voided."]
                    AssetSpendVoided { index: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "A payment happened."]
                    Paid {
                        index: ::core::primitive::u32,
                        payment_id: (),
                    },
                    #[codec(index = 10)]
                    #[doc = "A payment failed and can be retried."]
                    PaymentFailed {
                        index: ::core::primitive::u32,
                        payment_id: (),
                    },
                    #[codec(index = 11)]
                    #[doc = "A spend was processed and removed from the storage. It might have been successfully"]
                    #[doc = "paid or it may have expired."]
                    SpendProcessed { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum PaymentState<_0> {
                #[codec(index = 0)]
                Pending,
                #[codec(index = 1)]
                Attempted { id: _0 },
                #[codec(index = 2)]
                Failed,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SpendStatus<_0, _1, _2, _3, _4> {
                pub asset_kind: _0,
                pub amount: _1,
                pub beneficiary: _2,
                pub valid_from: _3,
                pub expire_at: _3,
                pub status: runtime_types::pallet_treasury::PaymentState<_0>,
                #[codec(skip)]
                pub __ignore: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    batch_all {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    dispatch_as {
                        as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::OriginCaller,
                        >,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    force_batch {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Dispatch a function call with a specified weight."]
                    #[doc = ""]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Root origin to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    with_weight {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::mainnet_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vesting {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Unlock any vested funds of the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = ""]
                    #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    vest,
                    #[codec(index = 1)]
                    #[doc = "Unlock any vested funds of a `target` account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = ""]
                    #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    vest_other {
                        target: runtime_types::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Create a vested transfer."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account receiving the vested funds."]
                    #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                    #[doc = ""]
                    #[doc = "Emits `VestingCreated`."]
                    #[doc = ""]
                    #[doc = "NOTE: This will unlock all schedules through the current block."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    vested_transfer {
                        target: runtime_types::account::AccountId20,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Force a vested transfer."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `source`: The account whose funds should be transferred."]
                    #[doc = "- `target`: The account that should be transferred the vested funds."]
                    #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                    #[doc = ""]
                    #[doc = "Emits `VestingCreated`."]
                    #[doc = ""]
                    #[doc = "NOTE: This will unlock all schedules through the current block."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    force_vested_transfer {
                        source: runtime_types::account::AccountId20,
                        target: runtime_types::account::AccountId20,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                    #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                    #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                    #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                    #[doc = "unmodified."]
                    #[doc = ""]
                    #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                    #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                    #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                    #[doc = "and both will be removed."]
                    #[doc = ""]
                    #[doc = "Merged schedule attributes:"]
                    #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                    #[doc = "  current_block)`."]
                    #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                    #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                    #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                    merge_schedules {
                        schedule1_index: ::core::primitive::u32,
                        schedule2_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Force remove a vesting schedule"]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `target`: An account that has a vesting schedule"]
                    #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                    force_remove_vesting_schedule {
                        target: runtime_types::account::AccountId20,
                        schedule_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the vesting pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The account given is not vesting."]
                    NotVesting,
                    #[codec(index = 1)]
                    #[doc = "The account already has `MaxVestingSchedules` count of schedules and thus"]
                    #[doc = "cannot add another one. Consider merging existing schedules in order to add another."]
                    AtMaxVestingSchedules,
                    #[codec(index = 2)]
                    #[doc = "Amount being transferred is too low to create a vesting schedule."]
                    AmountLow,
                    #[codec(index = 3)]
                    #[doc = "An index was out of bounds of the vesting schedules."]
                    ScheduleIndexOutOfBounds,
                    #[codec(index = 4)]
                    #[doc = "Failed to create a new schedule because some parameter was invalid."]
                    InvalidScheduleParams,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
                    #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
                    VestingUpdated {
                        account: runtime_types::account::AccountId20,
                        unvested: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An \\[account\\] has become fully vested."]
                    VestingCompleted {
                        account: runtime_types::account::AccountId20,
                    },
                }
            }
            pub mod vesting_info {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct VestingInfo<_0, _1> {
                    pub locked: _0,
                    pub per_block: _0,
                    pub starting_block: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_xcm {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] send { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , message : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedXcm > , } , # [codec (index = 1)] # [doc = "Teleport some assets from the local chain to some destination chain."] # [doc = ""] # [doc = "**This function is deprecated: Use `limited_teleport_assets` instead.**"] # [doc = ""] # [doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"] # [doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"] # [doc = "with all fees taken as needed from the asset."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"] # [doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"] # [doc = "  relay to parachain."] # [doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"] # [doc = "  generally be an `AccountId32` value."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` chain."] # [doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"] # [doc = "  fees."] teleport_assets { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , fee_asset_item : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Transfer some assets from the local chain to the destination chain through their local,"] # [doc = "destination or remote reserve."] # [doc = ""] # [doc = "`assets` must have same reserve location and may not be teleportable to `dest`."] # [doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"] # [doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"] # [doc = "   assets to `beneficiary`."] # [doc = " - `assets` have destination reserve: burn local assets and forward a notification to"] # [doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"] # [doc = "   deposit them to `beneficiary`."] # [doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"] # [doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"] # [doc = "   to mint and deposit reserve-based assets to `beneficiary`."] # [doc = ""] # [doc = "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**"] # [doc = ""] # [doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"] # [doc = "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,"] # [doc = "with all fees taken as needed from the asset."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"] # [doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"] # [doc = "  relay to parachain."] # [doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"] # [doc = "  generally be an `AccountId32` value."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` (and possibly reserve) chains."] # [doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"] # [doc = "  fees."] reserve_transfer_assets { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , fee_asset_item : :: core :: primitive :: u32 , } , # [codec (index = 3)] # [doc = "Execute an XCM message from a local, signed, origin."] # [doc = ""] # [doc = "An event is deposited indicating whether `msg` could be executed completely or only"] # [doc = "partially."] # [doc = ""] # [doc = "No more than `max_weight` will be used in its attempted execution. If this is less than"] # [doc = "the maximum amount of weight that the message could take to be executed, then no"] # [doc = "execution attempt will be made."] execute { message : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedXcm > , max_weight : runtime_types :: sp_weights :: weight_v2 :: Weight , } , # [codec (index = 4)] # [doc = "Extoll that a particular destination can be communicated with through a particular"] # [doc = "version of XCM."] # [doc = ""] # [doc = "- `origin`: Must be an origin specified by AdminOrigin."] # [doc = "- `location`: The destination that is being described."] # [doc = "- `xcm_version`: The latest version of XCM that `location` supports."] force_xcm_version { location : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: staging_xcm :: v5 :: location :: Location > , version : :: core :: primitive :: u32 , } , # [codec (index = 5)] # [doc = "Set a safe XCM version (the version that XCM should be encoded with if the most recent"] # [doc = "version a destination can accept is unknown)."] # [doc = ""] # [doc = "- `origin`: Must be an origin specified by AdminOrigin."] # [doc = "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."] force_default_xcm_version { maybe_xcm_version : :: core :: option :: Option < :: core :: primitive :: u32 > , } , # [codec (index = 6)] # [doc = "Ask a location to notify us regarding their XCM version and any changes to it."] # [doc = ""] # [doc = "- `origin`: Must be an origin specified by AdminOrigin."] # [doc = "- `location`: The location to which we should subscribe for XCM version notifications."] force_subscribe_version_notify { location : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , } , # [codec (index = 7)] # [doc = "Require that a particular destination should no longer notify us regarding any XCM"] # [doc = "version changes."] # [doc = ""] # [doc = "- `origin`: Must be an origin specified by AdminOrigin."] # [doc = "- `location`: The location to which we are currently subscribed for XCM version"] # [doc = "  notifications which we no longer desire."] force_unsubscribe_version_notify { location : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , } , # [codec (index = 8)] # [doc = "Transfer some assets from the local chain to the destination chain through their local,"] # [doc = "destination or remote reserve."] # [doc = ""] # [doc = "`assets` must have same reserve location and may not be teleportable to `dest`."] # [doc = " - `assets` have local reserve: transfer assets to sovereign account of destination"] # [doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"] # [doc = "   assets to `beneficiary`."] # [doc = " - `assets` have destination reserve: burn local assets and forward a notification to"] # [doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"] # [doc = "   deposit them to `beneficiary`."] # [doc = " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move"] # [doc = "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`"] # [doc = "   to mint and deposit reserve-based assets to `beneficiary`."] # [doc = ""] # [doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"] # [doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"] # [doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"] # [doc = "at risk."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"] # [doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"] # [doc = "  relay to parachain."] # [doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"] # [doc = "  generally be an `AccountId32` value."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` (and possibly reserve) chains."] # [doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"] # [doc = "  fees."] # [doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] limited_reserve_transfer_assets { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , fee_asset_item : :: core :: primitive :: u32 , weight_limit : runtime_types :: xcm :: v3 :: WeightLimit , } , # [codec (index = 9)] # [doc = "Teleport some assets from the local chain to some destination chain."] # [doc = ""] # [doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"] # [doc = "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight"] # [doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"] # [doc = "at risk."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"] # [doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"] # [doc = "  relay to parachain."] # [doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"] # [doc = "  generally be an `AccountId32` value."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` chain."] # [doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"] # [doc = "  fees."] # [doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] limited_teleport_assets { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , fee_asset_item : :: core :: primitive :: u32 , weight_limit : runtime_types :: xcm :: v3 :: WeightLimit , } , # [codec (index = 10)] # [doc = "Set or unset the global suspension state of the XCM executor."] # [doc = ""] # [doc = "- `origin`: Must be an origin specified by AdminOrigin."] # [doc = "- `suspended`: `true` to suspend, `false` to resume."] force_suspension { suspended : :: core :: primitive :: bool , } , # [codec (index = 11)] # [doc = "Transfer some assets from the local chain to the destination chain through their local,"] # [doc = "destination or remote reserve, or through teleports."] # [doc = ""] # [doc = "Fee payment on the destination side is made from the asset in the `assets` vector of"] # [doc = "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for"] # [doc = "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the"] # [doc = "operation will fail and the sent assets may be at risk."] # [doc = ""] # [doc = "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable"] # [doc = "to `dest`, no limitations imposed on `fees`."] # [doc = " - for local reserve: transfer assets to sovereign account of destination chain and"] # [doc = "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to"] # [doc = "   `beneficiary`."] # [doc = " - for destination reserve: burn local assets and forward a notification to `dest` chain"] # [doc = "   to withdraw the reserve assets from this chain's sovereign account and deposit them"] # [doc = "   to `beneficiary`."] # [doc = " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves"] # [doc = "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint"] # [doc = "   and deposit reserve-based assets to `beneficiary`."] # [doc = " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport"] # [doc = "   assets and deposit them to `beneficiary`."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `X2(Parent,"] # [doc = "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send"] # [doc = "  from relay to parachain."] # [doc = "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will"] # [doc = "  generally be an `AccountId32` value."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` (and possibly reserve) chains."] # [doc = "- `fee_asset_item`: The index into `assets` of the item which should be used to pay"] # [doc = "  fees."] # [doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] transfer_assets { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , fee_asset_item : :: core :: primitive :: u32 , weight_limit : runtime_types :: xcm :: v3 :: WeightLimit , } , # [codec (index = 12)] # [doc = "Claims assets trapped on this pallet because of leftover assets during XCM execution."] # [doc = ""] # [doc = "- `origin`: Anyone can call this extrinsic."] # [doc = "- `assets`: The exact assets that were trapped. Use the version to specify what version"] # [doc = "was the latest when they were trapped."] # [doc = "- `beneficiary`: The location/account where the claimed assets will be deposited."] claim_assets { assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , beneficiary : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , } , # [codec (index = 13)] # [doc = "Transfer assets from the local chain to the destination chain using explicit transfer"] # [doc = "types for assets and fees."] # [doc = ""] # [doc = "`assets` must have same reserve location or may be teleportable to `dest`. Caller must"] # [doc = "provide the `assets_transfer_type` to be used for `assets`:"] # [doc = " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination"] # [doc = "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based"] # [doc = "   assets to `beneficiary`."] # [doc = " - `TransferType::DestinationReserve`: burn local assets and forward a notification to"] # [doc = "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and"] # [doc = "   deposit them to `beneficiary`."] # [doc = " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`"] # [doc = "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another"] # [doc = "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically"] # [doc = "   the remote `reserve` is Asset Hub."] # [doc = " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to"] # [doc = "   mint/teleport assets and deposit them to `beneficiary`."] # [doc = ""] # [doc = "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to"] # [doc = "buy execution using transferred `assets` identified by `remote_fees_id`."] # [doc = "Make sure enough of the specified `remote_fees_id` asset is included in the given list"] # [doc = "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight"] # [doc = "is needed than `weight_limit`, then the operation will fail and the sent assets may be"] # [doc = "at risk."] # [doc = ""] # [doc = "`remote_fees_id` may use different transfer type than rest of `assets` and can be"] # [doc = "specified through `fees_transfer_type`."] # [doc = ""] # [doc = "The caller needs to specify what should happen to the transferred assets once they reach"] # [doc = "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which"] # [doc = "contains the instructions to execute on `dest` as a final step."] # [doc = "  This is usually as simple as:"] # [doc = "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,"] # [doc = "  but could be something more exotic like sending the `assets` even further."] # [doc = ""] # [doc = "- `origin`: Must be capable of withdrawing the `assets` and executing XCM."] # [doc = "- `dest`: Destination context for the assets. Will typically be `[Parent,"] # [doc = "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from"] # [doc = "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from"] # [doc = "  parachain across a bridge to another ecosystem destination."] # [doc = "- `assets`: The assets to be withdrawn. This should include the assets used to pay the"] # [doc = "  fee on the `dest` (and possibly reserve) chains."] # [doc = "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`."] # [doc = "- `remote_fees_id`: One of the included `assets` to be used to pay fees."] # [doc = "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets."] # [doc = "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the"] # [doc = "  transfer, which also determines what happens to the assets on the destination chain."] # [doc = "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."] transfer_assets_using_type_and_then { dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedLocation > , assets : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssets > , assets_transfer_type : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: staging_xcm_executor :: traits :: asset_transfer :: TransferType > , remote_fees_id : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedAssetId > , fees_transfer_type : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: staging_xcm_executor :: traits :: asset_transfer :: TransferType > , custom_xcm_on_dest : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: xcm :: VersionedXcm > , weight_limit : runtime_types :: xcm :: v3 :: WeightLimit , } , }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The desired destination was unreachable, generally because there is a no way of routing"]
                    #[doc = "to it."]
                    Unreachable,
                    #[codec(index = 1)]
                    #[doc = "There was some other issue (i.e. not to do with routing) in sending the message."]
                    #[doc = "Perhaps a lack of space for buffering the message."]
                    SendFailure,
                    #[codec(index = 2)]
                    #[doc = "The message execution fails the filter."]
                    Filtered,
                    #[codec(index = 3)]
                    #[doc = "The message's weight could not be determined."]
                    UnweighableMessage,
                    #[codec(index = 4)]
                    #[doc = "The destination `Location` provided cannot be inverted."]
                    DestinationNotInvertible,
                    #[codec(index = 5)]
                    #[doc = "The assets to be sent are empty."]
                    Empty,
                    #[codec(index = 6)]
                    #[doc = "Could not re-anchor the assets to declare the fees for the destination chain."]
                    CannotReanchor,
                    #[codec(index = 7)]
                    #[doc = "Too many assets have been attempted for transfer."]
                    TooManyAssets,
                    #[codec(index = 8)]
                    #[doc = "Origin is invalid for sending."]
                    InvalidOrigin,
                    #[codec(index = 9)]
                    #[doc = "The version of the `Versioned` value used is not able to be interpreted."]
                    BadVersion,
                    #[codec(index = 10)]
                    #[doc = "The given location could not be used (e.g. because it cannot be expressed in the"]
                    #[doc = "desired version of XCM)."]
                    BadLocation,
                    #[codec(index = 11)]
                    #[doc = "The referenced subscription could not be found."]
                    NoSubscription,
                    #[codec(index = 12)]
                    #[doc = "The location is invalid since it already has a subscription from us."]
                    AlreadySubscribed,
                    #[codec(index = 13)]
                    #[doc = "Could not check-out the assets for teleportation to the destination chain."]
                    CannotCheckOutTeleport,
                    #[codec(index = 14)]
                    #[doc = "The owner does not own (all) of the asset that they wish to do the operation on."]
                    LowBalance,
                    #[codec(index = 15)]
                    #[doc = "The asset owner has too many locks on the asset."]
                    TooManyLocks,
                    #[codec(index = 16)]
                    #[doc = "The given account is not an identifiable sovereign account for any location."]
                    AccountNotSovereign,
                    #[codec(index = 17)]
                    #[doc = "The operation required fees to be paid which the initiator could not meet."]
                    FeesNotMet,
                    #[codec(index = 18)]
                    #[doc = "A remote lock with the corresponding data could not be found."]
                    LockNotFound,
                    #[codec(index = 19)]
                    #[doc = "The unlock operation cannot succeed because there are still consumers of the lock."]
                    InUse,
                    #[codec(index = 21)]
                    #[doc = "Invalid asset, reserve chain could not be determined for it."]
                    InvalidAssetUnknownReserve,
                    #[codec(index = 22)]
                    #[doc = "Invalid asset, do not support remote asset reserves with different fees reserves."]
                    InvalidAssetUnsupportedReserve,
                    #[codec(index = 23)]
                    #[doc = "Too many assets with different reserve locations have been attempted for transfer."]
                    TooManyReserves,
                    #[codec(index = 24)]
                    #[doc = "Local XCM execution incomplete."]
                    LocalExecutionIncomplete,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Execution of an XCM message was attempted."]
                    Attempted {
                        outcome: runtime_types::staging_xcm::v5::traits::Outcome,
                    },
                    #[codec(index = 1)]
                    #[doc = "A XCM message was sent."]
                    Sent {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        message: runtime_types::staging_xcm::v5::Xcm,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "Query response received which does not match a registered query. This may be because a"]
                    #[doc = "matching query was never registered, it may be because it is a duplicate response, or"]
                    #[doc = "because the query timed out."]
                    UnexpectedResponse {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Query response has been received and is ready for taking with `take_response`. There is"]
                    #[doc = "no registered notification call."]
                    ResponseReady {
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v5::Response,
                    },
                    #[codec(index = 4)]
                    #[doc = "Query response has been received and query is removed. The registered notification has"]
                    #[doc = "been dispatched and executed successfully."]
                    Notified {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 5)]
                    #[doc = "Query response has been received and query is removed. The registered notification"]
                    #[doc = "could not be dispatched because the dispatch weight is greater than the maximum weight"]
                    #[doc = "originally budgeted by this runtime for the query result."]
                    NotifyOverweight {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                        actual_weight: runtime_types::sp_weights::weight_v2::Weight,
                        max_budgeted_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 6)]
                    #[doc = "Query response has been received and query is removed. There was a general error with"]
                    #[doc = "dispatching the notification call."]
                    NotifyDispatchError {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 7)]
                    #[doc = "Query response has been received and query is removed. The dispatch was unable to be"]
                    #[doc = "decoded into a `Call`; this might be due to dispatch function having a signature which"]
                    #[doc = "is not `(origin, QueryId, Response)`."]
                    NotifyDecodeFailed {
                        query_id: ::core::primitive::u64,
                        pallet_index: ::core::primitive::u8,
                        call_index: ::core::primitive::u8,
                    },
                    #[codec(index = 8)]
                    #[doc = "Expected query response has been received but the origin location of the response does"]
                    #[doc = "not match that expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    InvalidResponder {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                        expected_location: ::core::option::Option<
                            runtime_types::staging_xcm::v5::location::Location,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Expected query response has been received but the expected origin location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    InvalidResponderVersion {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 10)]
                    #[doc = "Received query response has been read and removed."]
                    ResponseTaken { query_id: ::core::primitive::u64 },
                    #[codec(index = 11)]
                    #[doc = "Some assets have been placed in an asset trap."]
                    AssetsTrapped {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        assets: runtime_types::xcm::VersionedAssets,
                    },
                    #[codec(index = 12)]
                    #[doc = "An XCM version change notification message has been attempted to be sent."]
                    #[doc = ""]
                    #[doc = "The cost of sending it (borne by the chain) is included."]
                    VersionChangeNotified {
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        result: ::core::primitive::u32,
                        cost: runtime_types::staging_xcm::v5::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 13)]
                    #[doc = "The supported version of a location has been changed. This might be through an"]
                    #[doc = "automatic notification or a manual intervention."]
                    SupportedVersionChanged {
                        location: runtime_types::staging_xcm::v5::location::Location,
                        version: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "sending the notification to it."]
                    NotifyTargetSendFail {
                        location: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                        error: runtime_types::xcm::v5::traits::Error,
                    },
                    #[codec(index = 15)]
                    #[doc = "A given location which had a version change subscription was dropped owing to an error"]
                    #[doc = "migrating the location to our new XCM format."]
                    NotifyTargetMigrationFail {
                        location: runtime_types::xcm::VersionedLocation,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 16)]
                    #[doc = "Expected query response has been received but the expected querier location placed in"]
                    #[doc = "storage by this runtime previously cannot be decoded. The query remains registered."]
                    #[doc = ""]
                    #[doc = "This is unexpected (since a location placed in storage in a previously executing"]
                    #[doc = "runtime should be readable prior to query timeout) and dangerous since the possibly"]
                    #[doc = "valid response will be dropped. Manual governance intervention is probably going to be"]
                    #[doc = "needed."]
                    InvalidQuerierVersion {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                    },
                    #[codec(index = 17)]
                    #[doc = "Expected query response has been received but the querier location of the response does"]
                    #[doc = "not match the expected. The query remains registered for a later, valid, response to"]
                    #[doc = "be received and acted upon."]
                    InvalidQuerier {
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        query_id: ::core::primitive::u64,
                        expected_querier: runtime_types::staging_xcm::v5::location::Location,
                        maybe_actual_querier: ::core::option::Option<
                            runtime_types::staging_xcm::v5::location::Location,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "A remote has requested XCM version change notification from us and we have honored it."]
                    #[doc = "A version information message is sent to them and its cost is included."]
                    VersionNotifyStarted {
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        cost: runtime_types::staging_xcm::v5::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 19)]
                    #[doc = "We have requested that a remote chain send us XCM version change notifications."]
                    VersionNotifyRequested {
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        cost: runtime_types::staging_xcm::v5::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 20)]
                    #[doc = "We have requested that a remote chain stops sending us XCM version change"]
                    #[doc = "notifications."]
                    VersionNotifyUnrequested {
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        cost: runtime_types::staging_xcm::v5::asset::Assets,
                        message_id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 21)]
                    #[doc = "Fees were paid from a location for an operation (often for using `SendXcm`)."]
                    FeesPaid {
                        paying: runtime_types::staging_xcm::v5::location::Location,
                        fees: runtime_types::staging_xcm::v5::asset::Assets,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some assets have been claimed from an asset trap"]
                    AssetsClaimed {
                        hash: ::subxt::ext::subxt_core::utils::H256,
                        origin: runtime_types::staging_xcm::v5::location::Location,
                        assets: runtime_types::xcm::VersionedAssets,
                    },
                    #[codec(index = 23)]
                    #[doc = "A XCM version migration finished."]
                    VersionMigrationFinished { version: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Origin {
                    #[codec(index = 0)]
                    Xcm(runtime_types::staging_xcm::v5::location::Location),
                    #[codec(index = 1)]
                    Response(runtime_types::staging_xcm::v5::location::Location),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum QueryStatus<_0> {
                    #[codec(index = 0)]
                    Pending {
                        responder: runtime_types::xcm::VersionedLocation,
                        maybe_match_querier:
                            ::core::option::Option<runtime_types::xcm::VersionedLocation>,
                        maybe_notify:
                            ::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
                        timeout: _0,
                    },
                    #[codec(index = 1)]
                    VersionNotifier {
                        origin: runtime_types::xcm::VersionedLocation,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    Ready {
                        response: runtime_types::xcm::VersionedResponse,
                        at: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RemoteLockedFungibleRecord<_0> {
                    pub amount: ::core::primitive::u128,
                    pub owner: runtime_types::xcm::VersionedLocation,
                    pub locker: runtime_types::xcm::VersionedLocation,
                    pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        _0,
                        ::core::primitive::u128,
                    )>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum VersionMigrationStage {
                    #[codec(index = 0)]
                    MigrateSupportedVersion,
                    #[codec(index = 1)]
                    MigrateVersionNotifiers,
                    #[codec(index = 2)]
                    NotifyCurrentTargets(
                        ::core::option::Option<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >,
                    ),
                    #[codec(index = 3)]
                    MigrateAndNotifyOldTargets,
                }
            }
        }
        pub mod polkadot_core_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct InboundDownwardMessage<_0> {
                pub sent_at: _0,
                pub msg: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct InboundHrmpMessage<_0> {
                pub sent_at: _0,
                pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct OutboundHrmpMessage<_0> {
                pub recipient: _0,
                pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod polkadot_parachain_primitives {
            use super::runtime_types;
            pub mod primitives {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct HeadData(
                    pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                );
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Id(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ValidationCode(
                    pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                );
            }
        }
        pub mod polkadot_primitives {
            use super::runtime_types;
            pub mod v8 {
                use super::runtime_types;
                pub mod async_backing {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct AsyncBackingParams {
                        pub max_candidate_depth: ::core::primitive::u32,
                        pub allowed_ancestry_len: ::core::primitive::u32,
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AbridgedHostConfiguration {
                    pub max_code_size: ::core::primitive::u32,
                    pub max_head_data_size: ::core::primitive::u32,
                    pub max_upward_queue_count: ::core::primitive::u32,
                    pub max_upward_queue_size: ::core::primitive::u32,
                    pub max_upward_message_size: ::core::primitive::u32,
                    pub max_upward_message_num_per_candidate: ::core::primitive::u32,
                    pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
                    pub validation_upgrade_cooldown: ::core::primitive::u32,
                    pub validation_upgrade_delay: ::core::primitive::u32,
                    pub async_backing_params:
                        runtime_types::polkadot_primitives::v8::async_backing::AsyncBackingParams,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AbridgedHrmpChannel {
                    pub max_capacity: ::core::primitive::u32,
                    pub max_total_size: ::core::primitive::u32,
                    pub max_message_size: ::core::primitive::u32,
                    pub msg_count: ::core::primitive::u32,
                    pub total_size: ::core::primitive::u32,
                    pub mqc_head: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PersistedValidationData<_0, _1> {
                    pub parent_head:
                        runtime_types::polkadot_parachain_primitives::primitives::HeadData,
                    pub relay_parent_number: _1,
                    pub relay_parent_storage_root: _0,
                    pub max_pov_size: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum UpgradeGoAhead {
                    #[codec(index = 0)]
                    Abort,
                    #[codec(index = 1)]
                    GoAhead,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum UpgradeRestriction {
                    #[codec(index = 0)]
                    Present,
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct U256(pub [::core::primitive::u64; 4usize]);
        }
        pub mod runtime_common {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct IncrementableU256(pub runtime_types::primitive_types::U256);
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Permill(pub ::core::primitive::u32);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Public(pub [::core::primitive::u8; 32usize]);
                }
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SlotDuration(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct OpaqueMetadata(
                pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            );
        }
        pub mod sp_inherents {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CheckInherentsResult {
                pub okay: ::core::primitive::bool,
                pub fatal_error: ::core::primitive::bool,
                pub errors: runtime_types::sp_inherents::InherentData,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct InherentData {
                pub data: ::subxt::ext::subxt_core::utils::KeyedVec<
                    [::core::primitive::u8; 8usize],
                    ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                >,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod block {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Block<_0, _1> {
                        pub header: _0,
                        pub extrinsics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
                    }
                }
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Digest {
                        pub logs: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::generic::digest::DigestItem,
                        >,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Header<_0> {
                        pub parent_hash: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::ext::subxt_core::utils::H256,
                        pub extrinsics_root: ::subxt::ext::subxt_core::utils::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                    }
                }
            }
            pub mod proving_trie {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum TrieError {
                    #[codec(index = 0)]
                    InvalidStateRoot,
                    #[codec(index = 1)]
                    IncompleteDatabase,
                    #[codec(index = 2)]
                    ValueAtIncompleteKey,
                    #[codec(index = 3)]
                    DecoderError,
                    #[codec(index = 4)]
                    InvalidHash,
                    #[codec(index = 5)]
                    DuplicateKey,
                    #[codec(index = 6)]
                    ExtraneousNode,
                    #[codec(index = 7)]
                    ExtraneousValue,
                    #[codec(index = 8)]
                    ExtraneousHashReference,
                    #[codec(index = 9)]
                    InvalidChildReference,
                    #[codec(index = 10)]
                    ValueMismatch,
                    #[codec(index = 11)]
                    IncompleteProof,
                    #[codec(index = 12)]
                    RootMismatch,
                    #[codec(index = 13)]
                    DecodeError,
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BlakeTwo256;
            }
            pub mod transaction_validity {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum InvalidTransaction {
                    #[codec(index = 0)]
                    Call,
                    #[codec(index = 1)]
                    Payment,
                    #[codec(index = 2)]
                    Future,
                    #[codec(index = 3)]
                    Stale,
                    #[codec(index = 4)]
                    BadProof,
                    #[codec(index = 5)]
                    AncientBirthBlock,
                    #[codec(index = 6)]
                    ExhaustsResources,
                    #[codec(index = 7)]
                    Custom(::core::primitive::u8),
                    #[codec(index = 8)]
                    BadMandatory,
                    #[codec(index = 9)]
                    MandatoryValidation,
                    #[codec(index = 10)]
                    BadSigner,
                    #[codec(index = 11)]
                    IndeterminateImplicit,
                    #[codec(index = 12)]
                    UnknownOrigin,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum TransactionSource {
                    #[codec(index = 0)]
                    InBlock,
                    #[codec(index = 1)]
                    Local,
                    #[codec(index = 2)]
                    External,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum TransactionValidityError {
                    #[codec(index = 0)]
                    Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
                    #[codec(index = 1)]
                    Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum UnknownTransaction {
                    #[codec(index = 0)]
                    CannotLookup,
                    #[codec(index = 1)]
                    NoUnsignedValidator,
                    #[codec(index = 2)]
                    Custom(::core::primitive::u8),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ValidTransaction {
                    pub priority: ::core::primitive::u64,
                    pub requires: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >,
                    pub provides: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >,
                    pub longevity: ::core::primitive::u64,
                    pub propagate: ::core::primitive::bool,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
                #[codec(index = 14)]
                Trie(runtime_types::sp_runtime::proving_trie::TrieError),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DispatchErrorWithPostInfo<_0> {
                pub post_info: _0,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ExtrinsicInclusionMode {
                #[codec(index = 0)]
                AllExtrinsics,
                #[codec(index = 1)]
                OnlyInherents,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_trie {
            use super::runtime_types;
            pub mod storage_proof {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct StorageProof {
                    pub trie_nodes: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >,
                }
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
                pub impl_name: ::subxt::ext::subxt_core::alloc::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                    [::core::primitive::u8; 8usize],
                    ::core::primitive::u32,
                )>,
                pub transaction_version: ::core::primitive::u32,
                pub system_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod staging_parachain_info {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {}
            }
        }
        pub mod staging_xcm {
            use super::runtime_types;
            pub mod v3 {
                use super::runtime_types;
                pub mod multilocation {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct MultiLocation {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::xcm::v3::junctions::Junctions,
                    }
                }
            }
            pub mod v4 {
                use super::runtime_types;
                pub mod asset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Asset {
                        pub id: runtime_types::staging_xcm::v4::asset::AssetId,
                        pub fun: runtime_types::staging_xcm::v4::asset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::staging_xcm::v4::asset::Assets),
                        #[codec(index = 1)]
                        Wild(runtime_types::staging_xcm::v4::asset::WildAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct AssetId(pub runtime_types::staging_xcm::v4::location::Location);
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Assets(
                        pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::staging_xcm::v4::asset::Asset,
                        >,
                    );
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::staging_xcm::v4::asset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::staging_xcm::v4::asset::AssetId,
                            fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::staging_xcm::v4::asset::AssetId,
                            fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                }
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v4::junction::NetworkId,
                            >,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::staging_xcm::v4::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                        #[codec(index = 10)]
                        PolkadotBulletin,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1([runtime_types::staging_xcm::v4::junction::Junction; 1usize]),
                        #[codec(index = 2)]
                        X2([runtime_types::staging_xcm::v4::junction::Junction; 2usize]),
                        #[codec(index = 3)]
                        X3([runtime_types::staging_xcm::v4::junction::Junction; 3usize]),
                        #[codec(index = 4)]
                        X4([runtime_types::staging_xcm::v4::junction::Junction; 4usize]),
                        #[codec(index = 5)]
                        X5([runtime_types::staging_xcm::v4::junction::Junction; 5usize]),
                        #[codec(index = 6)]
                        X6([runtime_types::staging_xcm::v4::junction::Junction; 6usize]),
                        #[codec(index = 7)]
                        X7([runtime_types::staging_xcm::v4::junction::Junction; 7usize]),
                        #[codec(index = 8)]
                        X8([runtime_types::staging_xcm::v4::junction::Junction; 8usize]),
                    }
                }
                pub mod location {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Location {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::staging_xcm::v4::junctions::Junctions,
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v4::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v3::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::staging_xcm::v4::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        beneficiary: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        want: runtime_types::staging_xcm::v4::asset::Assets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        reserve: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                        assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::staging_xcm::v4::asset::Asset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::staging_xcm::v4::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::staging_xcm::v4::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::staging_xcm::v4::asset::Assets,
                        ticket: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<runtime_types::staging_xcm::v4::location::Location>,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::staging_xcm::v4::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::staging_xcm::v4::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::staging_xcm::v4::junction::NetworkId,
                        destination: runtime_types::staging_xcm::v4::junctions::Junctions,
                        xcm: runtime_types::staging_xcm::v4::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        unlocker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        target: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        owner: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::staging_xcm::v4::asset::Asset,
                        locker: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v4::location::Location),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::staging_xcm::v4::location::Location,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::staging_xcm::v4::asset::Assets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::staging_xcm::v4::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Xcm(
                    pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::staging_xcm::v4::Instruction,
                    >,
                );
            }
            pub mod v5 {
                use super::runtime_types;
                pub mod asset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Asset {
                        pub id: runtime_types::staging_xcm::v5::asset::AssetId,
                        pub fun: runtime_types::staging_xcm::v5::asset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::staging_xcm::v5::asset::Assets),
                        #[codec(index = 1)]
                        Wild(runtime_types::staging_xcm::v5::asset::WildAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct AssetId(pub runtime_types::staging_xcm::v5::location::Location);
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetTransferFilter {
                        #[codec(index = 0)]
                        Teleport(runtime_types::staging_xcm::v5::asset::AssetFilter),
                        #[codec(index = 1)]
                        ReserveDeposit(runtime_types::staging_xcm::v5::asset::AssetFilter),
                        #[codec(index = 2)]
                        ReserveWithdraw(runtime_types::staging_xcm::v5::asset::AssetFilter),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Assets(
                        pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::staging_xcm::v5::asset::Asset,
                        >,
                    );
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::staging_xcm::v5::asset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::staging_xcm::v5::asset::AssetId,
                            fun: runtime_types::staging_xcm::v5::asset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::staging_xcm::v5::asset::AssetId,
                            fun: runtime_types::staging_xcm::v5::asset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                }
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v5::junction::NetworkId,
                            >,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v5::junction::NetworkId,
                            >,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network: ::core::option::Option<
                                runtime_types::staging_xcm::v5::junction::NetworkId,
                            >,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::staging_xcm::v5::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 5)]
                        BitcoinCore,
                        #[codec(index = 6)]
                        BitcoinCash,
                        #[codec(index = 7)]
                        PolkadotBulletin,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1([runtime_types::staging_xcm::v5::junction::Junction; 1usize]),
                        #[codec(index = 2)]
                        X2([runtime_types::staging_xcm::v5::junction::Junction; 2usize]),
                        #[codec(index = 3)]
                        X3([runtime_types::staging_xcm::v5::junction::Junction; 3usize]),
                        #[codec(index = 4)]
                        X4([runtime_types::staging_xcm::v5::junction::Junction; 4usize]),
                        #[codec(index = 5)]
                        X5([runtime_types::staging_xcm::v5::junction::Junction; 5usize]),
                        #[codec(index = 6)]
                        X6([runtime_types::staging_xcm::v5::junction::Junction; 6usize]),
                        #[codec(index = 7)]
                        X7([runtime_types::staging_xcm::v5::junction::Junction; 7usize]),
                        #[codec(index = 8)]
                        X8([runtime_types::staging_xcm::v5::junction::Junction; 8usize]),
                    }
                }
                pub mod location {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Location {
                        pub parents: ::core::primitive::u8,
                        pub interior: runtime_types::staging_xcm::v5::junctions::Junctions,
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Outcome {
                        #[codec(index = 0)]
                        Complete {
                            used: runtime_types::sp_weights::weight_v2::Weight,
                        },
                        #[codec(index = 1)]
                        Incomplete {
                            used: runtime_types::sp_weights::weight_v2::Weight,
                            error: runtime_types::xcm::v5::traits::Error,
                        },
                        #[codec(index = 2)]
                        Error {
                            error: runtime_types::xcm::v5::traits::Error,
                        },
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Hint {
                    #[codec(index = 0)]
                    AssetClaimer {
                        location: runtime_types::staging_xcm::v5::location::Location,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::staging_xcm::v5::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v5::location::Location,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::staging_xcm::v5::asset::Assets,
                        beneficiary: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::staging_xcm::v5::asset::Assets,
                        dest: runtime_types::staging_xcm::v5::location::Location,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v3::OriginKind,
                        fallback_max_weight:
                            ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::staging_xcm::v5::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::staging_xcm::v5::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::staging_xcm::v5::asset::AssetFilter,
                        beneficiary: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::staging_xcm::v5::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v5::location::Location,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::staging_xcm::v5::asset::AssetFilter,
                        want: runtime_types::staging_xcm::v5::asset::Assets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::staging_xcm::v5::asset::AssetFilter,
                        reserve: runtime_types::staging_xcm::v5::location::Location,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::staging_xcm::v5::asset::AssetFilter,
                        dest: runtime_types::staging_xcm::v5::location::Location,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::staging_xcm::v5::QueryResponseInfo,
                        assets: runtime_types::staging_xcm::v5::asset::AssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::staging_xcm::v5::asset::Asset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::staging_xcm::v5::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::staging_xcm::v5::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::staging_xcm::v5::asset::Assets,
                        ticket: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<runtime_types::staging_xcm::v5::location::Location>,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v5::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::staging_xcm::v5::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::staging_xcm::v5::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::staging_xcm::v5::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::staging_xcm::v5::junction::NetworkId,
                        destination: runtime_types::staging_xcm::v5::junctions::Junctions,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::staging_xcm::v5::asset::Asset,
                        unlocker: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::staging_xcm::v5::asset::Asset,
                        target: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::staging_xcm::v5::asset::Asset,
                        owner: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::staging_xcm::v5::asset::Asset,
                        locker: runtime_types::staging_xcm::v5::location::Location,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v5::location::Location),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v5::location::Location,
                        >,
                    },
                    #[codec(index = 48)]
                    PayFees {
                        asset: runtime_types::staging_xcm::v5::asset::Asset,
                    },
                    #[codec(index = 49)]
                    InitiateTransfer {
                        destination: runtime_types::staging_xcm::v5::location::Location,
                        remote_fees: ::core::option::Option<
                            runtime_types::staging_xcm::v5::asset::AssetTransferFilter,
                        >,
                        preserve_origin: ::core::primitive::bool,
                        assets: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::staging_xcm::v5::asset::AssetTransferFilter,
                        >,
                        remote_xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 50)]
                    ExecuteWithOrigin {
                        descendant_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v5::junctions::Junctions,
                        >,
                        xcm: runtime_types::staging_xcm::v5::Xcm,
                    },
                    #[codec(index = 51)]
                    SetHints {
                        hints: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::staging_xcm::v5::Hint,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::staging_xcm::v5::location::Location,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::staging_xcm::v5::asset::Assets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v5::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::staging_xcm::v5::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Xcm(
                    pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::staging_xcm::v5::Instruction,
                    >,
                );
            }
        }
        pub mod staging_xcm_executor {
            use super::runtime_types;
            pub mod traits {
                use super::runtime_types;
                pub mod asset_transfer {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum TransferType {
                        #[codec(index = 0)]
                        Teleport,
                        #[codec(index = 1)]
                        LocalReserve,
                        #[codec(index = 2)]
                        DestinationReserve,
                        #[codec(index = 3)]
                        RemoteReserve(runtime_types::xcm::VersionedLocation),
                    }
                }
            }
        }
        pub mod xcm {
            use super::runtime_types;
            pub mod double_encoded {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DoubleEncoded {
                    pub encoded: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                }
            }
            pub mod v3 {
                use super::runtime_types;
                pub mod junction {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum BodyId {
                        #[codec(index = 0)]
                        Unit,
                        #[codec(index = 1)]
                        Moniker([::core::primitive::u8; 4usize]),
                        #[codec(index = 2)]
                        Index(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        Executive,
                        #[codec(index = 4)]
                        Technical,
                        #[codec(index = 5)]
                        Legislative,
                        #[codec(index = 6)]
                        Judicial,
                        #[codec(index = 7)]
                        Defense,
                        #[codec(index = 8)]
                        Administration,
                        #[codec(index = 9)]
                        Treasury,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum BodyPart {
                        #[codec(index = 0)]
                        Voice,
                        #[codec(index = 1)]
                        Members {
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                        #[codec(index = 2)]
                        Fraction {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 3)]
                        AtLeastProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        MoreThanProportion {
                            #[codec(compact)]
                            nom: ::core::primitive::u32,
                            #[codec(compact)]
                            denom: ::core::primitive::u32,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junction {
                        #[codec(index = 0)]
                        Parachain(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 1)]
                        AccountId32 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            id: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        AccountIndex64 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            #[codec(compact)]
                            index: ::core::primitive::u64,
                        },
                        #[codec(index = 3)]
                        AccountKey20 {
                            network:
                                ::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
                            key: [::core::primitive::u8; 20usize],
                        },
                        #[codec(index = 4)]
                        PalletInstance(::core::primitive::u8),
                        #[codec(index = 5)]
                        GeneralIndex(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 6)]
                        GeneralKey {
                            length: ::core::primitive::u8,
                            data: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 7)]
                        OnlyChild,
                        #[codec(index = 8)]
                        Plurality {
                            id: runtime_types::xcm::v3::junction::BodyId,
                            part: runtime_types::xcm::v3::junction::BodyPart,
                        },
                        #[codec(index = 9)]
                        GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum NetworkId {
                        #[codec(index = 0)]
                        ByGenesis([::core::primitive::u8; 32usize]),
                        #[codec(index = 1)]
                        ByFork {
                            block_number: ::core::primitive::u64,
                            block_hash: [::core::primitive::u8; 32usize],
                        },
                        #[codec(index = 2)]
                        Polkadot,
                        #[codec(index = 3)]
                        Kusama,
                        #[codec(index = 4)]
                        Westend,
                        #[codec(index = 5)]
                        Rococo,
                        #[codec(index = 6)]
                        Wococo,
                        #[codec(index = 7)]
                        Ethereum {
                            #[codec(compact)]
                            chain_id: ::core::primitive::u64,
                        },
                        #[codec(index = 8)]
                        BitcoinCore,
                        #[codec(index = 9)]
                        BitcoinCash,
                        #[codec(index = 10)]
                        PolkadotBulletin,
                    }
                }
                pub mod junctions {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Junctions {
                        #[codec(index = 0)]
                        Here,
                        #[codec(index = 1)]
                        X1(runtime_types::xcm::v3::junction::Junction),
                        #[codec(index = 2)]
                        X2(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 3)]
                        X3(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 4)]
                        X4(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 5)]
                        X5(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 6)]
                        X6(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 7)]
                        X7(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                        #[codec(index = 8)]
                        X8(
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                            runtime_types::xcm::v3::junction::Junction,
                        ),
                    }
                }
                pub mod multiasset {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetId {
                        #[codec(index = 0)]
                        Concrete(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                        #[codec(index = 1)]
                        Abstract([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum AssetInstance {
                        #[codec(index = 0)]
                        Undefined,
                        #[codec(index = 1)]
                        Index(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 2)]
                        Array4([::core::primitive::u8; 4usize]),
                        #[codec(index = 3)]
                        Array8([::core::primitive::u8; 8usize]),
                        #[codec(index = 4)]
                        Array16([::core::primitive::u8; 16usize]),
                        #[codec(index = 5)]
                        Array32([::core::primitive::u8; 32usize]),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Fungibility {
                        #[codec(index = 0)]
                        Fungible(#[codec(compact)] ::core::primitive::u128),
                        #[codec(index = 1)]
                        NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct MultiAsset {
                        pub id: runtime_types::xcm::v3::multiasset::AssetId,
                        pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum MultiAssetFilter {
                        #[codec(index = 0)]
                        Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
                        #[codec(index = 1)]
                        Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct MultiAssets(
                        pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::xcm::v3::multiasset::MultiAsset,
                        >,
                    );
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildFungibility {
                        #[codec(index = 0)]
                        Fungible,
                        #[codec(index = 1)]
                        NonFungible,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum WildMultiAsset {
                        #[codec(index = 0)]
                        All,
                        #[codec(index = 1)]
                        AllOf {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                        },
                        #[codec(index = 2)]
                        AllCounted(#[codec(compact)] ::core::primitive::u32),
                        #[codec(index = 3)]
                        AllOfCounted {
                            id: runtime_types::xcm::v3::multiasset::AssetId,
                            fun: runtime_types::xcm::v3::multiasset::WildFungibility,
                            #[codec(compact)]
                            count: ::core::primitive::u32,
                        },
                    }
                }
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        UnhandledXcmVersion,
                        #[codec(index = 36)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 37)]
                        Barrier,
                        #[codec(index = 38)]
                        WeightNotComputable,
                        #[codec(index = 39)]
                        ExceedsStackLimit,
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Instruction {
                    #[codec(index = 0)]
                    WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 1)]
                    ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 3)]
                    QueryResponse {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        response: runtime_types::xcm::v3::Response,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                        querier: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                    #[codec(index = 4)]
                    TransferAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 5)]
                    TransferReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 6)]
                    Transact {
                        origin_kind: runtime_types::xcm::v3::OriginKind,
                        require_weight_at_most: runtime_types::sp_weights::weight_v2::Weight,
                        call: runtime_types::xcm::double_encoded::DoubleEncoded,
                    },
                    #[codec(index = 7)]
                    HrmpNewChannelOpenRequest {
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        max_message_size: ::core::primitive::u32,
                        #[codec(compact)]
                        max_capacity: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    HrmpChannelAccepted {
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    HrmpChannelClosing {
                        #[codec(compact)]
                        initiator: ::core::primitive::u32,
                        #[codec(compact)]
                        sender: ::core::primitive::u32,
                        #[codec(compact)]
                        recipient: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    ClearOrigin,
                    #[codec(index = 11)]
                    DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
                    #[codec(index = 12)]
                    ReportError(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 13)]
                    DepositAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 14)]
                    DepositReserveAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 15)]
                    ExchangeAsset {
                        give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        want: runtime_types::xcm::v3::multiasset::MultiAssets,
                        maximal: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    InitiateReserveWithdraw {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 17)]
                    InitiateTeleport {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                        dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 18)]
                    ReportHolding {
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                        assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
                    },
                    #[codec(index = 19)]
                    BuyExecution {
                        fees: runtime_types::xcm::v3::multiasset::MultiAsset,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 20)]
                    RefundSurplus,
                    #[codec(index = 21)]
                    SetErrorHandler(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 22)]
                    SetAppendix(runtime_types::xcm::v3::Xcm),
                    #[codec(index = 23)]
                    ClearError,
                    #[codec(index = 24)]
                    ClaimAsset {
                        assets: runtime_types::xcm::v3::multiasset::MultiAssets,
                        ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 25)]
                    Trap(#[codec(compact)] ::core::primitive::u64),
                    #[codec(index = 26)]
                    SubscribeVersion {
                        #[codec(compact)]
                        query_id: ::core::primitive::u64,
                        max_response_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 27)]
                    UnsubscribeVersion,
                    #[codec(index = 28)]
                    BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 29)]
                    ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 30)]
                    ExpectOrigin(
                        ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    ),
                    #[codec(index = 31)]
                    ExpectError(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 32)]
                    ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
                    #[codec(index = 33)]
                    QueryPallet {
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        response_info: runtime_types::xcm::v3::QueryResponseInfo,
                    },
                    #[codec(index = 34)]
                    ExpectPallet {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        module_name:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        #[codec(compact)]
                        crate_major: ::core::primitive::u32,
                        #[codec(compact)]
                        min_crate_minor: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
                    #[codec(index = 36)]
                    ClearTransactStatus,
                    #[codec(index = 37)]
                    UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
                    #[codec(index = 38)]
                    ExportMessage {
                        network: runtime_types::xcm::v3::junction::NetworkId,
                        destination: runtime_types::xcm::v3::junctions::Junctions,
                        xcm: runtime_types::xcm::v3::Xcm,
                    },
                    #[codec(index = 39)]
                    LockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 40)]
                    UnlockAsset {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 41)]
                    NoteUnlockable {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 42)]
                    RequestUnlock {
                        asset: runtime_types::xcm::v3::multiasset::MultiAsset,
                        locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    },
                    #[codec(index = 43)]
                    SetFeesMode {
                        jit_withdraw: ::core::primitive::bool,
                    },
                    #[codec(index = 44)]
                    SetTopic([::core::primitive::u8; 32usize]),
                    #[codec(index = 45)]
                    ClearTopic,
                    #[codec(index = 46)]
                    AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                    #[codec(index = 47)]
                    UnpaidExecution {
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                        check_origin: ::core::option::Option<
                            runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum MaybeErrorCode {
                    #[codec(index = 0)]
                    Success,
                    #[codec(index = 1)]
                    Error(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    TruncatedError(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum OriginKind {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    SovereignAccount,
                    #[codec(index = 2)]
                    Superuser,
                    #[codec(index = 3)]
                    Xcm,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PalletInfo {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    #[codec(compact)]
                    pub major: ::core::primitive::u32,
                    #[codec(compact)]
                    pub minor: ::core::primitive::u32,
                    #[codec(compact)]
                    pub patch: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryResponseInfo {
                    pub destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
                    #[codec(compact)]
                    pub query_id: ::core::primitive::u64,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Response {
                    #[codec(index = 0)]
                    Null,
                    #[codec(index = 1)]
                    Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
                    #[codec(index = 2)]
                    ExecutionResult(
                        ::core::option::Option<(
                            ::core::primitive::u32,
                            runtime_types::xcm::v3::traits::Error,
                        )>,
                    ),
                    #[codec(index = 3)]
                    Version(::core::primitive::u32),
                    #[codec(index = 4)]
                    PalletsInfo(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::xcm::v3::PalletInfo,
                        >,
                    ),
                    #[codec(index = 5)]
                    DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum WeightLimit {
                    #[codec(index = 0)]
                    Unlimited,
                    #[codec(index = 1)]
                    Limited(runtime_types::sp_weights::weight_v2::Weight),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Xcm(
                    pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::xcm::v3::Instruction,
                    >,
                );
            }
            pub mod v5 {
                use super::runtime_types;
                pub mod traits {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Error {
                        #[codec(index = 0)]
                        Overflow,
                        #[codec(index = 1)]
                        Unimplemented,
                        #[codec(index = 2)]
                        UntrustedReserveLocation,
                        #[codec(index = 3)]
                        UntrustedTeleportLocation,
                        #[codec(index = 4)]
                        LocationFull,
                        #[codec(index = 5)]
                        LocationNotInvertible,
                        #[codec(index = 6)]
                        BadOrigin,
                        #[codec(index = 7)]
                        InvalidLocation,
                        #[codec(index = 8)]
                        AssetNotFound,
                        #[codec(index = 9)]
                        FailedToTransactAsset,
                        #[codec(index = 10)]
                        NotWithdrawable,
                        #[codec(index = 11)]
                        LocationCannotHold,
                        #[codec(index = 12)]
                        ExceedsMaxMessageSize,
                        #[codec(index = 13)]
                        DestinationUnsupported,
                        #[codec(index = 14)]
                        Transport,
                        #[codec(index = 15)]
                        Unroutable,
                        #[codec(index = 16)]
                        UnknownClaim,
                        #[codec(index = 17)]
                        FailedToDecode,
                        #[codec(index = 18)]
                        MaxWeightInvalid,
                        #[codec(index = 19)]
                        NotHoldingFees,
                        #[codec(index = 20)]
                        TooExpensive,
                        #[codec(index = 21)]
                        Trap(::core::primitive::u64),
                        #[codec(index = 22)]
                        ExpectationFalse,
                        #[codec(index = 23)]
                        PalletNotFound,
                        #[codec(index = 24)]
                        NameMismatch,
                        #[codec(index = 25)]
                        VersionIncompatible,
                        #[codec(index = 26)]
                        HoldingWouldOverflow,
                        #[codec(index = 27)]
                        ExportError,
                        #[codec(index = 28)]
                        ReanchorFailed,
                        #[codec(index = 29)]
                        NoDeal,
                        #[codec(index = 30)]
                        FeesNotMet,
                        #[codec(index = 31)]
                        LockError,
                        #[codec(index = 32)]
                        NoPermission,
                        #[codec(index = 33)]
                        Unanchored,
                        #[codec(index = 34)]
                        NotDepositable,
                        #[codec(index = 35)]
                        TooManyAssets,
                        #[codec(index = 36)]
                        UnhandledXcmVersion,
                        #[codec(index = 37)]
                        WeightLimitReached(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 38)]
                        Barrier,
                        #[codec(index = 39)]
                        WeightNotComputable,
                        #[codec(index = 40)]
                        ExceedsStackLimit,
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum VersionedAssetId {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::AssetId),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::asset::AssetId),
                #[codec(index = 5)]
                V5(runtime_types::staging_xcm::v5::asset::AssetId),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum VersionedAssets {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::multiasset::MultiAssets),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::asset::Assets),
                #[codec(index = 5)]
                V5(runtime_types::staging_xcm::v5::asset::Assets),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum VersionedLocation {
                #[codec(index = 3)]
                V3(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::location::Location),
                #[codec(index = 5)]
                V5(runtime_types::staging_xcm::v5::location::Location),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum VersionedResponse {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Response),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::Response),
                #[codec(index = 5)]
                V5(runtime_types::staging_xcm::v5::Response),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum VersionedXcm {
                #[codec(index = 3)]
                V3(runtime_types::xcm::v3::Xcm),
                #[codec(index = 4)]
                V4(runtime_types::staging_xcm::v4::Xcm),
                #[codec(index = 5)]
                V5(runtime_types::staging_xcm::v5::Xcm),
            }
        }
        pub mod xcm_runtime_apis {
            use super::runtime_types;
            pub mod dry_run {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CallDryRunEffects<_0> {
                    pub execution_result: ::core::result::Result<
                        runtime_types::frame_support::dispatch::PostDispatchInfo,
                        runtime_types::sp_runtime::DispatchErrorWithPostInfo<
                            runtime_types::frame_support::dispatch::PostDispatchInfo,
                        >,
                    >,
                    pub emitted_events: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                    pub local_xcm: ::core::option::Option<runtime_types::xcm::VersionedXcm>,
                    pub forwarded_xcms: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::xcm::VersionedLocation,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::xcm::VersionedXcm>,
                    )>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Error {
                    #[codec(index = 0)]
                    Unimplemented,
                    #[codec(index = 1)]
                    VersionedConversionFailed,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct XcmDryRunEffects<_0> {
                    pub execution_result: runtime_types::staging_xcm::v5::traits::Outcome,
                    pub emitted_events: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                    pub forwarded_xcms: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::xcm::VersionedLocation,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::xcm::VersionedXcm>,
                    )>,
                }
            }
        }
    }
}
